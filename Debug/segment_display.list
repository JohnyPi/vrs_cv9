
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007400  08007400  00017400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800780c  0800780c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800780c  0800780c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800780c  0800780c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200001d8  080079ec  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080079ec  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de7  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f62  00000000  00000000  00029fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a7  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c84  00000000  00000000  000323c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079cd3  00000000  00000000  0003a04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b4  00000000  00000000  000b3d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073e4 	.word	0x080073e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080073e4 	.word	0x080073e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c76:	6a1a      	ldr	r2, [r3, #32]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	620b      	str	r3, [r1, #32]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400

08000de8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010400 	.word	0x40010400

08000e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400

08000e80 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80cd 	beq.w	8001058 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d061      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d01c      	beq.n	8000f08 <LL_EXTI_Init+0x60>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	dc25      	bgt.n	8000f1e <LL_EXTI_Init+0x76>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <LL_EXTI_Init+0x34>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d00b      	beq.n	8000ef2 <LL_EXTI_Init+0x4a>
 8000eda:	e020      	b.n	8000f1e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff21 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff feac 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          break;
 8000ef0:	e018      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff feca 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff feed 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f06:	e00d      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe9b 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fee2 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f1c:	e002      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
          break;
 8000f22:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a9b      	ldrb	r3, [r3, #10]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02e      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d01c      	beq.n	8000f6e <LL_EXTI_Init+0xc6>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dc25      	bgt.n	8000f84 <LL_EXTI_Init+0xdc>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <LL_EXTI_Init+0x9a>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00b      	beq.n	8000f58 <LL_EXTI_Init+0xb0>
 8000f40:	e020      	b.n	8000f84 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff86 	bl	8000e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff11 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f56:	e019      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff2f 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff52 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f6c:	e00e      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff00 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff47 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f82:	e003      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
            break;
 8000f88:	e000      	b.n	8000f8c <LL_EXTI_Init+0xe4>
        }
      }
 8000f8a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d076      	beq.n	8001082 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d01c      	beq.n	8000fd6 <LL_EXTI_Init+0x12e>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc25      	bgt.n	8000fec <LL_EXTI_Init+0x144>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LL_EXTI_Init+0x102>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <LL_EXTI_Init+0x118>
 8000fa8:	e020      	b.n	8000fec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fece 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe57 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          break;
 8000fbe:	e018      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe77 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe98 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fd4:	e00d      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe46 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8d 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fea:	e002      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
          break;
 8000ff0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d043      	beq.n	8001082 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a9b      	ldrb	r3, [r3, #10]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d01c      	beq.n	800103c <LL_EXTI_Init+0x194>
 8001002:	2b03      	cmp	r3, #3
 8001004:	dc25      	bgt.n	8001052 <LL_EXTI_Init+0x1aa>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d002      	beq.n	8001010 <LL_EXTI_Init+0x168>
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00b      	beq.n	8001026 <LL_EXTI_Init+0x17e>
 800100e:	e020      	b.n	8001052 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff febc 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001024:	e02e      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fedc 	bl	8000de8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fefd 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800103a:	e023      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff feab 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fef2 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001050:	e018      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
            break;
 8001056:	e015      	b.n	8001084 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe17 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe5e 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe21 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe68 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
 8001080:	e000      	b.n	8001084 <LL_EXTI_Init+0x1dc>
      }
 8001082:	bf00      	nop
#endif
  }
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800108e:	b480      	push	{r7}
 8001090:	b089      	sub	sp, #36	; 0x24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	; 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return(result);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	61bb      	str	r3, [r7, #24]
  return(result);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	613b      	str	r3, [r7, #16]
  return(result);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2103      	movs	r1, #3
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	613b      	str	r3, [r7, #16]
  return(result);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	210f      	movs	r1, #15
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return(result);
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001226:	b480      	push	{r7}
 8001228:	b089      	sub	sp, #36	; 0x24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	613b      	str	r3, [r7, #16]
  return(result);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	210f      	movs	r1, #15
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	61bb      	str	r3, [r7, #24]
  return(result);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	613b      	str	r3, [r7, #16]
  return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012ac:	e048      	b.n	8001340 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03a      	beq.n	800133a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fede 	bl	800108e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d003      	beq.n	80012e2 <LL_GPIO_Init+0x5e>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d106      	bne.n	80012f0 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff14 	bl	8001118 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff3a 	bl	8001172 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d119      	bne.n	800133a <LL_GPIO_Init+0xb6>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	60bb      	str	r3, [r7, #8]
  return(result);
 8001312:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	2b07      	cmp	r3, #7
 800131a:	d807      	bhi.n	800132c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	461a      	mov	r2, r3
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff51 	bl	80011cc <LL_GPIO_SetAFPin_0_7>
 800132a:	e006      	b.n	800133a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	461a      	mov	r2, r3
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff76 	bl	8001226 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1af      	bne.n	80012ae <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d003      	beq.n	800135e <LL_GPIO_Init+0xda>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d107      	bne.n	800136e <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff febd 	bl	80010e8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 0201 	bic.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0219      	lsls	r1, r3, #8
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff65 	bl	8001398 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff6d 	bl	80013b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffb6 	bl	8001456 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff44 	bl	8001378 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffa0 	bl	8001436 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff70 	bl	80013e6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff81 	bl	8001416 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa9 	bl	8001472 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffb6 	bl	8001498 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	615a      	str	r2, [r3, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <LL_TIM_Init+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d003      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <LL_TIM_Init+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d106      	bne.n	800168e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <LL_TIM_Init+0xd4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <LL_TIM_Init+0x6a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d00f      	beq.n	80016be <LL_TIM_Init+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <LL_TIM_Init+0xd8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00b      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <LL_TIM_Init+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <LL_TIM_Init+0xe0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d003      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <LL_TIM_Init+0xe4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d106      	bne.n	80016cc <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff3a 	bl	8001552 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff26 	bl	8001536 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LL_TIM_Init+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00b      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LL_TIM_Init+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LL_TIM_Init+0xe0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <LL_TIM_Init+0xb6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_TIM_Init+0xe4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7c1b      	ldrb	r3, [r3, #16]
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2c 	bl	800156e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff8b 	bl	8001632 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40000400 	.word	0x40000400
 8001730:	40014000 	.word	0x40014000
 8001734:	40014400 	.word	0x40014400
 8001738:	40014800 	.word	0x40014800

0800173c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001752:	d045      	beq.n	80017e0 <LL_TIM_OC_Init+0xa4>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175a:	d848      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d036      	beq.n	80017d2 <LL_TIM_OC_Init+0x96>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d840      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	d027      	beq.n	80017c4 <LL_TIM_OC_Init+0x88>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d838      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001782:	d018      	beq.n	80017b6 <LL_TIM_OC_Init+0x7a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178a:	d830      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_TIM_OC_Init+0x5e>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d007      	beq.n	80017a8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001798:	e029      	b.n	80017ee <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f82d 	bl	80017fc <OC1Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
      break;
 80017a6:	e023      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f8a6 	bl	80018fc <OC2Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	75fb      	strb	r3, [r7, #23]
      break;
 80017b4:	e01c      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f923 	bl	8001a04 <OC3Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
      break;
 80017c2:	e015      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9a0 	bl	8001b0c <OC4Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
      break;
 80017d0:	e00e      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa05 	bl	8001be4 <OC5Config>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
      break;
 80017de:	e007      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa60 	bl	8001ca8 <OC6Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
      break;
 80017ec:	e000      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      break;
 80017ee:	bf00      	nop
  }

  return result;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f023 0202 	bic.w	r2, r3, #2
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0201 	bic.w	r2, r3, #1
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <OC1Config+0xf0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00b      	beq.n	8001886 <OC1Config+0x8a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <OC1Config+0xf4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <OC1Config+0x8a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <OC1Config+0xf8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <OC1Config+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <OC1Config+0xfc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11e      	bne.n	80018c4 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f023 0208 	bic.w	r2, r3, #8
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f023 0204 	bic.w	r2, r3, #4
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe57 	bl	800158a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800

080018fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 0210 	bic.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0220 	bic.w	r2, r3, #32
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0210 	bic.w	r2, r3, #16
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <OC2Config+0xf8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00b      	beq.n	800198c <OC2Config+0x90>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <OC2Config+0xfc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <OC2Config+0x90>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <OC2Config+0x100>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <OC2Config+0x90>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <OC2Config+0x104>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11f      	bne.n	80019cc <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	019b      	lsls	r3, r3, #6
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fde1 	bl	80015a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40014400 	.word	0x40014400
 8001a00:	40014800 	.word	0x40014800

08001a04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <OC3Config+0xf8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <OC3Config+0x8e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <OC3Config+0xfc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <OC3Config+0x8e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <OC3Config+0x100>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <OC3Config+0x8e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <OC3Config+0x104>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11f      	bne.n	8001ad2 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd6c 	bl	80015c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800

08001b0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <OC4Config+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <OC4Config+0x90>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <OC4Config+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <OC4Config+0x90>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <OC4Config+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <OC4Config+0x90>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <OC4Config+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d107      	bne.n	8001bac <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd0d 	bl	80015de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800

08001be4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <OC5Config+0xb4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00b      	beq.n	8001c60 <OC5Config+0x7c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <OC5Config+0xb8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <OC5Config+0x7c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <OC5Config+0xbc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <OC5Config+0x7c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <OC5Config+0xc0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcba 	bl	80015fa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40014400 	.word	0x40014400
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	051b      	lsls	r3, r3, #20
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <OC6Config+0xb4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00b      	beq.n	8001d26 <OC6Config+0x7e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <OC6Config+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <OC6Config+0x7e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <OC6Config+0xbc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <OC6Config+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <OC6Config+0xc0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d109      	bne.n	8001d3a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fc65 	bl	8001616 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800

08001d6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <LL_InitTick+0x30>)
 8001d80:	3b01      	subs	r3, #1
 8001d82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_InitTick+0x30>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_InitTick+0x30>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffdd 	bl	8001d6c <LL_InitTick>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <LL_mDelay+0x48>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d00c      	beq.n	8001dee <LL_mDelay+0x32>
  {
    Delay++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001dda:	e008      	b.n	8001dee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LL_mDelay+0x48>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <LL_mDelay+0x32>
    {
      Delay--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f3      	bne.n	8001ddc <LL_mDelay+0x20>
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_SetSystemCoreClock+0x1c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f06f 0201 	mvn.w	r2, #1
 8001e36:	611a      	str	r2, [r3, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <character_A>:
#include "main.h"

//Znaky abecedy

void character_A(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eae:	f7ff ffea 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f7ff ffe5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f7ff ffdf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed0:	f7ff ffd9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f7ff ffd4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <character_A+0x48>)
 8001ee2:	f7ff ffd0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	48000400 	.word	0x48000400

08001ef0 <character_B>:

void character_B(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f7ff ffc3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f00:	2120      	movs	r1, #32
 8001f02:	480a      	ldr	r0, [pc, #40]	; (8001f2c <character_B+0x3c>)
 8001f04:	f7ff ffbf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f7ff ffb9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f14:	2108      	movs	r1, #8
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f7ff ffb4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <character_B+0x3c>)
 8001f22:	f7ff ffb0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	48000400 	.word	0x48000400

08001f30 <character_C>:

void character_C(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001f34:	2102      	movs	r1, #2
 8001f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3a:	f7ff ffa4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f3e:	2120      	movs	r1, #32
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <character_C+0x30>)
 8001f42:	f7ff ffa0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f7ff ff9a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001f52:	2108      	movs	r1, #8
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f7ff ff95 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	48000400 	.word	0x48000400

08001f64 <character_D>:

void character_D(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f7ff ff8a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff ff84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001f7e:	2120      	movs	r1, #32
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <character_D+0x3c>)
 8001f82:	f7ff ff80 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f7ff ff7a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001f92:	2110      	movs	r1, #16
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <character_D+0x3c>)
 8001f96:	f7ff ff76 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	48000400 	.word	0x48000400

08001fa4 <character_E>:

void character_E(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fa8:	2102      	movs	r1, #2
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f7ff ff6a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <character_E+0x38>)
 8001fb6:	f7ff ff66 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f7ff ff60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f7ff ff5b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <character_E+0x38>)
 8001fd4:	f7ff ff57 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	48000400 	.word	0x48000400

08001fe0 <character_F>:

void character_F(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f7ff ff4c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f7ff ff46 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f7ff ff41 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002004:	2110      	movs	r1, #16
 8002006:	4802      	ldr	r0, [pc, #8]	; (8002010 <character_F+0x30>)
 8002008:	f7ff ff3d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	48000400 	.word	0x48000400

08002014 <character_G>:

void character_G(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002018:	2102      	movs	r1, #2
 800201a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201e:	f7ff ff32 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202a:	f7ff ff2c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800202e:	2120      	movs	r1, #32
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <character_G+0x3c>)
 8002032:	f7ff ff28 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800203a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203e:	f7ff ff22 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002042:	2108      	movs	r1, #8
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f7ff ff1d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	48000400 	.word	0x48000400

08002054 <character_H>:


void character_H(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002058:	2101      	movs	r1, #1
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f7ff ff12 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206a:	f7ff ff0c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800206e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f7ff ff06 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800207a:	2108      	movs	r1, #8
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f7ff ff01 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002084:	2110      	movs	r1, #16
 8002086:	4802      	ldr	r0, [pc, #8]	; (8002090 <character_H+0x3c>)
 8002088:	f7ff fefd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	48000400 	.word	0x48000400

08002094 <character_I>:

void character_I(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f7ff fef1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020a4:	2108      	movs	r1, #8
 80020a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020aa:	f7ff feec 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <character_J>:

void character_J(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80020b8:	2101      	movs	r1, #1
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020be:	f7ff fee2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f7ff fedc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020ce:	2120      	movs	r1, #32
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <character_J+0x34>)
 80020d2:	f7ff fed8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80020d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f7ff fed2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	48000400 	.word	0x48000400

080020ec <character_K>:

void character_K(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020f0:	2102      	movs	r1, #2
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f7ff fec6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f7ff fec0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210e:	f7ff feba 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002112:	2108      	movs	r1, #8
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f7ff feb5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800211c:	2110      	movs	r1, #16
 800211e:	4802      	ldr	r0, [pc, #8]	; (8002128 <character_K+0x3c>)
 8002120:	f7ff feb1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	48000400 	.word	0x48000400

0800212c <character_L>:

void character_L(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002130:	2120      	movs	r1, #32
 8002132:	4808      	ldr	r0, [pc, #32]	; (8002154 <character_L+0x28>)
 8002134:	f7ff fea7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002140:	f7ff fea1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002144:	2108      	movs	r1, #8
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f7ff fe9c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	48000400 	.word	0x48000400

08002158 <character_M>:

void character_M(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800215c:	2102      	movs	r1, #2
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f7ff fe90 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002166:	2101      	movs	r1, #1
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f7ff fe8b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002170:	2120      	movs	r1, #32
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <character_M+0x30>)
 8002174:	f7ff fe87 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002178:	2108      	movs	r1, #8
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f7ff fe82 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	48000400 	.word	0x48000400

0800218c <character_N>:

void character_N(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002198:	f7ff fe75 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f7ff fe6f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021a8:	2110      	movs	r1, #16
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <character_N+0x28>)
 80021ac:	f7ff fe6b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	48000400 	.word	0x48000400

080021b8 <character_O>:

void character_O(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021bc:	2102      	movs	r1, #2
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f7ff fe60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021c6:	2101      	movs	r1, #1
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f7ff fe5b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f7ff fe55 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80021dc:	2120      	movs	r1, #32
 80021de:	4808      	ldr	r0, [pc, #32]	; (8002200 <character_O+0x48>)
 80021e0:	f7ff fe51 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80021e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f7ff fe4b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021f0:	2108      	movs	r1, #8
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f6:	f7ff fe46 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	48000400 	.word	0x48000400

08002204 <character_P>:

void character_P(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002208:	2102      	movs	r1, #2
 800220a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220e:	f7ff fe3a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002212:	2101      	movs	r1, #1
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f7ff fe35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800221c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	f7ff fe2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002228:	2108      	movs	r1, #8
 800222a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222e:	f7ff fe2a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002232:	2110      	movs	r1, #16
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <character_P+0x3c>)
 8002236:	f7ff fe26 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	48000400 	.word	0x48000400

08002244 <character_Q>:

void character_Q(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002248:	2102      	movs	r1, #2
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f7ff fe1a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002252:	2101      	movs	r1, #1
 8002254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002258:	f7ff fe15 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002264:	f7ff fe0f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002268:	2108      	movs	r1, #8
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f7ff fe0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002272:	2110      	movs	r1, #16
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <character_Q+0x3c>)
 8002276:	f7ff fe06 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	48000400 	.word	0x48000400

08002284 <character_R>:

void character_R(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f7ff fdf9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002294:	2110      	movs	r1, #16
 8002296:	4802      	ldr	r0, [pc, #8]	; (80022a0 <character_R+0x1c>)
 8002298:	f7ff fdf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	48000400 	.word	0x48000400

080022a4 <character_S>:

void character_S(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80022a8:	2102      	movs	r1, #2
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ae:	f7ff fdea 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f7ff fde4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022be:	2120      	movs	r1, #32
 80022c0:	4806      	ldr	r0, [pc, #24]	; (80022dc <character_S+0x38>)
 80022c2:	f7ff fde0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022c6:	2108      	movs	r1, #8
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f7ff fddb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022d0:	2110      	movs	r1, #16
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <character_S+0x38>)
 80022d4:	f7ff fdd7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	48000400 	.word	0x48000400

080022e0 <character_T>:

void character_T(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022e4:	2120      	movs	r1, #32
 80022e6:	480a      	ldr	r0, [pc, #40]	; (8002310 <character_T+0x30>)
 80022e8:	f7ff fdcd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f4:	f7ff fdc7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022f8:	2108      	movs	r1, #8
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f7ff fdc2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002302:	2110      	movs	r1, #16
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <character_T+0x30>)
 8002306:	f7ff fdbe 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	48000400 	.word	0x48000400

08002314 <character_U>:

void character_U(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002318:	2101      	movs	r1, #1
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f7ff fdb2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232a:	f7ff fdac 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800232e:	2120      	movs	r1, #32
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <character_U+0x3c>)
 8002332:	f7ff fda8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f7ff fda2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002342:	2108      	movs	r1, #8
 8002344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002348:	f7ff fd9d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	48000400 	.word	0x48000400

08002354 <character_V>:

void character_V(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002358:	2101      	movs	r1, #1
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235e:	f7ff fd92 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002362:	2120      	movs	r1, #32
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <character_V+0x24>)
 8002366:	f7ff fd8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800236a:	2108      	movs	r1, #8
 800236c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002370:	f7ff fd89 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	48000400 	.word	0x48000400

0800237c <character_W>:

void character_W(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002380:	2101      	movs	r1, #1
 8002382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002386:	f7ff fd7e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f7ff fd78 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002396:	2120      	movs	r1, #32
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <character_W+0x44>)
 800239a:	f7ff fd74 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800239e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a6:	f7ff fd6e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023aa:	2108      	movs	r1, #8
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f7ff fd69 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023b4:	2110      	movs	r1, #16
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <character_W+0x44>)
 80023b8:	f7ff fd65 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	48000400 	.word	0x48000400

080023c4 <character_X>:

void character_X(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023c8:	2102      	movs	r1, #2
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f7ff fd5a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80023d2:	2120      	movs	r1, #32
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <character_X+0x24>)
 80023d6:	f7ff fd56 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023da:	2110      	movs	r1, #16
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <character_X+0x24>)
 80023de:	f7ff fd52 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	48000400 	.word	0x48000400

080023ec <character_Y>:

void character_Y(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023f0:	2101      	movs	r1, #1
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f6:	f7ff fd46 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002402:	f7ff fd40 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002406:	2120      	movs	r1, #32
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <character_Y+0x38>)
 800240a:	f7ff fd3c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800240e:	2108      	movs	r1, #8
 8002410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002414:	f7ff fd37 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002418:	2110      	movs	r1, #16
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <character_Y+0x38>)
 800241c:	f7ff fd33 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	48000400 	.word	0x48000400

08002428 <character_Z>:

void character_Z(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800242c:	2102      	movs	r1, #2
 800242e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002432:	f7ff fd28 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002436:	2101      	movs	r1, #1
 8002438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243c:	f7ff fd23 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002440:	2120      	movs	r1, #32
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <character_Z+0x38>)
 8002444:	f7ff fd1f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800244c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002450:	f7ff fd19 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002454:	2110      	movs	r1, #16
 8002456:	4802      	ldr	r0, [pc, #8]	; (8002460 <character_Z+0x38>)
 8002458:	f7ff fd15 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	48000400 	.word	0x48000400

08002464 <character_1>:

//Znaky cisla

void character_1(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002468:	2101      	movs	r1, #1
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f7ff fd0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f7ff fd04 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <character_2>:

void character_2(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002488:	2101      	movs	r1, #1
 800248a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248e:	f7ff fcfa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002492:	2102      	movs	r1, #2
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f7ff fcf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800249c:	2110      	movs	r1, #16
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <character_2+0x38>)
 80024a0:	f7ff fcf1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ac:	f7ff fceb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024b0:	2120      	movs	r1, #32
 80024b2:	4802      	ldr	r0, [pc, #8]	; (80024bc <character_2+0x38>)
 80024b4:	f7ff fce7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	48000400 	.word	0x48000400

080024c0 <character_3>:

void character_3(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80024c4:	2101      	movs	r1, #1
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ca:	f7ff fcdc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80024ce:	2102      	movs	r1, #2
 80024d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d4:	f7ff fcd7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024d8:	2110      	movs	r1, #16
 80024da:	4807      	ldr	r0, [pc, #28]	; (80024f8 <character_3+0x38>)
 80024dc:	f7ff fcd3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f7ff fccd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80024ec:	2120      	movs	r1, #32
 80024ee:	4802      	ldr	r0, [pc, #8]	; (80024f8 <character_3+0x38>)
 80024f0:	f7ff fcc9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	48000400 	.word	0x48000400

080024fc <character_4>:

void character_4(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002500:	2108      	movs	r1, #8
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f7ff fcbe 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800250a:	2101      	movs	r1, #1
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f7ff fcb9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002514:	2110      	movs	r1, #16
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <character_4+0x30>)
 8002518:	f7ff fcb5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800251c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	f7ff fcaf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	48000400 	.word	0x48000400

08002530 <character_5>:

void character_5(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002534:	2108      	movs	r1, #8
 8002536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253a:	f7ff fca4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800253e:	2120      	movs	r1, #32
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <character_5+0x38>)
 8002542:	f7ff fca0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002546:	2110      	movs	r1, #16
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <character_5+0x38>)
 800254a:	f7ff fc9c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800254e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002556:	f7ff fc96 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800255a:	2102      	movs	r1, #2
 800255c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002560:	f7ff fc91 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	48000400 	.word	0x48000400

0800256c <character_6>:

void character_6(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002570:	2108      	movs	r1, #8
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f7ff fc86 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800257a:	2120      	movs	r1, #32
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <character_6+0x44>)
 800257e:	f7ff fc82 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002582:	2110      	movs	r1, #16
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <character_6+0x44>)
 8002586:	f7ff fc7e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800258a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002592:	f7ff fc78 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002596:	2102      	movs	r1, #2
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f7ff fc73 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f7ff fc6d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	48000400 	.word	0x48000400

080025b4 <character_7>:

void character_7(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80025b8:	2101      	movs	r1, #1
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025be:	f7ff fc62 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f7ff fc5c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80025ce:	2102      	movs	r1, #2
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d4:	f7ff fc57 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <character_8>:

void character_8(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025e0:	2108      	movs	r1, #8
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e6:	f7ff fc4e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025ea:	2120      	movs	r1, #32
 80025ec:	480f      	ldr	r0, [pc, #60]	; (800262c <character_8+0x50>)
 80025ee:	f7ff fc4a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025f2:	2110      	movs	r1, #16
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <character_8+0x50>)
 80025f6:	f7ff fc46 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002602:	f7ff fc40 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002606:	2102      	movs	r1, #2
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f7ff fc3b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f7ff fc35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800261c:	2101      	movs	r1, #1
 800261e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002622:	f7ff fc30 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	48000400 	.word	0x48000400

08002630 <character_9>:

void character_9(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002634:	2101      	movs	r1, #1
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f7ff fc24 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800263e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002646:	f7ff fc1e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800264a:	2102      	movs	r1, #2
 800264c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002650:	f7ff fc19 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002654:	2110      	movs	r1, #16
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <character_9+0x3c>)
 8002658:	f7ff fc15 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800265c:	2108      	movs	r1, #8
 800265e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002662:	f7ff fc10 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	48000400 	.word	0x48000400

08002670 <character_0>:

void character_0(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002674:	2108      	movs	r1, #8
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f7ff fc04 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800267e:	2120      	movs	r1, #32
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <character_0+0x48>)
 8002682:	f7ff fc00 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268e:	f7ff fbfa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002692:	2102      	movs	r1, #2
 8002694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002698:	f7ff fbf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800269c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a4:	f7ff fbef 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80026a8:	2101      	movs	r1, #1
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ae:	f7ff fbea 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	48000400 	.word	0x48000400

080026bc <resetSegments>:
uint8_t d = 0;



/*Reset (turn-off) all the segments of display*/
void resetSegments(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80026c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c8:	f7ff fbcf 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80026cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f7ff fbc9 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80026d8:	2102      	movs	r1, #2
 80026da:	480e      	ldr	r0, [pc, #56]	; (8002714 <resetSegments+0x58>)
 80026dc:	f7ff fbc5 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80026e0:	2120      	movs	r1, #32
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <resetSegments+0x58>)
 80026e4:	f7ff fbc1 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80026e8:	2110      	movs	r1, #16
 80026ea:	480a      	ldr	r0, [pc, #40]	; (8002714 <resetSegments+0x58>)
 80026ec:	f7ff fbbd 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80026f0:	2101      	movs	r1, #1
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f6:	f7ff fbb8 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80026fa:	2102      	movs	r1, #2
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002700:	f7ff fbb3 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8002704:	2108      	movs	r1, #8
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7ff fbae 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	48000400 	.word	0x48000400

08002718 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800271c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002724:	f7ff fbaf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f7ff fba9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8002734:	2102      	movs	r1, #2
 8002736:	480e      	ldr	r0, [pc, #56]	; (8002770 <setSegments+0x58>)
 8002738:	f7ff fba5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800273c:	2120      	movs	r1, #32
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <setSegments+0x58>)
 8002740:	f7ff fba1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8002744:	2110      	movs	r1, #16
 8002746:	480a      	ldr	r0, [pc, #40]	; (8002770 <setSegments+0x58>)
 8002748:	f7ff fb9d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800274c:	2101      	movs	r1, #1
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f7ff fb98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8002756:	2102      	movs	r1, #2
 8002758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275c:	f7ff fb93 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8002760:	2108      	movs	r1, #8
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f7ff fb8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	48000400 	.word	0x48000400

08002774 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8002778:	2104      	movs	r1, #4
 800277a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277e:	f7ff fb82 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8002782:	2101      	movs	r1, #1
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <resetDigits+0x3c>)
 8002786:	f7ff fb7e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800278a:	2110      	movs	r1, #16
 800278c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002790:	f7ff fb79 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8002794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279c:	f7ff fb73 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a6:	f7ff fb6e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	48000400 	.word	0x48000400

080027b4 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80027b8:	2101      	movs	r1, #1
 80027ba:	480d      	ldr	r0, [pc, #52]	; (80027f0 <setDigits+0x3c>)
 80027bc:	f7ff fb55 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80027c0:	2110      	movs	r1, #16
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c6:	f7ff fb50 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80027ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d2:	f7ff fb4a 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 80027d6:	2104      	movs	r1, #4
 80027d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027dc:	f7ff fb45 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f7ff fb40 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	48000400 	.word	0x48000400

080027f4 <setDecimalPoint>:

void setDecimalPoint(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 80027f8:	2102      	movs	r1, #2
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <setDecimalPoint+0x10>)
 80027fc:	f7ff fb43 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	48000400 	.word	0x48000400

08002808 <character_podciar>:

void character_podciar(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800280c:	2120      	movs	r1, #32
 800280e:	4802      	ldr	r0, [pc, #8]	; (8002818 <character_podciar+0x10>)
 8002810:	f7ff fb39 	bl	8001e86 <LL_GPIO_ResetOutputPin>

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	48000400 	.word	0x48000400

0800281c <character_minus>:

void character_minus(void) {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002820:	2110      	movs	r1, #16
 8002822:	4802      	ldr	r0, [pc, #8]	; (800282c <character_minus+0x10>)
 8002824:	f7ff fb2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	48000400 	.word	0x48000400

08002830 <setDigit>:
 */

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	switch (pos) {
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d823      	bhi.n	8002888 <setDigit+0x58>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <setDigit+0x18>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	08002859 	.word	0x08002859
 800284c:	08002863 	.word	0x08002863
 8002850:	0800286f 	.word	0x0800286f
 8002854:	0800287d 	.word	0x0800287d
	case 0:
		DIGIT_1_ON;
 8002858:	2101      	movs	r1, #1
 800285a:	480d      	ldr	r0, [pc, #52]	; (8002890 <setDigit+0x60>)
 800285c:	f7ff fb05 	bl	8001e6a <LL_GPIO_SetOutputPin>
		break;
 8002860:	e012      	b.n	8002888 <setDigit+0x58>
	case 1:
		DIGIT_2_ON;
 8002862:	2110      	movs	r1, #16
 8002864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002868:	f7ff faff 	bl	8001e6a <LL_GPIO_SetOutputPin>
		break;
 800286c:	e00c      	b.n	8002888 <setDigit+0x58>
	case 2:
		DIGIT_3_ON;
 800286e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002876:	f7ff faf8 	bl	8001e6a <LL_GPIO_SetOutputPin>
		break;
 800287a:	e005      	b.n	8002888 <setDigit+0x58>
	case 3:
		DIGIT_4_ON;
 800287c:	2104      	movs	r1, #4
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f7ff faf2 	bl	8001e6a <LL_GPIO_SetOutputPin>
		break;
 8002886:	bf00      	nop
	}
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	48000400 	.word	0x48000400

08002894 <display_update>:

void display_update(char c, uint8_t dgt) {
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	460a      	mov	r2, r1
 800289e:	71fb      	strb	r3, [r7, #7]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71bb      	strb	r3, [r7, #6]

	switch (c) {
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	3b2d      	subs	r3, #45	; 0x2d
 80028a8:	2b4d      	cmp	r3, #77	; 0x4d
 80028aa:	f200 81a9 	bhi.w	8002c00 <display_update+0x36c>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <display_update+0x20>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	08002bf3 	.word	0x08002bf3
 80028b8:	08002c01 	.word	0x08002c01
 80028bc:	08002c01 	.word	0x08002c01
 80028c0:	08002bd7 	.word	0x08002bd7
 80028c4:	08002b59 	.word	0x08002b59
 80028c8:	08002b67 	.word	0x08002b67
 80028cc:	08002b75 	.word	0x08002b75
 80028d0:	08002b83 	.word	0x08002b83
 80028d4:	08002b91 	.word	0x08002b91
 80028d8:	08002b9f 	.word	0x08002b9f
 80028dc:	08002bad 	.word	0x08002bad
 80028e0:	08002bbb 	.word	0x08002bbb
 80028e4:	08002bc9 	.word	0x08002bc9
 80028e8:	08002c01 	.word	0x08002c01
 80028ec:	08002c01 	.word	0x08002c01
 80028f0:	08002c01 	.word	0x08002c01
 80028f4:	08002c01 	.word	0x08002c01
 80028f8:	08002c01 	.word	0x08002c01
 80028fc:	08002c01 	.word	0x08002c01
 8002900:	08002c01 	.word	0x08002c01
 8002904:	080029ed 	.word	0x080029ed
 8002908:	080029fb 	.word	0x080029fb
 800290c:	08002a09 	.word	0x08002a09
 8002910:	08002a17 	.word	0x08002a17
 8002914:	08002a25 	.word	0x08002a25
 8002918:	08002a33 	.word	0x08002a33
 800291c:	08002a41 	.word	0x08002a41
 8002920:	08002a4f 	.word	0x08002a4f
 8002924:	08002a5d 	.word	0x08002a5d
 8002928:	08002a6b 	.word	0x08002a6b
 800292c:	08002a79 	.word	0x08002a79
 8002930:	08002a87 	.word	0x08002a87
 8002934:	08002a95 	.word	0x08002a95
 8002938:	08002aa3 	.word	0x08002aa3
 800293c:	08002ab1 	.word	0x08002ab1
 8002940:	08002abf 	.word	0x08002abf
 8002944:	08002acd 	.word	0x08002acd
 8002948:	08002adb 	.word	0x08002adb
 800294c:	08002ae9 	.word	0x08002ae9
 8002950:	08002af7 	.word	0x08002af7
 8002954:	08002b05 	.word	0x08002b05
 8002958:	08002b13 	.word	0x08002b13
 800295c:	08002b21 	.word	0x08002b21
 8002960:	08002b2f 	.word	0x08002b2f
 8002964:	08002b3d 	.word	0x08002b3d
 8002968:	08002b4b 	.word	0x08002b4b
 800296c:	08002c01 	.word	0x08002c01
 8002970:	08002c01 	.word	0x08002c01
 8002974:	08002c01 	.word	0x08002c01
 8002978:	08002c01 	.word	0x08002c01
 800297c:	08002be5 	.word	0x08002be5
 8002980:	08002c01 	.word	0x08002c01
 8002984:	080029ed 	.word	0x080029ed
 8002988:	080029fb 	.word	0x080029fb
 800298c:	08002a09 	.word	0x08002a09
 8002990:	08002a17 	.word	0x08002a17
 8002994:	08002a25 	.word	0x08002a25
 8002998:	08002a33 	.word	0x08002a33
 800299c:	08002a41 	.word	0x08002a41
 80029a0:	08002a4f 	.word	0x08002a4f
 80029a4:	08002a5d 	.word	0x08002a5d
 80029a8:	08002a6b 	.word	0x08002a6b
 80029ac:	08002a79 	.word	0x08002a79
 80029b0:	08002a87 	.word	0x08002a87
 80029b4:	08002a95 	.word	0x08002a95
 80029b8:	08002aa3 	.word	0x08002aa3
 80029bc:	08002ab1 	.word	0x08002ab1
 80029c0:	08002abf 	.word	0x08002abf
 80029c4:	08002acd 	.word	0x08002acd
 80029c8:	08002adb 	.word	0x08002adb
 80029cc:	08002ae9 	.word	0x08002ae9
 80029d0:	08002af7 	.word	0x08002af7
 80029d4:	08002b05 	.word	0x08002b05
 80029d8:	08002b13 	.word	0x08002b13
 80029dc:	08002b21 	.word	0x08002b21
 80029e0:	08002b2f 	.word	0x08002b2f
 80029e4:	08002b3d 	.word	0x08002b3d
 80029e8:	08002b4b 	.word	0x08002b4b
	case 'A':
	case 'a':
		setDigit(dgt);
 80029ec:	79bb      	ldrb	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff1e 	bl	8002830 <setDigit>
		character_A();
 80029f4:	f7ff fa56 	bl	8001ea4 <character_A>
		break;
 80029f8:	e102      	b.n	8002c00 <display_update+0x36c>
	case 'B':
	case 'b':
		setDigit(dgt);
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff17 	bl	8002830 <setDigit>
		character_B();
 8002a02:	f7ff fa75 	bl	8001ef0 <character_B>
		break;
 8002a06:	e0fb      	b.n	8002c00 <display_update+0x36c>
	case 'C':
	case 'c':
		setDigit(dgt);
 8002a08:	79bb      	ldrb	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff10 	bl	8002830 <setDigit>
		character_C();
 8002a10:	f7ff fa8e 	bl	8001f30 <character_C>
		break;
 8002a14:	e0f4      	b.n	8002c00 <display_update+0x36c>
	case 'D':
	case 'd':
		setDigit(dgt);
 8002a16:	79bb      	ldrb	r3, [r7, #6]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff09 	bl	8002830 <setDigit>
		character_D();
 8002a1e:	f7ff faa1 	bl	8001f64 <character_D>
		break;
 8002a22:	e0ed      	b.n	8002c00 <display_update+0x36c>
	case 'E':
	case 'e':
		setDigit(dgt);
 8002a24:	79bb      	ldrb	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff02 	bl	8002830 <setDigit>
		character_E();
 8002a2c:	f7ff faba 	bl	8001fa4 <character_E>
		break;
 8002a30:	e0e6      	b.n	8002c00 <display_update+0x36c>
	case 'F':
	case 'f':
		setDigit(dgt);
 8002a32:	79bb      	ldrb	r3, [r7, #6]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fefb 	bl	8002830 <setDigit>
		character_F();
 8002a3a:	f7ff fad1 	bl	8001fe0 <character_F>
		break;
 8002a3e:	e0df      	b.n	8002c00 <display_update+0x36c>
	case 'G':
	case 'g':
		setDigit(dgt);
 8002a40:	79bb      	ldrb	r3, [r7, #6]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fef4 	bl	8002830 <setDigit>
		character_G();
 8002a48:	f7ff fae4 	bl	8002014 <character_G>
		break;
 8002a4c:	e0d8      	b.n	8002c00 <display_update+0x36c>
	case 'H':
	case 'h':
		setDigit(dgt);
 8002a4e:	79bb      	ldrb	r3, [r7, #6]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff feed 	bl	8002830 <setDigit>
		character_H();
 8002a56:	f7ff fafd 	bl	8002054 <character_H>
		break;
 8002a5a:	e0d1      	b.n	8002c00 <display_update+0x36c>
	case 'I':
	case 'i':
		setDigit(dgt);
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fee6 	bl	8002830 <setDigit>
		character_I();
 8002a64:	f7ff fb16 	bl	8002094 <character_I>
		break;
 8002a68:	e0ca      	b.n	8002c00 <display_update+0x36c>
	case 'J':
	case 'j':
		setDigit(dgt);
 8002a6a:	79bb      	ldrb	r3, [r7, #6]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fedf 	bl	8002830 <setDigit>
		character_J();
 8002a72:	f7ff fb1f 	bl	80020b4 <character_J>
		break;
 8002a76:	e0c3      	b.n	8002c00 <display_update+0x36c>
	case 'K':
	case 'k':
		setDigit(dgt);
 8002a78:	79bb      	ldrb	r3, [r7, #6]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fed8 	bl	8002830 <setDigit>
		character_K();
 8002a80:	f7ff fb34 	bl	80020ec <character_K>
		break;
 8002a84:	e0bc      	b.n	8002c00 <display_update+0x36c>
	case 'L':
	case 'l':
		setDigit(dgt);
 8002a86:	79bb      	ldrb	r3, [r7, #6]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fed1 	bl	8002830 <setDigit>
		character_L();
 8002a8e:	f7ff fb4d 	bl	800212c <character_L>
		break;
 8002a92:	e0b5      	b.n	8002c00 <display_update+0x36c>
	case 'M':
	case 'm':
		setDigit(dgt);
 8002a94:	79bb      	ldrb	r3, [r7, #6]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff feca 	bl	8002830 <setDigit>
		character_M();
 8002a9c:	f7ff fb5c 	bl	8002158 <character_M>
		break;
 8002aa0:	e0ae      	b.n	8002c00 <display_update+0x36c>
	case 'N':
	case 'n':
		setDigit(dgt);
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fec3 	bl	8002830 <setDigit>
		character_N();
 8002aaa:	f7ff fb6f 	bl	800218c <character_N>
		break;
 8002aae:	e0a7      	b.n	8002c00 <display_update+0x36c>
	case 'O':
	case 'o':
		setDigit(dgt);
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff febc 	bl	8002830 <setDigit>
		character_O();
 8002ab8:	f7ff fb7e 	bl	80021b8 <character_O>
		break;
 8002abc:	e0a0      	b.n	8002c00 <display_update+0x36c>
	case 'P':
	case 'p':
		setDigit(dgt);
 8002abe:	79bb      	ldrb	r3, [r7, #6]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff feb5 	bl	8002830 <setDigit>
		character_P();
 8002ac6:	f7ff fb9d 	bl	8002204 <character_P>
		break;
 8002aca:	e099      	b.n	8002c00 <display_update+0x36c>
	case 'Q':
	case 'q':
		setDigit(dgt);
 8002acc:	79bb      	ldrb	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff feae 	bl	8002830 <setDigit>
		character_Q();
 8002ad4:	f7ff fbb6 	bl	8002244 <character_Q>
		break;
 8002ad8:	e092      	b.n	8002c00 <display_update+0x36c>
	case 'R':
	case 'r':
		setDigit(dgt);
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fea7 	bl	8002830 <setDigit>
		character_R();
 8002ae2:	f7ff fbcf 	bl	8002284 <character_R>
		break;
 8002ae6:	e08b      	b.n	8002c00 <display_update+0x36c>
	case 'S':
	case 's':
		setDigit(dgt);
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fea0 	bl	8002830 <setDigit>
		character_S();
 8002af0:	f7ff fbd8 	bl	80022a4 <character_S>
		break;
 8002af4:	e084      	b.n	8002c00 <display_update+0x36c>
	case 'T':
	case 't':
		setDigit(dgt);
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe99 	bl	8002830 <setDigit>
		character_T();
 8002afe:	f7ff fbef 	bl	80022e0 <character_T>
		break;
 8002b02:	e07d      	b.n	8002c00 <display_update+0x36c>
	case 'U':
	case 'u':
		setDigit(dgt);
 8002b04:	79bb      	ldrb	r3, [r7, #6]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe92 	bl	8002830 <setDigit>
		character_U();
 8002b0c:	f7ff fc02 	bl	8002314 <character_U>
		break;
 8002b10:	e076      	b.n	8002c00 <display_update+0x36c>
	case 'V':
	case 'v':
		setDigit(dgt);
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe8b 	bl	8002830 <setDigit>
		character_V();
 8002b1a:	f7ff fc1b 	bl	8002354 <character_V>
		break;
 8002b1e:	e06f      	b.n	8002c00 <display_update+0x36c>
	case 'W':
	case 'w':
		setDigit(dgt);
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe84 	bl	8002830 <setDigit>
		character_W();
 8002b28:	f7ff fc28 	bl	800237c <character_W>
		break;
 8002b2c:	e068      	b.n	8002c00 <display_update+0x36c>
	case 'X':
	case 'x':
		setDigit(dgt);
 8002b2e:	79bb      	ldrb	r3, [r7, #6]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fe7d 	bl	8002830 <setDigit>
		character_X();
 8002b36:	f7ff fc45 	bl	80023c4 <character_X>
		break;
 8002b3a:	e061      	b.n	8002c00 <display_update+0x36c>
	case 'Y':
	case 'y':
		setDigit(dgt);
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe76 	bl	8002830 <setDigit>
		character_Y();
 8002b44:	f7ff fc52 	bl	80023ec <character_Y>
		break;
 8002b48:	e05a      	b.n	8002c00 <display_update+0x36c>
	case 'Z':
	case 'z':
		setDigit(dgt);
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe6f 	bl	8002830 <setDigit>
		character_Z();
 8002b52:	f7ff fc69 	bl	8002428 <character_Z>
		break;
 8002b56:	e053      	b.n	8002c00 <display_update+0x36c>
	case '1':
		setDigit(dgt);
 8002b58:	79bb      	ldrb	r3, [r7, #6]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fe68 	bl	8002830 <setDigit>
		character_1();
 8002b60:	f7ff fc80 	bl	8002464 <character_1>
		break;
 8002b64:	e04c      	b.n	8002c00 <display_update+0x36c>
	case '2':
		setDigit(dgt);
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe61 	bl	8002830 <setDigit>
		character_2();
 8002b6e:	f7ff fc89 	bl	8002484 <character_2>
		break;
 8002b72:	e045      	b.n	8002c00 <display_update+0x36c>
	case '3':
		setDigit(dgt);
 8002b74:	79bb      	ldrb	r3, [r7, #6]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fe5a 	bl	8002830 <setDigit>
		character_3();
 8002b7c:	f7ff fca0 	bl	80024c0 <character_3>
		break;
 8002b80:	e03e      	b.n	8002c00 <display_update+0x36c>
	case '4':
		setDigit(dgt);
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe53 	bl	8002830 <setDigit>
		character_4();
 8002b8a:	f7ff fcb7 	bl	80024fc <character_4>
		break;
 8002b8e:	e037      	b.n	8002c00 <display_update+0x36c>
	case '5':
		setDigit(dgt);
 8002b90:	79bb      	ldrb	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe4c 	bl	8002830 <setDigit>
		character_5();
 8002b98:	f7ff fcca 	bl	8002530 <character_5>
		break;
 8002b9c:	e030      	b.n	8002c00 <display_update+0x36c>
	case '6':
		setDigit(dgt);
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe45 	bl	8002830 <setDigit>
		character_6();
 8002ba6:	f7ff fce1 	bl	800256c <character_6>
		break;
 8002baa:	e029      	b.n	8002c00 <display_update+0x36c>
	case '7':
		setDigit(dgt);
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe3e 	bl	8002830 <setDigit>
		character_7();
 8002bb4:	f7ff fcfe 	bl	80025b4 <character_7>
		break;
 8002bb8:	e022      	b.n	8002c00 <display_update+0x36c>
	case '8':
		setDigit(dgt);
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fe37 	bl	8002830 <setDigit>
		character_8();
 8002bc2:	f7ff fd0b 	bl	80025dc <character_8>
		break;
 8002bc6:	e01b      	b.n	8002c00 <display_update+0x36c>
	case '9':
		setDigit(dgt);
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fe30 	bl	8002830 <setDigit>
		character_9();
 8002bd0:	f7ff fd2e 	bl	8002630 <character_9>
		break;
 8002bd4:	e014      	b.n	8002c00 <display_update+0x36c>
	case '0':
		setDigit(dgt);
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe29 	bl	8002830 <setDigit>
		character_0();
 8002bde:	f7ff fd47 	bl	8002670 <character_0>
		break;
 8002be2:	e00d      	b.n	8002c00 <display_update+0x36c>
	case '_':
		setDigit(dgt);
 8002be4:	79bb      	ldrb	r3, [r7, #6]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fe22 	bl	8002830 <setDigit>
		character_podciar();
 8002bec:	f7ff fe0c 	bl	8002808 <character_podciar>
		break;
 8002bf0:	e006      	b.n	8002c00 <display_update+0x36c>
	case '-':
		setDigit(dgt);
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe1b 	bl	8002830 <setDigit>
		character_minus();
 8002bfa:	f7ff fe0f 	bl	800281c <character_minus>
		break;
 8002bfe:	bf00      	nop

	}

	disp_time_saved = disp_time;
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <display_update+0x3a4>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <display_update+0x3a8>)
 8002c08:	e9c1 2300 	strd	r2, r3, [r1]
	while ((disp_time_saved + 2) > disp_time) {
 8002c0c:	bf00      	nop
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <display_update+0x3a8>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	1c94      	adds	r4, r2, #2
 8002c16:	f143 0500 	adc.w	r5, r3, #0
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <display_update+0x3a4>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	42ab      	cmp	r3, r5
 8002c22:	bf08      	it	eq
 8002c24:	42a2      	cmpeq	r2, r4
 8002c26:	d3f2      	bcc.n	8002c0e <display_update+0x37a>
	};

	resetDigits();
 8002c28:	f7ff fda4 	bl	8002774 <resetDigits>
	resetSegments();
 8002c2c:	f7ff fd46 	bl	80026bc <resetSegments>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}
 8002c38:	200001f8 	.word	0x200001f8
 8002c3c:	20000200 	.word	0x20000200

08002c40 <display_show>:

void display_show(char *znk) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	len = strlen(znk) - 1;
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fac1 	bl	80001d0 <strlen>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <display_show+0x164>)
 8002c58:	701a      	strb	r2, [r3, #0]
	char *location = strchr(znk, '.');
 8002c5a:	212e      	movs	r1, #46	; 0x2e
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f002 f9ab 	bl	8004fb8 <strchr>
 8002c62:	6138      	str	r0, [r7, #16]
	uint8_t position = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
	start = 0;
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <display_show+0x168>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
	if (location != NULL) {
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d076      	beq.n	8002d62 <display_show+0x122>
		position = location - znk - 1;
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 4; i++) {
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]
 8002c84:	e069      	b.n	8002d5a <display_show+0x11a>
			if ((shift + i) == position) {
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <display_show+0x16c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	441a      	add	r2, r3
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d110      	bne.n	8002cb8 <display_show+0x78>
				setDecimalPoint();
 8002c96:	f7ff fdad 	bl	80027f4 <setDecimalPoint>
				display_update(znk[(shift) + i], i);
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <display_show+0x16c>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	7dfa      	ldrb	r2, [r7, #23]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fdef 	bl	8002894 <display_update>
 8002cb6:	e04d      	b.n	8002d54 <display_show+0x114>
			} else if ((shift + i) == (position + 1) && d == 0) {
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <display_show+0x16c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d115      	bne.n	8002cf6 <display_show+0xb6>
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <display_show+0x170>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d111      	bne.n	8002cf6 <display_show+0xb6>
				display_update(znk[(shift) + i + 1], i);
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <display_show+0x16c>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3301      	adds	r3, #1
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	7dfa      	ldrb	r2, [r7, #23]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fdd3 	bl	8002894 <display_update>
				d = 1;
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <display_show+0x170>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
				return;
 8002cf4:	e052      	b.n	8002d9c <display_show+0x15c>
			} else if ((shift + i) == (position + 1) && d == 1) {
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <display_show+0x16c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	441a      	add	r2, r3
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	3301      	adds	r3, #1
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d117      	bne.n	8002d38 <display_show+0xf8>
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <display_show+0x170>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d113      	bne.n	8002d38 <display_show+0xf8>
				display_update(znk[(shift) + i + 2], i + 1);
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <display_show+0x16c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7ff fdb2 	bl	8002894 <display_update>
				d = 0;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <display_show+0x170>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
				return;
 8002d36:	e031      	b.n	8002d9c <display_show+0x15c>
			} else
				display_update(znk[(shift) + i], i);
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <display_show+0x16c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	4413      	add	r3, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	7dfa      	ldrb	r2, [r7, #23]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fda0 	bl	8002894 <display_update>
		for (uint8_t i = 0; i < 4; i++) {
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	3301      	adds	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d992      	bls.n	8002c86 <display_show+0x46>
 8002d60:	e01c      	b.n	8002d9c <display_show+0x15c>
		}
	} else {
		len = len + 1;
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <display_show+0x164>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <display_show+0x164>)
 8002d6c:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 4; j++) {
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75bb      	strb	r3, [r7, #22]
 8002d72:	e010      	b.n	8002d96 <display_show+0x156>
			display_update(znk[(shift) + j], j);
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <display_show+0x16c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	7dbb      	ldrb	r3, [r7, #22]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	7dba      	ldrb	r2, [r7, #22]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fd82 	bl	8002894 <display_update>
		for (uint8_t j = 0; j < 4; j++) {
 8002d90:	7dbb      	ldrb	r3, [r7, #22]
 8002d92:	3301      	adds	r3, #1
 8002d94:	75bb      	strb	r3, [r7, #22]
 8002d96:	7dbb      	ldrb	r3, [r7, #22]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d9eb      	bls.n	8002d74 <display_show+0x134>
		}
	}

}
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000209 	.word	0x20000209
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000208 	.word	0x20000208
 8002db0:	2000020b 	.word	0x2000020b

08002db4 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM3)) {
 8002db8:	4827      	ldr	r0, [pc, #156]	; (8002e58 <TIM3_IRQHandler+0xa4>)
 8002dba:	f7ff f843 	bl	8001e44 <LL_TIM_IsActiveFlag_UPDATE>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d044      	beq.n	8002e4e <TIM3_IRQHandler+0x9a>
		if ((shift < len - 4) && prerusenie == 0) {
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <TIM3_IRQHandler+0xac>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	da0a      	bge.n	8002dea <TIM3_IRQHandler+0x36>
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <TIM3_IRQHandler+0x36>
			shift++;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e031      	b.n	8002e4e <TIM3_IRQHandler+0x9a>
		} else if ((shift == len - 4) && prerusenie == 0 && start == 0) {
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <TIM3_IRQHandler+0xac>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b04      	subs	r3, #4
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d10b      	bne.n	8002e12 <TIM3_IRQHandler+0x5e>
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <TIM3_IRQHandler+0x5e>
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <TIM3_IRQHandler+0xb4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <TIM3_IRQHandler+0x5e>
			prerusenie = 1;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e01d      	b.n	8002e4e <TIM3_IRQHandler+0x9a>
		}

		else if (((shift + len) > len) && prerusenie == 1) {
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <TIM3_IRQHandler+0x7c>
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d106      	bne.n	8002e30 <TIM3_IRQHandler+0x7c>
			shift--;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e00e      	b.n	8002e4e <TIM3_IRQHandler+0x9a>
		} else if (((shift + len) == len) && prerusenie == 1 && start == 0) {
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <TIM3_IRQHandler+0xa8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <TIM3_IRQHandler+0x9a>
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <TIM3_IRQHandler+0x9a>
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <TIM3_IRQHandler+0xb4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <TIM3_IRQHandler+0x9a>
			prerusenie = 0;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <TIM3_IRQHandler+0xb0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
		}
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002e4e:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM3_IRQHandler+0xa4>)
 8002e50:	f7fe ffea 	bl	8001e28 <LL_TIM_ClearFlag_UPDATE>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	20000208 	.word	0x20000208
 8002e60:	20000209 	.word	0x20000209
 8002e64:	2000020a 	.word	0x2000020a
 8002e68:	20000000 	.word	0x20000000

08002e6c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <NVIC_GetPriorityGrouping+0x18>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <NVIC_EnableIRQ+0x30>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da0b      	bge.n	8002ee8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	; (8002f08 <NVIC_SetPriority+0x4c>)
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	3b04      	subs	r3, #4
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee6:	e009      	b.n	8002efc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <NVIC_SetPriority+0x50>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4013      	ands	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <LL_SYSCFG_SetEXTISource+0x54>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	ea02 0103 	and.w	r1, r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <LL_SYSCFG_SetEXTISource+0x54>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	3302      	adds	r3, #2
 8002fea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000

08003000 <LL_GPIO_SetPinMode>:
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	613b      	str	r3, [r7, #16]
  return(result);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2103      	movs	r1, #3
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	61bb      	str	r3, [r7, #24]
  return(result);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_GPIO_SetPinPull>:
{
 800305a:	b480      	push	{r7}
 800305c:	b089      	sub	sp, #36	; 0x24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	613b      	str	r3, [r7, #16]
  return(result);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2103      	movs	r1, #3
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	401a      	ands	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	61bb      	str	r3, [r7, #24]
  return(result);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	60da      	str	r2, [r3, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3724      	adds	r7, #36	; 0x24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_GPIO_ResetOutputPin>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	615a      	str	r2, [r3, #20]
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80030f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030f6:	f7ff ff3f 	bl	8002f78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80030fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80030fe:	f7ff ff3b 	bl	8002f78 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8003102:	f641 111b 	movw	r1, #6427	; 0x191b
 8003106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310a:	f7ff ffd3 	bl	80030b4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800310e:	2132      	movs	r1, #50	; 0x32
 8003110:	482a      	ldr	r0, [pc, #168]	; (80031bc <MX_GPIO_Init+0xec>)
 8003112:	f7ff ffcf 	bl	80030b4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8003116:	f641 139f 	movw	r3, #6559	; 0x199f
 800311a:	613b      	str	r3, [r7, #16]
          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_12|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	4619      	mov	r1, r3
 8003132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003136:	f7fe f8a5 	bl	8001284 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin =LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800313a:	2333      	movs	r3, #51	; 0x33
 800313c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800313e:	2301      	movs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	4619      	mov	r1, r3
 8003154:	4819      	ldr	r0, [pc, #100]	; (80031bc <MX_GPIO_Init+0xec>)
 8003156:	f7fe f895 	bl	8001284 <LL_GPIO_Init>


  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800315a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800315e:	2001      	movs	r0, #1
 8003160:	f7ff ff22 	bl	8002fa8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8003164:	2201      	movs	r2, #1
 8003166:	2108      	movs	r1, #8
 8003168:	4814      	ldr	r0, [pc, #80]	; (80031bc <MX_GPIO_Init+0xec>)
 800316a:	f7ff ff76 	bl	800305a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 800316e:	2200      	movs	r2, #0
 8003170:	2108      	movs	r1, #8
 8003172:	4812      	ldr	r0, [pc, #72]	; (80031bc <MX_GPIO_Init+0xec>)
 8003174:	f7ff ff44 	bl	8003000 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8003178:	2308      	movs	r3, #8
 800317a:	607b      	str	r3, [r7, #4]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003180:	2301      	movs	r3, #1
 8003182:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003184:	2300      	movs	r3, #0
 8003186:	737b      	strb	r3, [r7, #13]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8003188:	2302      	movs	r3, #2
 800318a:	73bb      	strb	r3, [r7, #14]
  LL_EXTI_Init(&EXTI_InitStruct);
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fe8a 	bl	8000ea8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003194:	f7ff fe6a 	bl	8002e6c <NVIC_GetPriorityGrouping>
 8003198:	4603      	mov	r3, r0
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff feb6 	bl	8002f10 <NVIC_EncodePriority>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4619      	mov	r1, r3
 80031a8:	2009      	movs	r0, #9
 80031aa:	f7ff fe87 	bl	8002ebc <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80031ae:	2009      	movs	r0, #9
 80031b0:	f7ff fe6a 	bl	8002e88 <NVIC_EnableIRQ>

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	48000400 	.word	0x48000400

080031c0 <hts221_read_byte>:
#include <hts221.h>

uint8_t addres_hts221 = HTS221_DEVICE_ADDRESS;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres_hts221, 0));
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <hts221_read_byte+0x30>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	79fa      	ldrb	r2, [r7, #7]
 80031d4:	f107 000f 	add.w	r0, r7, #15
 80031d8:	2100      	movs	r1, #0
 80031da:	9100      	str	r1, [sp, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	f000 fbfb 	bl	80039d8 <i2c_master_read>
 80031e2:	4603      	mov	r3, r0
 80031e4:	781b      	ldrb	r3, [r3, #0]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000001 	.word	0x20000001

080031f4 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	460a      	mov	r2, r1
 80031fe:	71fb      	strb	r3, [r7, #7]
 8003200:	4613      	mov	r3, r2
 8003202:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres_hts221, 0);
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <hts221_write_byte+0x28>)
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	79f9      	ldrb	r1, [r7, #7]
 800320a:	79b8      	ldrb	r0, [r7, #6]
 800320c:	2300      	movs	r3, #0
 800320e:	f000 fb9f 	bl	8003950 <i2c_master_write>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000001 	.word	0x20000001

08003220 <hts221_readArray>:

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	4613      	mov	r3, r2
 800322e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres_hts221, 1);
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <hts221_readArray+0x2c>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	78b9      	ldrb	r1, [r7, #2]
 8003238:	2001      	movs	r0, #1
 800323a:	9000      	str	r0, [sp, #0]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fbcb 	bl	80039d8 <i2c_master_read>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000001 	.word	0x20000001

08003250 <hts221_get_humidity>:



float hts221_get_humidity(void){
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
	  int16_t H0_T0_out, H1_T0_out, H_T_out;
	  int16_t H0_rh, H1_rh;
	  uint8_t buffer[2];
	  float   tmp_f;
	  uint16_t hum=0;
 8003256:	2300      	movs	r3, #0
 8003258:	82fb      	strh	r3, [r7, #22]

	  hts221_readArray(buffer,HTS221_H0_RH_X2,2);
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2202      	movs	r2, #2
 800325e:	2130      	movs	r1, #48	; 0x30
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ffdd 	bl	8003220 <hts221_readArray>
	  H0_rh = buffer[0] >> 1;
 8003266:	793b      	ldrb	r3, [r7, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	82bb      	strh	r3, [r7, #20]
	  H1_rh = buffer[1] >> 1;
 800326e:	797b      	ldrb	r3, [r7, #5]
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	827b      	strh	r3, [r7, #18]

	  hts221_readArray(buffer,HTS221_H0_T0_OUT_L,2);
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	2202      	movs	r2, #2
 800327a:	2136      	movs	r1, #54	; 0x36
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffcf 	bl	8003220 <hts221_readArray>
	  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003282:	797b      	ldrb	r3, [r7, #5]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21a      	sxth	r2, r3
 8003288:	793b      	ldrb	r3, [r7, #4]
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	823b      	strh	r3, [r7, #16]

	  hts221_readArray(buffer,HTS221_H0_T0_OUT_H,2);
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	2202      	movs	r2, #2
 8003294:	2137      	movs	r1, #55	; 0x37
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffc2 	bl	8003220 <hts221_readArray>
	  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800329c:	797b      	ldrb	r3, [r7, #5]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b21a      	sxth	r2, r3
 80032a2:	793b      	ldrb	r3, [r7, #4]
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	4313      	orrs	r3, r2
 80032a8:	81fb      	strh	r3, [r7, #14]

	  hts221_readArray(buffer,HTS221_ADDRESS_HUMIDITY_L,2);
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	2202      	movs	r2, #2
 80032ae:	2128      	movs	r1, #40	; 0x28
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ffb5 	bl	8003220 <hts221_readArray>
	  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80032b6:	797b      	ldrb	r3, [r7, #5]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	793b      	ldrb	r3, [r7, #4]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81bb      	strh	r3, [r7, #12]

	  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80032c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80032da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003302:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	edc7 7a02 	vstr	s15, [r7, #8]
	  tmp_f *= 10.0f;
 8003316:	edd7 7a02 	vldr	s15, [r7, #8]
 800331a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800331e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003322:	edc7 7a02 	vstr	s15, [r7, #8]

	  hum = ( tmp_f > 1000.0f ) ? 1000 : ( tmp_f <    0.0f ) ?    0 : ( uint16_t )tmp_f;
 8003326:	edd7 7a02 	vldr	s15, [r7, #8]
 800332a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003390 <hts221_get_humidity+0x140>
 800332e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	dd02      	ble.n	800333e <hts221_get_humidity+0xee>
 8003338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333c:	e00f      	b.n	800335e <hts221_get_humidity+0x10e>
 800333e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d501      	bpl.n	8003350 <hts221_get_humidity+0x100>
 800334c:	2300      	movs	r3, #0
 800334e:	e006      	b.n	800335e <hts221_get_humidity+0x10e>
 8003350:	edd7 7a02 	vldr	s15, [r7, #8]
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003358:	ee17 3a90 	vmov	r3, s15
 800335c:	b29b      	uxth	r3, r3
 800335e:	82fb      	strh	r3, [r7, #22]

	  return hum/10.0;
 8003360:	8afb      	ldrh	r3, [r7, #22]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8de 	bl	8000524 <__aeabi_i2d>
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <hts221_get_humidity+0x144>)
 800336e:	f7fd fa6d 	bl	800084c <__aeabi_ddiv>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fc15 	bl	8000ba8 <__aeabi_d2f>
 800337e:	4603      	mov	r3, r0
 8003380:	ee07 3a90 	vmov	s15, r3
}
 8003384:	eeb0 0a67 	vmov.f32	s0, s15
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	447a0000 	.word	0x447a0000
 8003394:	40240000 	.word	0x40240000

08003398 <hts221_get_temperature>:

float hts221_get_temperature(void){
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
	 int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
	  int16_t T0_degC, T1_degC;
	  uint8_t buffer[4], tmp;
	  float   tmp_f;

	  hts221_readArray(buffer,HTS221_T0_DEGC_X8,2);
 800339e:	f107 0308 	add.w	r3, r7, #8
 80033a2:	2202      	movs	r2, #2
 80033a4:	2132      	movs	r1, #50	; 0x32
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff3a 	bl	8003220 <hts221_readArray>
	  hts221_readArray(&tmp,HTS221_T0_T1_DEGC_H2,1);
 80033ac:	1dfb      	adds	r3, r7, #7
 80033ae:	2201      	movs	r2, #1
 80033b0:	2135      	movs	r1, #53	; 0x35
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff34 	bl	8003220 <hts221_readArray>
	  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	b21b      	sxth	r3, r3
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	b21a      	sxth	r2, r3
 80033c4:	7a3b      	ldrb	r3, [r7, #8]
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	4313      	orrs	r3, r2
 80033ca:	83fb      	strh	r3, [r7, #30]
	  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	7a7b      	ldrb	r3, [r7, #9]
 80033da:	b21b      	sxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	83bb      	strh	r3, [r7, #28]
	  T0_degC = T0_degC_x8_u16 >> 3;
 80033e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033e4:	10db      	asrs	r3, r3, #3
 80033e6:	837b      	strh	r3, [r7, #26]
	  T1_degC = T1_degC_x8_u16 >> 3;
 80033e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033ec:	10db      	asrs	r3, r3, #3
 80033ee:	833b      	strh	r3, [r7, #24]

	  hts221_readArray(buffer,HTS221_T0_OUT_L,4);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	2204      	movs	r2, #4
 80033f6:	213c      	movs	r1, #60	; 0x3c
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff11 	bl	8003220 <hts221_readArray>

	  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80033fe:	7a7b      	ldrb	r3, [r7, #9]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	b21a      	sxth	r2, r3
 8003404:	7a3b      	ldrb	r3, [r7, #8]
 8003406:	b21b      	sxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	82fb      	strh	r3, [r7, #22]
	  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b21a      	sxth	r2, r3
 8003412:	7abb      	ldrb	r3, [r7, #10]
 8003414:	b21b      	sxth	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	82bb      	strh	r3, [r7, #20]

	  hts221_readArray(buffer,HTS221_ADDRESS_TEMP_L,2);
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	2202      	movs	r2, #2
 8003420:	212a      	movs	r1, #42	; 0x2a
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fefc 	bl	8003220 <hts221_readArray>

	  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003428:	7a7b      	ldrb	r3, [r7, #9]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	b21a      	sxth	r2, r3
 800342e:	7a3b      	ldrb	r3, [r7, #8]
 8003430:	b21b      	sxth	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	827b      	strh	r3, [r7, #18]

	  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003436:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800343a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003448:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800344c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800345e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003474:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	edc7 7a03 	vstr	s15, [r7, #12]

	  return tmp_f;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	ee07 3a90 	vmov	s15, r3
}
 800348e:	eeb0 0a67 	vmov.f32	s0, s15
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <hts221_init>:


uint8_t hts221_init(void){
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80034a2:	2064      	movs	r0, #100	; 0x64
 80034a4:	f7fe fc8a 	bl	8001dbc <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 80034a8:	200f      	movs	r0, #15
 80034aa:	f7ff fe89 	bl	80031c0 <hts221_read_byte>
 80034ae:	4603      	mov	r3, r0
 80034b0:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 80034b2:	79bb      	ldrb	r3, [r7, #6]
 80034b4:	2bbc      	cmp	r3, #188	; 0xbc
 80034b6:	d10a      	bne.n	80034ce <hts221_init+0x36>
	{
		status = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	71fb      	strb	r3, [r7, #7]
	{
		status = 0;
		return status;
	}

	uint8_t ctrl1 =133; // 12<<4; // 51<<2
 80034bc:	2385      	movs	r3, #133	; 0x85
 80034be:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 80034c0:	797b      	ldrb	r3, [r7, #5]
 80034c2:	4619      	mov	r1, r3
 80034c4:	2020      	movs	r0, #32
 80034c6:	f7ff fe95 	bl	80031f4 <hts221_write_byte>
	//uint8_t ctrl2 = 0b101<<0 ;
	//hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl2);



	return status;
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	e002      	b.n	80034d4 <hts221_init+0x3c>
		status = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
		return status;
 80034d2:	79fb      	ldrb	r3, [r7, #7]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <NVIC_GetPriorityGrouping>:
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EnableIRQ>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	; (8003528 <NVIC_EnableIRQ+0x30>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <NVIC_SetPriority>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0b      	bge.n	8003558 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <NVIC_SetPriority+0x4c>)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	3b04      	subs	r3, #4
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	761a      	strb	r2, [r3, #24]
}
 8003556:	e009      	b.n	800356c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <NVIC_SetPriority+0x50>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00
 800357c:	e000e100 	.word	0xe000e100

08003580 <NVIC_EncodePriority>:
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <LL_AHB1_GRP1_EnableClock>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000

08003618 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4313      	orrs	r3, r2
 800362a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <LL_APB1_GRP1_EnableClock+0x2c>)
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40021000 	.word	0x40021000

08003648 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036bc:	f023 0306 	bic.w	r3, r3, #6
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f043 0204 	orr.w	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0204 	bic.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	601a      	str	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b20      	cmp	r3, #32
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	61da      	str	r2, [r3, #28]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	605a      	str	r2, [r3, #4]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	0d5b      	lsrs	r3, r3, #21
 8003802:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <LL_I2C_HandleTransfer+0x48>)
 8003808:	430b      	orrs	r3, r1
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4319      	orrs	r1, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	4319      	orrs	r1, r3
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4319      	orrs	r1, r3
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	430b      	orrs	r3, r1
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	03ff7bff 	.word	0x03ff7bff

08003838 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	b2db      	uxtb	r3, r3
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	; 0x38
 8003874:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
 8003898:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800389a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800389e:	f7ff fea3 	bl	80035e8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80038a2:	23c0      	movs	r3, #192	; 0xc0
 80038a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038a6:	2302      	movs	r3, #2
 80038a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80038ae:	2301      	movs	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80038b2:	2301      	movs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80038b6:	2304      	movs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4821      	ldr	r0, [pc, #132]	; (8003944 <MX_I2C1_Init+0xd4>)
 80038c0:	f7fd fce0 	bl	8001284 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80038c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80038c8:	f7ff fea6 	bl	8003618 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80038cc:	f7ff fe06 	bl	80034dc <NVIC_GetPriorityGrouping>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2202      	movs	r2, #2
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fe52 	bl	8003580 <NVIC_EncodePriority>
 80038dc:	4603      	mov	r3, r0
 80038de:	4619      	mov	r1, r3
 80038e0:	201f      	movs	r0, #31
 80038e2:	f7ff fe23 	bl	800352c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038e6:	201f      	movs	r0, #31
 80038e8:	f7ff fe06 	bl	80034f8 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80038ec:	4816      	ldr	r0, [pc, #88]	; (8003948 <MX_I2C1_Init+0xd8>)
 80038ee:	f7ff ff6c 	bl	80037ca <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80038f2:	4815      	ldr	r0, [pc, #84]	; (8003948 <MX_I2C1_Init+0xd8>)
 80038f4:	f7ff fef0 	bl	80036d8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80038f8:	4813      	ldr	r0, [pc, #76]	; (8003948 <MX_I2C1_Init+0xd8>)
 80038fa:	f7ff fec5 	bl	8003688 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80038fe:	4812      	ldr	r0, [pc, #72]	; (8003948 <MX_I2C1_Init+0xd8>)
 8003900:	f7ff feb2 	bl	8003668 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <MX_I2C1_Init+0xdc>)
 800390a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8003914:	2302      	movs	r3, #2
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003918:	2300      	movs	r3, #0
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003920:	f107 031c 	add.w	r3, r7, #28
 8003924:	4619      	mov	r1, r3
 8003926:	4808      	ldr	r0, [pc, #32]	; (8003948 <MX_I2C1_Init+0xd8>)
 8003928:	f7fd fdc9 	bl	80014be <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	4805      	ldr	r0, [pc, #20]	; (8003948 <MX_I2C1_Init+0xd8>)
 8003932:	f7ff feb9 	bl	80036a8 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8003936:	4804      	ldr	r0, [pc, #16]	; (8003948 <MX_I2C1_Init+0xd8>)
 8003938:	f7ff fe86 	bl	8003648 <LL_I2C_Enable>
}
 800393c:	bf00      	nop
 800393e:	3738      	adds	r7, #56	; 0x38
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	48000400 	.word	0x48000400
 8003948:	40005400 	.word	0x40005400
 800394c:	2000090e 	.word	0x2000090e

08003950 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b085      	sub	sp, #20
 8003954:	af02      	add	r7, sp, #8
 8003956:	4604      	mov	r4, r0
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4623      	mov	r3, r4
 8003960:	71fb      	strb	r3, [r7, #7]
 8003962:	4603      	mov	r3, r0
 8003964:	71bb      	strb	r3, [r7, #6]
 8003966:	460b      	mov	r3, r1
 8003968:	717b      	strb	r3, [r7, #5]
 800396a:	4613      	mov	r3, r2
 800396c:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 800396e:	793b      	ldrb	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8003974:	79bb      	ldrb	r3, [r7, #6]
 8003976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800397a:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800397c:	7979      	ldrb	r1, [r7, #5]
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <i2c_master_write+0x80>)
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2302      	movs	r3, #2
 800398a:	2200      	movs	r2, #0
 800398c:	4811      	ldr	r0, [pc, #68]	; (80039d4 <i2c_master_write+0x84>)
 800398e:	f7ff ff2d 	bl	80037ec <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8003992:	79bb      	ldrb	r3, [r7, #6]
 8003994:	4619      	mov	r1, r3
 8003996:	480f      	ldr	r0, [pc, #60]	; (80039d4 <i2c_master_write+0x84>)
 8003998:	f7ff ff5b 	bl	8003852 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800399c:	e00a      	b.n	80039b4 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <i2c_master_write+0x84>)
 80039a0:	f7ff feca 	bl	8003738 <LL_I2C_IsActiveFlag_TXIS>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4809      	ldr	r0, [pc, #36]	; (80039d4 <i2c_master_write+0x84>)
 80039b0:	f7ff ff4f 	bl	8003852 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <i2c_master_write+0x84>)
 80039b6:	f7ff fee5 	bl	8003784 <LL_I2C_IsActiveFlag_STOP>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ee      	beq.n	800399e <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <i2c_master_write+0x84>)
 80039c2:	f7ff fef2 	bl	80037aa <LL_I2C_ClearFlag_STOP>
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	80002000 	.word	0x80002000
 80039d4:	40005400 	.word	0x40005400

080039d8 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	70fb      	strb	r3, [r7, #3]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70bb      	strb	r3, [r7, #2]
 80039ee:	4613      	mov	r3, r2
 80039f0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80039f2:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <i2c_master_read+0xdc>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80039f8:	7c3b      	ldrb	r3, [r7, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80039fe:	78bb      	ldrb	r3, [r7, #2]
 8003a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a04:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <i2c_master_read+0xe0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8003a0c:	482b      	ldr	r0, [pc, #172]	; (8003abc <i2c_master_read+0xe4>)
 8003a0e:	f7ff fe73 	bl	80036f8 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003a12:	7879      	ldrb	r1, [r7, #1]
 8003a14:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <i2c_master_read+0xe8>)
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	2200      	movs	r2, #0
 8003a22:	4826      	ldr	r0, [pc, #152]	; (8003abc <i2c_master_read+0xe4>)
 8003a24:	f7ff fee2 	bl	80037ec <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003a28:	e00a      	b.n	8003a40 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003a2a:	4824      	ldr	r0, [pc, #144]	; (8003abc <i2c_master_read+0xe4>)
 8003a2c:	f7ff fe84 	bl	8003738 <LL_I2C_IsActiveFlag_TXIS>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8003a36:	78bb      	ldrb	r3, [r7, #2]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4820      	ldr	r0, [pc, #128]	; (8003abc <i2c_master_read+0xe4>)
 8003a3c:	f7ff ff09 	bl	8003852 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003a40:	481e      	ldr	r0, [pc, #120]	; (8003abc <i2c_master_read+0xe4>)
 8003a42:	f7ff fe9f 	bl	8003784 <LL_I2C_IsActiveFlag_STOP>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ee      	beq.n	8003a2a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003a4c:	481b      	ldr	r0, [pc, #108]	; (8003abc <i2c_master_read+0xe4>)
 8003a4e:	f7ff feac 	bl	80037aa <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8003a52:	bf00      	nop
 8003a54:	4819      	ldr	r0, [pc, #100]	; (8003abc <i2c_master_read+0xe4>)
 8003a56:	f7ff fe95 	bl	8003784 <LL_I2C_IsActiveFlag_STOP>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8003a60:	7879      	ldrb	r1, [r7, #1]
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <i2c_master_read+0xec>)
 8003a66:	9201      	str	r2, [sp, #4]
 8003a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6c:	9200      	str	r2, [sp, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4812      	ldr	r0, [pc, #72]	; (8003abc <i2c_master_read+0xe4>)
 8003a72:	f7ff febb 	bl	80037ec <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8003a76:	bf00      	nop
 8003a78:	4810      	ldr	r0, [pc, #64]	; (8003abc <i2c_master_read+0xe4>)
 8003a7a:	f7ff fe83 	bl	8003784 <LL_I2C_IsActiveFlag_STOP>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f9      	beq.n	8003a78 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <i2c_master_read+0xe4>)
 8003a86:	f7ff fe90 	bl	80037aa <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8003a8a:	480c      	ldr	r0, [pc, #48]	; (8003abc <i2c_master_read+0xe4>)
 8003a8c:	f7ff fe44 	bl	8003718 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <i2c_master_read+0xe4>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <i2c_master_read+0xe4>)
 8003a96:	f043 0310 	orr.w	r3, r3, #16
 8003a9a:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <i2c_master_read+0xf0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <i2c_master_read+0xe0>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8003aa8:	4b02      	ldr	r3, [pc, #8]	; (8003ab4 <i2c_master_read+0xdc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	2000021c 	.word	0x2000021c
 8003ab8:	2000020c 	.word	0x2000020c
 8003abc:	40005400 	.word	0x40005400
 8003ac0:	80002000 	.word	0x80002000
 8003ac4:	80002400 	.word	0x80002400
 8003ac8:	2000020d 	.word	0x2000020d

08003acc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8003acc:	b598      	push	{r3, r4, r7, lr}
 8003ace:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8003ad0:	4812      	ldr	r0, [pc, #72]	; (8003b1c <I2C1_EV_IRQHandler+0x50>)
 8003ad2:	f7ff fe44 	bl	800375e <LL_I2C_IsActiveFlag_RXNE>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01c      	beq.n	8003b16 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <I2C1_EV_IRQHandler+0x54>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <I2C1_EV_IRQHandler+0x58>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	b2c8      	uxtb	r0, r1
 8003aea:	490e      	ldr	r1, [pc, #56]	; (8003b24 <I2C1_EV_IRQHandler+0x58>)
 8003aec:	7008      	strb	r0, [r1, #0]
 8003aee:	18d4      	adds	r4, r2, r3
 8003af0:	480a      	ldr	r0, [pc, #40]	; (8003b1c <I2C1_EV_IRQHandler+0x50>)
 8003af2:	f7ff fea1 	bl	8003838 <LL_I2C_ReceiveData8>
 8003af6:	4603      	mov	r3, r0
 8003af8:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <I2C1_EV_IRQHandler+0x58>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b13      	cmp	r3, #19
 8003b02:	d903      	bls.n	8003b0c <I2C1_EV_IRQHandler+0x40>
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <I2C1_EV_IRQHandler+0x58>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e001      	b.n	8003b10 <I2C1_EV_IRQHandler+0x44>
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <I2C1_EV_IRQHandler+0x58>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <I2C1_EV_IRQHandler+0x5c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
	}
}
 8003b16:	bf00      	nop
 8003b18:	bd98      	pop	{r3, r4, r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	2000021c 	.word	0x2000021c
 8003b24:	2000020d 	.word	0x2000020d
 8003b28:	2000020c 	.word	0x2000020c

08003b2c <NVIC_SetPriorityGrouping>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <NVIC_SetPriorityGrouping+0x44>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <NVIC_SetPriorityGrouping+0x44>)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	60d3      	str	r3, [r2, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <LL_RCC_HSI_Enable+0x1c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <LL_RCC_HSI_Enable+0x1c>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6013      	str	r3, [r2, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <LL_RCC_HSI_IsReady+0x20>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <LL_RCC_SetSysClkSource+0x24>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	4904      	ldr	r1, [pc, #16]	; (8003c08 <LL_RCC_SetSysClkSource+0x24>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40021000 	.word	0x40021000

08003c0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <LL_RCC_GetSysClkSource+0x18>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000

08003c28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c38:	4904      	ldr	r1, [pc, #16]	; (8003c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40021000 	.word	0x40021000

08003c50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	4904      	ldr	r1, [pc, #16]	; (8003c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000

08003c78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c88:	4904      	ldr	r1, [pc, #16]	; (8003c9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <LL_APB1_GRP1_EnableClock>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	4907      	ldr	r1, [pc, #28]	; (8003ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4907      	ldr	r1, [pc, #28]	; (8003cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cee:	68fb      	ldr	r3, [r7, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40021000 	.word	0x40021000

08003d00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <LL_FLASH_SetLatency+0x24>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 0207 	bic.w	r2, r3, #7
 8003d10:	4904      	ldr	r1, [pc, #16]	; (8003d24 <LL_FLASH_SetLatency+0x24>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40022000 	.word	0x40022000

08003d28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <LL_FLASH_GetLatency+0x18>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40022000 	.word	0x40022000

08003d44 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d106      	bne.n	8003d60 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <LL_SYSTICK_SetClkSource+0x34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <LL_SYSTICK_SetClkSource+0x34>)
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8003d5e:	e005      	b.n	8003d6c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <LL_SYSTICK_SetClkSource+0x34>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <LL_SYSTICK_SetClkSource+0x34>)
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <LL_SYSTICK_EnableIT+0x1c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <LL_SYSTICK_EnableIT+0x1c>)
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <main>:
void SystemClock_Config(void);


uint8_t button=0;

int main(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7ff ff94 	bl	8003cd0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003da8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003dac:	f7ff ff78 	bl	8003ca0 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db0:	2003      	movs	r0, #3
 8003db2:	f7ff febb 	bl	8003b2c <NVIC_SetPriorityGrouping>

	SystemClock_Config();
 8003db6:	f000 f851 	bl	8003e5c <SystemClock_Config>

	MX_GPIO_Init();
 8003dba:	f7ff f989 	bl	80030d0 <MX_GPIO_Init>

	setSegments();
 8003dbe:	f7fe fcab 	bl	8002718 <setSegments>
	setDigits();
 8003dc2:	f7fe fcf7 	bl	80027b4 <setDigits>

	LL_mDelay(2000);
 8003dc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003dca:	f7fd fff7 	bl	8001dbc <LL_mDelay>

	resetDigits();
 8003dce:	f7fe fcd1 	bl	8002774 <resetDigits>
	resetSegments();
 8003dd2:	f7fe fc73 	bl	80026bc <resetSegments>

	MX_TIM3_Init();
 8003dd6:	f000 fba7 	bl	8004528 <MX_TIM3_Init>

	MX_I2C1_Init();
 8003dda:	f7ff fd49 	bl	8003870 <MX_I2C1_Init>

	hts221_init();
 8003dde:	f7ff fb5b 	bl	8003498 <hts221_init>

	char cislo[20];
	float temp = 0;
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
	float humi =0;
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]

	while (1) {
		switch (button) {
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <main+0xb4>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <main+0x60>
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00f      	beq.n	8003e1a <main+0x7e>
 8003dfa:	e022      	b.n	8003e42 <main+0xa6>
			case 0:
				//temp = lps25hb_get_temp();
				temp = hts221_get_temperature();
 8003dfc:	f7ff facc 	bl	8003398 <hts221_get_temperature>
 8003e00:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				sprintf(cislo, "TEMP_%.1f", temp);
 8003e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e06:	f7fc fb9f 	bl	8000548 <__aeabi_f2d>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	f107 000c 	add.w	r0, r7, #12
 8003e12:	4910      	ldr	r1, [pc, #64]	; (8003e54 <main+0xb8>)
 8003e14:	f001 f8b0 	bl	8004f78 <siprintf>
				break;
 8003e18:	e013      	b.n	8003e42 <main+0xa6>
			case 1:
				humi = hts221_get_humidity();
 8003e1a:	f7ff fa19 	bl	8003250 <hts221_get_humidity>
 8003e1e:	ed87 0a08 	vstr	s0, [r7, #32]
				sprintf(cislo, "HUM_%d", (uint8_t)humi);
 8003e22:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e2e:	793b      	ldrb	r3, [r7, #4]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4907      	ldr	r1, [pc, #28]	; (8003e58 <main+0xbc>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f89c 	bl	8004f78 <siprintf>
				break;
 8003e40:	bf00      	nop
		}
		display_show(cislo);
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fefa 	bl	8002c40 <display_show>
		switch (button) {
 8003e4c:	e7cf      	b.n	8003dee <main+0x52>
 8003e4e:	bf00      	nop
 8003e50:	2000020e 	.word	0x2000020e
 8003e54:	08007400 	.word	0x08007400
 8003e58:	0800740c 	.word	0x0800740c

08003e5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7ff ff4d 	bl	8003d00 <LL_FLASH_SetLatency>

	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8003e66:	f7ff ff5f 	bl	8003d28 <LL_FLASH_GetLatency>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <SystemClock_Config+0x18>
		Error_Handler();
 8003e70:	f000 f82c 	bl	8003ecc <Error_Handler>
	}
	LL_RCC_HSI_Enable();
 8003e74:	f7ff fe7e 	bl	8003b74 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8003e78:	bf00      	nop
 8003e7a:	f7ff fe8b 	bl	8003b94 <LL_RCC_HSI_IsReady>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d1fa      	bne.n	8003e7a <SystemClock_Config+0x1e>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8003e84:	2010      	movs	r0, #16
 8003e86:	f7ff fe97 	bl	8003bb8 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f7ff fecc 	bl	8003c28 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff fedd 	bl	8003c50 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7ff feee 	bl	8003c78 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7ff fea1 	bl	8003be4 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003ea2:	bf00      	nop
 8003ea4:	f7ff feb2 	bl	8003c0c <LL_RCC_GetSysClkSource>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1fa      	bne.n	8003ea4 <SystemClock_Config+0x48>

	}
	LL_Init1msTick(8000000);
 8003eae:	4806      	ldr	r0, [pc, #24]	; (8003ec8 <SystemClock_Config+0x6c>)
 8003eb0:	f7fd ff76 	bl	8001da0 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	f7ff ff45 	bl	8003d44 <LL_SYSTICK_SetClkSource>
	LL_SYSTICK_EnableIT();
 8003eba:	f7ff ff5f 	bl	8003d7c <LL_SYSTICK_EnableIT>
	LL_SetSystemCoreClock(8000000);
 8003ebe:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <SystemClock_Config+0x6c>)
 8003ec0:	f7fd ffa2 	bl	8001e08 <LL_SetSystemCoreClock>
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed0:	b672      	cpsid	i
}
 8003ed2:	bf00      	nop
	  __disable_irq();
	  while (1)
 8003ed4:	e7fe      	b.n	8003ed4 <Error_Handler+0x8>
	...

08003ed8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40010400 	.word	0x40010400

08003f04 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6153      	str	r3, [r2, #20]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010400 	.word	0x40010400

08003f24 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003f36:	e7fe      	b.n	8003f36 <HardFault_Handler+0x4>

08003f38 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003f3c:	e7fe      	b.n	8003f3c <MemManage_Handler+0x4>

08003f3e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003f42:	e7fe      	b.n	8003f42 <BusFault_Handler+0x4>

08003f44 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003f48:	e7fe      	b.n	8003f48 <UsageFault_Handler+0x4>

08003f4a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	disp_time++;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <SysTick_Handler+0x20>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	1c50      	adds	r0, r2, #1
 8003f80:	f143 0100 	adc.w	r1, r3, #0
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <SysTick_Handler+0x20>)
 8003f86:	e9c3 0100 	strd	r0, r1, [r3]

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	200001f8 	.word	0x200001f8

08003f98 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af02      	add	r7, sp, #8

	if (checkButtonState(GPIOB, 3,1,30, 20)) {
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	231e      	movs	r3, #30
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	4810      	ldr	r0, [pc, #64]	; (8003fec <EXTI3_IRQHandler+0x54>)
 8003faa:	f000 f825 	bl	8003ff8 <checkButtonState>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00f      	beq.n	8003fd4 <EXTI3_IRQHandler+0x3c>
		button++;
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <EXTI3_IRQHandler+0x58>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <EXTI3_IRQHandler+0x58>)
 8003fbe:	701a      	strb	r2, [r3, #0]
		shift=0;
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <EXTI3_IRQHandler+0x5c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
		if (button == 2)
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <EXTI3_IRQHandler+0x58>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d102      	bne.n	8003fd4 <EXTI3_IRQHandler+0x3c>
			button = 0;
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <EXTI3_IRQHandler+0x58>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
	}

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 8003fd4:	2008      	movs	r0, #8
 8003fd6:	f7ff ff7f 	bl	8003ed8 <LL_EXTI_IsActiveFlag_0_31>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <EXTI3_IRQHandler+0x4e>
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003fe0:	2008      	movs	r0, #8
 8003fe2:	f7ff ff8f 	bl	8003f04 <LL_EXTI_ClearFlag_0_31>

	}

}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	48000400 	.word	0x48000400
 8003ff0:	2000020e 	.word	0x2000020e
 8003ff4:	20000208 	.word	0x20000208

08003ff8 <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef *PORT, uint8_t PIN, uint8_t edge,
		uint8_t samples_window, uint8_t samples_required) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4603      	mov	r3, r0
 8004008:	70fb      	strb	r3, [r7, #3]
 800400a:	460b      	mov	r3, r1
 800400c:	70bb      	strb	r3, [r7, #2]
 800400e:	4613      	mov	r3, r2
 8004010:	707b      	strb	r3, [r7, #1]
	uint8_t button_state = 0, timeout = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	2300      	movs	r3, #0
 8004018:	73bb      	strb	r3, [r7, #14]

	while (button_state < samples_required && timeout < samples_window) {
 800401a:	e014      	b.n	8004046 <checkButtonState+0x4e>
		if (!(PORT->IDR & (edge << PIN))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	78b9      	ldrb	r1, [r7, #2]
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <checkButtonState+0x3e>
			button_state += 1;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	3301      	adds	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e001      	b.n	800403a <checkButtonState+0x42>
		} else {
			button_state = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
		}

		timeout += 1;
 800403a:	7bbb      	ldrb	r3, [r7, #14]
 800403c:	3301      	adds	r3, #1
 800403e:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 8004040:	2001      	movs	r0, #1
 8004042:	f7fd febb 	bl	8001dbc <LL_mDelay>
	while (button_state < samples_required && timeout < samples_window) {
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	7e3b      	ldrb	r3, [r7, #24]
 800404a:	429a      	cmp	r2, r3
 800404c:	d203      	bcs.n	8004056 <checkButtonState+0x5e>
 800404e:	7bba      	ldrb	r2, [r7, #14]
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	429a      	cmp	r2, r3
 8004054:	d3e2      	bcc.n	800401c <checkButtonState+0x24>
	}

	if ((button_state >= samples_required) && (timeout <= samples_window)) {
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	7e3b      	ldrb	r3, [r7, #24]
 800405a:	429a      	cmp	r2, r3
 800405c:	d305      	bcc.n	800406a <checkButtonState+0x72>
 800405e:	7bba      	ldrb	r2, [r7, #14]
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	429a      	cmp	r2, r3
 8004064:	d801      	bhi.n	800406a <checkButtonState+0x72>
		return 1;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <checkButtonState+0x74>
	} else {
		return 0;
 800406a:	2300      	movs	r3, #0
	}

}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_kill>:

int _kill(int pid, int sig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800408e:	f000 fad7 	bl	8004640 <__errno>
 8004092:	4603      	mov	r3, r0
 8004094:	2216      	movs	r2, #22
 8004096:	601a      	str	r2, [r3, #0]
	return -1;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_exit>:

void _exit (int status)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ffe7 	bl	8004084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040b6:	e7fe      	b.n	80040b6 <_exit+0x12>

080040b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e00a      	b.n	80040e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ca:	f3af 8000 	nop.w
 80040ce:	4601      	mov	r1, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	b2ca      	uxtb	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	dbf0      	blt.n	80040ca <_read+0x12>
	}

return len;
 80040e8:	687b      	ldr	r3, [r7, #4]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e009      	b.n	8004118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60ba      	str	r2, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf1      	blt.n	8004104 <_write+0x12>
	}
	return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_close>:

int _close(int file)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
	return -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004152:	605a      	str	r2, [r3, #4]
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_isatty>:

int _isatty(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
	return 1;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <_sbrk+0x50>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x16>
		heap_end = &end;
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <_sbrk+0x50>)
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <_sbrk+0x54>)
 80041a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <_sbrk+0x50>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <_sbrk+0x50>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	466a      	mov	r2, sp
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d907      	bls.n	80041ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041be:	f000 fa3f 	bl	8004640 <__errno>
 80041c2:	4603      	mov	r3, r0
 80041c4:	220c      	movs	r2, #12
 80041c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e006      	b.n	80041dc <_sbrk+0x48>
	}

	heap_end += incr;
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <_sbrk+0x50>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <_sbrk+0x50>)
 80041d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000210 	.word	0x20000210
 80041e8:	20000230 	.word	0x20000230

080041ec <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f0:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <SystemInit+0x84>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <SystemInit+0x84>)
 80041f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <SystemInit+0x88>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <SystemInit+0x88>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <SystemInit+0x88>)
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4918      	ldr	r1, [pc, #96]	; (8004274 <SystemInit+0x88>)
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <SystemInit+0x8c>)
 8004214:	4013      	ands	r3, r2
 8004216:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <SystemInit+0x88>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <SystemInit+0x88>)
 800421e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <SystemInit+0x88>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a11      	ldr	r2, [pc, #68]	; (8004274 <SystemInit+0x88>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <SystemInit+0x88>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <SystemInit+0x88>)
 800423a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800423e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <SystemInit+0x88>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <SystemInit+0x88>)
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <SystemInit+0x88>)
 800424e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004250:	4908      	ldr	r1, [pc, #32]	; (8004274 <SystemInit+0x88>)
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <SystemInit+0x90>)
 8004254:	4013      	ands	r3, r2
 8004256:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <SystemInit+0x88>)
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <SystemInit+0x84>)
 8004260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004264:	609a      	str	r2, [r3, #8]
#endif
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	40021000 	.word	0x40021000
 8004278:	f87fc00c 	.word	0xf87fc00c
 800427c:	ff00fccc 	.word	0xff00fccc

08004280 <NVIC_GetPriorityGrouping>:
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <NVIC_GetPriorityGrouping+0x18>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	f003 0307 	and.w	r3, r3, #7
}
 800428e:	4618      	mov	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <NVIC_EnableIRQ>:
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	; (80042cc <NVIC_EnableIRQ+0x30>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <NVIC_SetPriority>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80042dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da0b      	bge.n	80042fc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <NVIC_SetPriority+0x4c>)
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	3b04      	subs	r3, #4
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	761a      	strb	r2, [r3, #24]
}
 80042fa:	e009      	b.n	8004310 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	4907      	ldr	r1, [pc, #28]	; (8004320 <NVIC_SetPriority+0x50>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00
 8004320:	e000e100 	.word	0xe000e100

08004324 <NVIC_EncodePriority>:
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <LL_APB1_GRP1_EnableClock>:
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	4907      	ldr	r1, [pc, #28]	; (80043b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4313      	orrs	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40021000 	.word	0x40021000

080043bc <LL_TIM_EnableCounter>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_TIM_EnableARRPreload>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_TIM_OC_DisableFast>:
{
 80043fc:	b4b0      	push	{r4, r5, r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d028      	beq.n	800445e <LL_TIM_OC_DisableFast+0x62>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d023      	beq.n	800445a <LL_TIM_OC_DisableFast+0x5e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b10      	cmp	r3, #16
 8004416:	d01e      	beq.n	8004456 <LL_TIM_OC_DisableFast+0x5a>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d019      	beq.n	8004452 <LL_TIM_OC_DisableFast+0x56>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004424:	d013      	beq.n	800444e <LL_TIM_OC_DisableFast+0x52>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d00d      	beq.n	800444a <LL_TIM_OC_DisableFast+0x4e>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d007      	beq.n	8004446 <LL_TIM_OC_DisableFast+0x4a>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d101      	bne.n	8004442 <LL_TIM_OC_DisableFast+0x46>
 800443e:	2307      	movs	r3, #7
 8004440:	e00e      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 8004442:	2308      	movs	r3, #8
 8004444:	e00c      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 8004446:	2306      	movs	r3, #6
 8004448:	e00a      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 800444a:	2305      	movs	r3, #5
 800444c:	e008      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 800444e:	2304      	movs	r3, #4
 8004450:	e006      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 8004452:	2303      	movs	r3, #3
 8004454:	e004      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 8004456:	2302      	movs	r3, #2
 8004458:	e002      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <LL_TIM_OC_DisableFast+0x64>
 800445e:	2300      	movs	r3, #0
 8004460:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3318      	adds	r3, #24
 8004466:	461a      	mov	r2, r3
 8004468:	4629      	mov	r1, r5
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <LL_TIM_OC_DisableFast+0x94>)
 800446c:	5c5b      	ldrb	r3, [r3, r1]
 800446e:	4413      	add	r3, r2
 8004470:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	4629      	mov	r1, r5
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <LL_TIM_OC_DisableFast+0x98>)
 8004478:	5c5b      	ldrb	r3, [r3, r1]
 800447a:	4619      	mov	r1, r3
 800447c:	2304      	movs	r3, #4
 800447e:	408b      	lsls	r3, r1
 8004480:	43db      	mvns	r3, r3
 8004482:	4013      	ands	r3, r2
 8004484:	6023      	str	r3, [r4, #0]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bcb0      	pop	{r4, r5, r7}
 800448e:	4770      	bx	lr
 8004490:	08007414 	.word	0x08007414
 8004494:	08007420 	.word	0x08007420

08004498 <LL_TIM_SetClockSource>:
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_TIM_SetTriggerOutput>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_TIM_DisableMasterSlaveMode>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800452e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	2220      	movs	r2, #32
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f8a5 	bl	8004694 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800454a:	2002      	movs	r0, #2
 800454c:	f7ff ff1e 	bl	800438c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 1));
 8004550:	f7ff fe96 	bl	8004280 <NVIC_GetPriorityGrouping>
 8004554:	4603      	mov	r3, r0
 8004556:	2201      	movs	r2, #1
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fee2 	bl	8004324 <NVIC_EncodePriority>
 8004560:	4603      	mov	r3, r0
 8004562:	4619      	mov	r1, r3
 8004564:	201d      	movs	r0, #29
 8004566:	f7ff feb3 	bl	80042d0 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800456a:	201d      	movs	r0, #29
 800456c:	f7ff fe96 	bl	800429c <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 8000; 								//1kHz
 8004570:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004574:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004576:	2300      	movs	r3, #0
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;								//500ms
 800457a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004580:	2300      	movs	r3, #0
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004588:	4619      	mov	r1, r3
 800458a:	4817      	ldr	r0, [pc, #92]	; (80045e8 <MX_TIM3_Init+0xc0>)
 800458c:	f7fd f862 	bl	8001654 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8004590:	4815      	ldr	r0, [pc, #84]	; (80045e8 <MX_TIM3_Init+0xc0>)
 8004592:	f7ff ff23 	bl	80043dc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004596:	2100      	movs	r1, #0
 8004598:	4813      	ldr	r0, [pc, #76]	; (80045e8 <MX_TIM3_Init+0xc0>)
 800459a:	f7ff ff7d 	bl	8004498 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800459e:	2310      	movs	r3, #16
 80045a0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	461a      	mov	r2, r3
 80045b6:	2101      	movs	r1, #1
 80045b8:	480b      	ldr	r0, [pc, #44]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045ba:	f7fd f8bf 	bl	800173c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80045be:	2101      	movs	r1, #1
 80045c0:	4809      	ldr	r0, [pc, #36]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045c2:	f7ff ff1b 	bl	80043fc <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80045c6:	2100      	movs	r1, #0
 80045c8:	4807      	ldr	r0, [pc, #28]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045ca:	f7ff ff7a 	bl	80044c2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045d0:	f7ff ff8a 	bl	80044e8 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045d6:	f7ff ff97 	bl	8004508 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80045da:	4803      	ldr	r0, [pc, #12]	; (80045e8 <MX_TIM3_Init+0xc0>)
 80045dc:	f7ff feee 	bl	80043bc <LL_TIM_EnableCounter>

}
 80045e0:	bf00      	nop
 80045e2:	3738      	adds	r7, #56	; 0x38
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40000400 	.word	0x40000400

080045ec <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80045f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80045f2:	e003      	b.n	80045fc <LoopCopyDataInit>

080045f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80045f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80045f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80045fa:	3104      	adds	r1, #4

080045fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80045fc:	480b      	ldr	r0, [pc, #44]	; (800462c <LoopForever+0xa>)
	ldr	r3, =_edata
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004604:	d3f6      	bcc.n	80045f4 <CopyDataInit>
	ldr	r2, =_sbss
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004608:	e002      	b.n	8004610 <LoopFillZerobss>

0800460a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800460a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800460c:	f842 3b04 	str.w	r3, [r2], #4

08004610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <LoopForever+0x16>)
	cmp	r2, r3
 8004612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004614:	d3f9      	bcc.n	800460a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004616:	f7ff fde9 	bl	80041ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461a:	f000 f817 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800461e:	f7ff fbbd 	bl	8003d9c <main>

08004622 <LoopForever>:

LoopForever:
    b LoopForever
 8004622:	e7fe      	b.n	8004622 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004624:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004628:	08007814 	.word	0x08007814
	ldr	r0, =_sdata
 800462c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004630:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8004634:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8004638:	20000230 	.word	0x20000230

0800463c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800463c:	e7fe      	b.n	800463c <ADC1_2_IRQHandler>
	...

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000008 	.word	0x20000008

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4d0d      	ldr	r5, [pc, #52]	; (8004684 <__libc_init_array+0x38>)
 8004650:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	2600      	movs	r6, #0
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	4d0b      	ldr	r5, [pc, #44]	; (800468c <__libc_init_array+0x40>)
 800465e:	4c0c      	ldr	r4, [pc, #48]	; (8004690 <__libc_init_array+0x44>)
 8004660:	f002 fec0 	bl	80073e4 <_init>
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	2600      	movs	r6, #0
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	0800780c 	.word	0x0800780c
 8004688:	0800780c 	.word	0x0800780c
 800468c:	0800780c 	.word	0x0800780c
 8004690:	08007810 	.word	0x08007810

08004694 <memset>:
 8004694:	4402      	add	r2, r0
 8004696:	4603      	mov	r3, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <__cvt>:
 80046a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	ec55 4b10 	vmov	r4, r5, d0
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	460e      	mov	r6, r1
 80046b0:	4619      	mov	r1, r3
 80046b2:	462b      	mov	r3, r5
 80046b4:	bfbb      	ittet	lt
 80046b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046ba:	461d      	movlt	r5, r3
 80046bc:	2300      	movge	r3, #0
 80046be:	232d      	movlt	r3, #45	; 0x2d
 80046c0:	700b      	strb	r3, [r1, #0]
 80046c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046c8:	4691      	mov	r9, r2
 80046ca:	f023 0820 	bic.w	r8, r3, #32
 80046ce:	bfbc      	itt	lt
 80046d0:	4622      	movlt	r2, r4
 80046d2:	4614      	movlt	r4, r2
 80046d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046d8:	d005      	beq.n	80046e6 <__cvt+0x42>
 80046da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046de:	d100      	bne.n	80046e2 <__cvt+0x3e>
 80046e0:	3601      	adds	r6, #1
 80046e2:	2102      	movs	r1, #2
 80046e4:	e000      	b.n	80046e8 <__cvt+0x44>
 80046e6:	2103      	movs	r1, #3
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	ab02      	add	r3, sp, #8
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	ec45 4b10 	vmov	d0, r4, r5
 80046f4:	4653      	mov	r3, sl
 80046f6:	4632      	mov	r2, r6
 80046f8:	f000 fcf6 	bl	80050e8 <_dtoa_r>
 80046fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004700:	4607      	mov	r7, r0
 8004702:	d102      	bne.n	800470a <__cvt+0x66>
 8004704:	f019 0f01 	tst.w	r9, #1
 8004708:	d022      	beq.n	8004750 <__cvt+0xac>
 800470a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800470e:	eb07 0906 	add.w	r9, r7, r6
 8004712:	d110      	bne.n	8004736 <__cvt+0x92>
 8004714:	783b      	ldrb	r3, [r7, #0]
 8004716:	2b30      	cmp	r3, #48	; 0x30
 8004718:	d10a      	bne.n	8004730 <__cvt+0x8c>
 800471a:	2200      	movs	r2, #0
 800471c:	2300      	movs	r3, #0
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7fc f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004726:	b918      	cbnz	r0, 8004730 <__cvt+0x8c>
 8004728:	f1c6 0601 	rsb	r6, r6, #1
 800472c:	f8ca 6000 	str.w	r6, [sl]
 8004730:	f8da 3000 	ldr.w	r3, [sl]
 8004734:	4499      	add	r9, r3
 8004736:	2200      	movs	r2, #0
 8004738:	2300      	movs	r3, #0
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fc f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004742:	b108      	cbz	r0, 8004748 <__cvt+0xa4>
 8004744:	f8cd 900c 	str.w	r9, [sp, #12]
 8004748:	2230      	movs	r2, #48	; 0x30
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	454b      	cmp	r3, r9
 800474e:	d307      	bcc.n	8004760 <__cvt+0xbc>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004754:	1bdb      	subs	r3, r3, r7
 8004756:	4638      	mov	r0, r7
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	b004      	add	sp, #16
 800475c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004760:	1c59      	adds	r1, r3, #1
 8004762:	9103      	str	r1, [sp, #12]
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e7f0      	b.n	800474a <__cvt+0xa6>

08004768 <__exponent>:
 8004768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476a:	4603      	mov	r3, r0
 800476c:	2900      	cmp	r1, #0
 800476e:	bfb8      	it	lt
 8004770:	4249      	neglt	r1, r1
 8004772:	f803 2b02 	strb.w	r2, [r3], #2
 8004776:	bfb4      	ite	lt
 8004778:	222d      	movlt	r2, #45	; 0x2d
 800477a:	222b      	movge	r2, #43	; 0x2b
 800477c:	2909      	cmp	r1, #9
 800477e:	7042      	strb	r2, [r0, #1]
 8004780:	dd2a      	ble.n	80047d8 <__exponent+0x70>
 8004782:	f10d 0407 	add.w	r4, sp, #7
 8004786:	46a4      	mov	ip, r4
 8004788:	270a      	movs	r7, #10
 800478a:	46a6      	mov	lr, r4
 800478c:	460a      	mov	r2, r1
 800478e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004792:	fb07 1516 	mls	r5, r7, r6, r1
 8004796:	3530      	adds	r5, #48	; 0x30
 8004798:	2a63      	cmp	r2, #99	; 0x63
 800479a:	f104 34ff 	add.w	r4, r4, #4294967295
 800479e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047a2:	4631      	mov	r1, r6
 80047a4:	dcf1      	bgt.n	800478a <__exponent+0x22>
 80047a6:	3130      	adds	r1, #48	; 0x30
 80047a8:	f1ae 0502 	sub.w	r5, lr, #2
 80047ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047b0:	1c44      	adds	r4, r0, #1
 80047b2:	4629      	mov	r1, r5
 80047b4:	4561      	cmp	r1, ip
 80047b6:	d30a      	bcc.n	80047ce <__exponent+0x66>
 80047b8:	f10d 0209 	add.w	r2, sp, #9
 80047bc:	eba2 020e 	sub.w	r2, r2, lr
 80047c0:	4565      	cmp	r5, ip
 80047c2:	bf88      	it	hi
 80047c4:	2200      	movhi	r2, #0
 80047c6:	4413      	add	r3, r2
 80047c8:	1a18      	subs	r0, r3, r0
 80047ca:	b003      	add	sp, #12
 80047cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047d6:	e7ed      	b.n	80047b4 <__exponent+0x4c>
 80047d8:	2330      	movs	r3, #48	; 0x30
 80047da:	3130      	adds	r1, #48	; 0x30
 80047dc:	7083      	strb	r3, [r0, #2]
 80047de:	70c1      	strb	r1, [r0, #3]
 80047e0:	1d03      	adds	r3, r0, #4
 80047e2:	e7f1      	b.n	80047c8 <__exponent+0x60>

080047e4 <_printf_float>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	ed2d 8b02 	vpush	{d8}
 80047ec:	b08d      	sub	sp, #52	; 0x34
 80047ee:	460c      	mov	r4, r1
 80047f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047f4:	4616      	mov	r6, r2
 80047f6:	461f      	mov	r7, r3
 80047f8:	4605      	mov	r5, r0
 80047fa:	f001 fa61 	bl	8005cc0 <_localeconv_r>
 80047fe:	f8d0 a000 	ldr.w	sl, [r0]
 8004802:	4650      	mov	r0, sl
 8004804:	f7fb fce4 	bl	80001d0 <strlen>
 8004808:	2300      	movs	r3, #0
 800480a:	930a      	str	r3, [sp, #40]	; 0x28
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	9305      	str	r3, [sp, #20]
 8004810:	f8d8 3000 	ldr.w	r3, [r8]
 8004814:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004818:	3307      	adds	r3, #7
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	f103 0208 	add.w	r2, r3, #8
 8004822:	f8c8 2000 	str.w	r2, [r8]
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800482e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004836:	9307      	str	r3, [sp, #28]
 8004838:	f8cd 8018 	str.w	r8, [sp, #24]
 800483c:	ee08 0a10 	vmov	s16, r0
 8004840:	4b9f      	ldr	r3, [pc, #636]	; (8004ac0 <_printf_float+0x2dc>)
 8004842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	f7fc f96f 	bl	8000b2c <__aeabi_dcmpun>
 800484e:	bb88      	cbnz	r0, 80048b4 <_printf_float+0xd0>
 8004850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004854:	4b9a      	ldr	r3, [pc, #616]	; (8004ac0 <_printf_float+0x2dc>)
 8004856:	f04f 32ff 	mov.w	r2, #4294967295
 800485a:	f7fc f949 	bl	8000af0 <__aeabi_dcmple>
 800485e:	bb48      	cbnz	r0, 80048b4 <_printf_float+0xd0>
 8004860:	2200      	movs	r2, #0
 8004862:	2300      	movs	r3, #0
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fc f938 	bl	8000adc <__aeabi_dcmplt>
 800486c:	b110      	cbz	r0, 8004874 <_printf_float+0x90>
 800486e:	232d      	movs	r3, #45	; 0x2d
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	4b93      	ldr	r3, [pc, #588]	; (8004ac4 <_printf_float+0x2e0>)
 8004876:	4894      	ldr	r0, [pc, #592]	; (8004ac8 <_printf_float+0x2e4>)
 8004878:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800487c:	bf94      	ite	ls
 800487e:	4698      	movls	r8, r3
 8004880:	4680      	movhi	r8, r0
 8004882:	2303      	movs	r3, #3
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	9b05      	ldr	r3, [sp, #20]
 8004888:	f023 0204 	bic.w	r2, r3, #4
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	f04f 0900 	mov.w	r9, #0
 8004892:	9700      	str	r7, [sp, #0]
 8004894:	4633      	mov	r3, r6
 8004896:	aa0b      	add	r2, sp, #44	; 0x2c
 8004898:	4621      	mov	r1, r4
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f9d8 	bl	8004c50 <_printf_common>
 80048a0:	3001      	adds	r0, #1
 80048a2:	f040 8090 	bne.w	80049c6 <_printf_float+0x1e2>
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	b00d      	add	sp, #52	; 0x34
 80048ac:	ecbd 8b02 	vpop	{d8}
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	4649      	mov	r1, r9
 80048bc:	f7fc f936 	bl	8000b2c <__aeabi_dcmpun>
 80048c0:	b140      	cbz	r0, 80048d4 <_printf_float+0xf0>
 80048c2:	464b      	mov	r3, r9
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bfbc      	itt	lt
 80048c8:	232d      	movlt	r3, #45	; 0x2d
 80048ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ce:	487f      	ldr	r0, [pc, #508]	; (8004acc <_printf_float+0x2e8>)
 80048d0:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <_printf_float+0x2ec>)
 80048d2:	e7d1      	b.n	8004878 <_printf_float+0x94>
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048da:	9206      	str	r2, [sp, #24]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	d13f      	bne.n	8004960 <_printf_float+0x17c>
 80048e0:	2306      	movs	r3, #6
 80048e2:	6063      	str	r3, [r4, #4]
 80048e4:	9b05      	ldr	r3, [sp, #20]
 80048e6:	6861      	ldr	r1, [r4, #4]
 80048e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048ec:	2300      	movs	r3, #0
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	ab0a      	add	r3, sp, #40	; 0x28
 80048f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048f6:	ab09      	add	r3, sp, #36	; 0x24
 80048f8:	ec49 8b10 	vmov	d0, r8, r9
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004904:	4628      	mov	r0, r5
 8004906:	f7ff fecd 	bl	80046a4 <__cvt>
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800490e:	2b47      	cmp	r3, #71	; 0x47
 8004910:	4680      	mov	r8, r0
 8004912:	d108      	bne.n	8004926 <_printf_float+0x142>
 8004914:	1cc8      	adds	r0, r1, #3
 8004916:	db02      	blt.n	800491e <_printf_float+0x13a>
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	4299      	cmp	r1, r3
 800491c:	dd41      	ble.n	80049a2 <_printf_float+0x1be>
 800491e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004922:	fa5f fb8b 	uxtb.w	fp, fp
 8004926:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800492a:	d820      	bhi.n	800496e <_printf_float+0x18a>
 800492c:	3901      	subs	r1, #1
 800492e:	465a      	mov	r2, fp
 8004930:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004934:	9109      	str	r1, [sp, #36]	; 0x24
 8004936:	f7ff ff17 	bl	8004768 <__exponent>
 800493a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800493c:	1813      	adds	r3, r2, r0
 800493e:	2a01      	cmp	r2, #1
 8004940:	4681      	mov	r9, r0
 8004942:	6123      	str	r3, [r4, #16]
 8004944:	dc02      	bgt.n	800494c <_printf_float+0x168>
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	07d2      	lsls	r2, r2, #31
 800494a:	d501      	bpl.n	8004950 <_printf_float+0x16c>
 800494c:	3301      	adds	r3, #1
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004954:	2b00      	cmp	r3, #0
 8004956:	d09c      	beq.n	8004892 <_printf_float+0xae>
 8004958:	232d      	movs	r3, #45	; 0x2d
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495e:	e798      	b.n	8004892 <_printf_float+0xae>
 8004960:	9a06      	ldr	r2, [sp, #24]
 8004962:	2a47      	cmp	r2, #71	; 0x47
 8004964:	d1be      	bne.n	80048e4 <_printf_float+0x100>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1bc      	bne.n	80048e4 <_printf_float+0x100>
 800496a:	2301      	movs	r3, #1
 800496c:	e7b9      	b.n	80048e2 <_printf_float+0xfe>
 800496e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004972:	d118      	bne.n	80049a6 <_printf_float+0x1c2>
 8004974:	2900      	cmp	r1, #0
 8004976:	6863      	ldr	r3, [r4, #4]
 8004978:	dd0b      	ble.n	8004992 <_printf_float+0x1ae>
 800497a:	6121      	str	r1, [r4, #16]
 800497c:	b913      	cbnz	r3, 8004984 <_printf_float+0x1a0>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	07d0      	lsls	r0, r2, #31
 8004982:	d502      	bpl.n	800498a <_printf_float+0x1a6>
 8004984:	3301      	adds	r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	65a1      	str	r1, [r4, #88]	; 0x58
 800498c:	f04f 0900 	mov.w	r9, #0
 8004990:	e7de      	b.n	8004950 <_printf_float+0x16c>
 8004992:	b913      	cbnz	r3, 800499a <_printf_float+0x1b6>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	07d2      	lsls	r2, r2, #31
 8004998:	d501      	bpl.n	800499e <_printf_float+0x1ba>
 800499a:	3302      	adds	r3, #2
 800499c:	e7f4      	b.n	8004988 <_printf_float+0x1a4>
 800499e:	2301      	movs	r3, #1
 80049a0:	e7f2      	b.n	8004988 <_printf_float+0x1a4>
 80049a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a8:	4299      	cmp	r1, r3
 80049aa:	db05      	blt.n	80049b8 <_printf_float+0x1d4>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	6121      	str	r1, [r4, #16]
 80049b0:	07d8      	lsls	r0, r3, #31
 80049b2:	d5ea      	bpl.n	800498a <_printf_float+0x1a6>
 80049b4:	1c4b      	adds	r3, r1, #1
 80049b6:	e7e7      	b.n	8004988 <_printf_float+0x1a4>
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bfd4      	ite	le
 80049bc:	f1c1 0202 	rsble	r2, r1, #2
 80049c0:	2201      	movgt	r2, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	e7e0      	b.n	8004988 <_printf_float+0x1a4>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	055a      	lsls	r2, r3, #21
 80049ca:	d407      	bmi.n	80049dc <_printf_float+0x1f8>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	d12c      	bne.n	8004a34 <_printf_float+0x250>
 80049da:	e764      	b.n	80048a6 <_printf_float+0xc2>
 80049dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049e0:	f240 80e0 	bls.w	8004ba4 <_printf_float+0x3c0>
 80049e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049e8:	2200      	movs	r2, #0
 80049ea:	2300      	movs	r3, #0
 80049ec:	f7fc f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d034      	beq.n	8004a5e <_printf_float+0x27a>
 80049f4:	4a37      	ldr	r2, [pc, #220]	; (8004ad4 <_printf_float+0x2f0>)
 80049f6:	2301      	movs	r3, #1
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af51 	beq.w	80048a6 <_printf_float+0xc2>
 8004a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	db02      	blt.n	8004a12 <_printf_float+0x22e>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	07d8      	lsls	r0, r3, #31
 8004a10:	d510      	bpl.n	8004a34 <_printf_float+0x250>
 8004a12:	ee18 3a10 	vmov	r3, s16
 8004a16:	4652      	mov	r2, sl
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	f43f af41 	beq.w	80048a6 <_printf_float+0xc2>
 8004a24:	f04f 0800 	mov.w	r8, #0
 8004a28:	f104 091a 	add.w	r9, r4, #26
 8004a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4543      	cmp	r3, r8
 8004a32:	dc09      	bgt.n	8004a48 <_printf_float+0x264>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	079b      	lsls	r3, r3, #30
 8004a38:	f100 8105 	bmi.w	8004c46 <_printf_float+0x462>
 8004a3c:	68e0      	ldr	r0, [r4, #12]
 8004a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a40:	4298      	cmp	r0, r3
 8004a42:	bfb8      	it	lt
 8004a44:	4618      	movlt	r0, r3
 8004a46:	e730      	b.n	80048aa <_printf_float+0xc6>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	464a      	mov	r2, r9
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f af27 	beq.w	80048a6 <_printf_float+0xc2>
 8004a58:	f108 0801 	add.w	r8, r8, #1
 8004a5c:	e7e6      	b.n	8004a2c <_printf_float+0x248>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dc39      	bgt.n	8004ad8 <_printf_float+0x2f4>
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <_printf_float+0x2f0>)
 8004a66:	2301      	movs	r3, #1
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af19 	beq.w	80048a6 <_printf_float+0xc2>
 8004a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d102      	bne.n	8004a82 <_printf_float+0x29e>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	07d9      	lsls	r1, r3, #31
 8004a80:	d5d8      	bpl.n	8004a34 <_printf_float+0x250>
 8004a82:	ee18 3a10 	vmov	r3, s16
 8004a86:	4652      	mov	r2, sl
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af09 	beq.w	80048a6 <_printf_float+0xc2>
 8004a94:	f04f 0900 	mov.w	r9, #0
 8004a98:	f104 0a1a 	add.w	sl, r4, #26
 8004a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9e:	425b      	negs	r3, r3
 8004aa0:	454b      	cmp	r3, r9
 8004aa2:	dc01      	bgt.n	8004aa8 <_printf_float+0x2c4>
 8004aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa6:	e792      	b.n	80049ce <_printf_float+0x1ea>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4652      	mov	r2, sl
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f aef7 	beq.w	80048a6 <_printf_float+0xc2>
 8004ab8:	f109 0901 	add.w	r9, r9, #1
 8004abc:	e7ee      	b.n	8004a9c <_printf_float+0x2b8>
 8004abe:	bf00      	nop
 8004ac0:	7fefffff 	.word	0x7fefffff
 8004ac4:	08007430 	.word	0x08007430
 8004ac8:	08007434 	.word	0x08007434
 8004acc:	0800743c 	.word	0x0800743c
 8004ad0:	08007438 	.word	0x08007438
 8004ad4:	08007440 	.word	0x08007440
 8004ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bfa8      	it	ge
 8004ae0:	461a      	movge	r2, r3
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	4691      	mov	r9, r2
 8004ae6:	dc37      	bgt.n	8004b58 <_printf_float+0x374>
 8004ae8:	f04f 0b00 	mov.w	fp, #0
 8004aec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af0:	f104 021a 	add.w	r2, r4, #26
 8004af4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	eba3 0309 	sub.w	r3, r3, r9
 8004afc:	455b      	cmp	r3, fp
 8004afe:	dc33      	bgt.n	8004b68 <_printf_float+0x384>
 8004b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b04:	429a      	cmp	r2, r3
 8004b06:	db3b      	blt.n	8004b80 <_printf_float+0x39c>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	07da      	lsls	r2, r3, #31
 8004b0c:	d438      	bmi.n	8004b80 <_printf_float+0x39c>
 8004b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b10:	9b05      	ldr	r3, [sp, #20]
 8004b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	eba2 0901 	sub.w	r9, r2, r1
 8004b1a:	4599      	cmp	r9, r3
 8004b1c:	bfa8      	it	ge
 8004b1e:	4699      	movge	r9, r3
 8004b20:	f1b9 0f00 	cmp.w	r9, #0
 8004b24:	dc35      	bgt.n	8004b92 <_printf_float+0x3ae>
 8004b26:	f04f 0800 	mov.w	r8, #0
 8004b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b2e:	f104 0a1a 	add.w	sl, r4, #26
 8004b32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	eba3 0309 	sub.w	r3, r3, r9
 8004b3c:	4543      	cmp	r3, r8
 8004b3e:	f77f af79 	ble.w	8004a34 <_printf_float+0x250>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4652      	mov	r2, sl
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f43f aeaa 	beq.w	80048a6 <_printf_float+0xc2>
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	e7ec      	b.n	8004b32 <_printf_float+0x34e>
 8004b58:	4613      	mov	r3, r2
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	d1c0      	bne.n	8004ae8 <_printf_float+0x304>
 8004b66:	e69e      	b.n	80048a6 <_printf_float+0xc2>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	9205      	str	r2, [sp, #20]
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f ae97 	beq.w	80048a6 <_printf_float+0xc2>
 8004b78:	9a05      	ldr	r2, [sp, #20]
 8004b7a:	f10b 0b01 	add.w	fp, fp, #1
 8004b7e:	e7b9      	b.n	8004af4 <_printf_float+0x310>
 8004b80:	ee18 3a10 	vmov	r3, s16
 8004b84:	4652      	mov	r2, sl
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1be      	bne.n	8004b0e <_printf_float+0x32a>
 8004b90:	e689      	b.n	80048a6 <_printf_float+0xc2>
 8004b92:	9a05      	ldr	r2, [sp, #20]
 8004b94:	464b      	mov	r3, r9
 8004b96:	4442      	add	r2, r8
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d1c1      	bne.n	8004b26 <_printf_float+0x342>
 8004ba2:	e680      	b.n	80048a6 <_printf_float+0xc2>
 8004ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba6:	2a01      	cmp	r2, #1
 8004ba8:	dc01      	bgt.n	8004bae <_printf_float+0x3ca>
 8004baa:	07db      	lsls	r3, r3, #31
 8004bac:	d538      	bpl.n	8004c20 <_printf_float+0x43c>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f ae74 	beq.w	80048a6 <_printf_float+0xc2>
 8004bbe:	ee18 3a10 	vmov	r3, s16
 8004bc2:	4652      	mov	r2, sl
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f43f ae6b 	beq.w	80048a6 <_printf_float+0xc2>
 8004bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f7fb ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bdc:	b9d8      	cbnz	r0, 8004c16 <_printf_float+0x432>
 8004bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be0:	f108 0201 	add.w	r2, r8, #1
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	d10e      	bne.n	8004c0e <_printf_float+0x42a>
 8004bf0:	e659      	b.n	80048a6 <_printf_float+0xc2>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	f43f ae52 	beq.w	80048a6 <_printf_float+0xc2>
 8004c02:	f108 0801 	add.w	r8, r8, #1
 8004c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4543      	cmp	r3, r8
 8004c0c:	dcf1      	bgt.n	8004bf2 <_printf_float+0x40e>
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c14:	e6dc      	b.n	80049d0 <_printf_float+0x1ec>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 0a1a 	add.w	sl, r4, #26
 8004c1e:	e7f2      	b.n	8004c06 <_printf_float+0x422>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4642      	mov	r2, r8
 8004c24:	e7df      	b.n	8004be6 <_printf_float+0x402>
 8004c26:	2301      	movs	r3, #1
 8004c28:	464a      	mov	r2, r9
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	f43f ae38 	beq.w	80048a6 <_printf_float+0xc2>
 8004c36:	f108 0801 	add.w	r8, r8, #1
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c3e:	1a5b      	subs	r3, r3, r1
 8004c40:	4543      	cmp	r3, r8
 8004c42:	dcf0      	bgt.n	8004c26 <_printf_float+0x442>
 8004c44:	e6fa      	b.n	8004a3c <_printf_float+0x258>
 8004c46:	f04f 0800 	mov.w	r8, #0
 8004c4a:	f104 0919 	add.w	r9, r4, #25
 8004c4e:	e7f4      	b.n	8004c3a <_printf_float+0x456>

08004c50 <_printf_common>:
 8004c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	4616      	mov	r6, r2
 8004c56:	4699      	mov	r9, r3
 8004c58:	688a      	ldr	r2, [r1, #8]
 8004c5a:	690b      	ldr	r3, [r1, #16]
 8004c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bfb8      	it	lt
 8004c64:	4613      	movlt	r3, r2
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	b10a      	cbz	r2, 8004c76 <_printf_common+0x26>
 8004c72:	3301      	adds	r3, #1
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	0699      	lsls	r1, r3, #26
 8004c7a:	bf42      	ittt	mi
 8004c7c:	6833      	ldrmi	r3, [r6, #0]
 8004c7e:	3302      	addmi	r3, #2
 8004c80:	6033      	strmi	r3, [r6, #0]
 8004c82:	6825      	ldr	r5, [r4, #0]
 8004c84:	f015 0506 	ands.w	r5, r5, #6
 8004c88:	d106      	bne.n	8004c98 <_printf_common+0x48>
 8004c8a:	f104 0a19 	add.w	sl, r4, #25
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	6832      	ldr	r2, [r6, #0]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	dc26      	bgt.n	8004ce6 <_printf_common+0x96>
 8004c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c9c:	1e13      	subs	r3, r2, #0
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	bf18      	it	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	0692      	lsls	r2, r2, #26
 8004ca6:	d42b      	bmi.n	8004d00 <_printf_common+0xb0>
 8004ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cac:	4649      	mov	r1, r9
 8004cae:	4638      	mov	r0, r7
 8004cb0:	47c0      	blx	r8
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d01e      	beq.n	8004cf4 <_printf_common+0xa4>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	68e5      	ldr	r5, [r4, #12]
 8004cba:	6832      	ldr	r2, [r6, #0]
 8004cbc:	f003 0306 	and.w	r3, r3, #6
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	bf08      	it	eq
 8004cc4:	1aad      	subeq	r5, r5, r2
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	6922      	ldr	r2, [r4, #16]
 8004cca:	bf0c      	ite	eq
 8004ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd0:	2500      	movne	r5, #0
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bfc4      	itt	gt
 8004cd6:	1a9b      	subgt	r3, r3, r2
 8004cd8:	18ed      	addgt	r5, r5, r3
 8004cda:	2600      	movs	r6, #0
 8004cdc:	341a      	adds	r4, #26
 8004cde:	42b5      	cmp	r5, r6
 8004ce0:	d11a      	bne.n	8004d18 <_printf_common+0xc8>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e008      	b.n	8004cf8 <_printf_common+0xa8>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4652      	mov	r2, sl
 8004cea:	4649      	mov	r1, r9
 8004cec:	4638      	mov	r0, r7
 8004cee:	47c0      	blx	r8
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d103      	bne.n	8004cfc <_printf_common+0xac>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	e7c6      	b.n	8004c8e <_printf_common+0x3e>
 8004d00:	18e1      	adds	r1, r4, r3
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	2030      	movs	r0, #48	; 0x30
 8004d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d0a:	4422      	add	r2, r4
 8004d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d14:	3302      	adds	r3, #2
 8004d16:	e7c7      	b.n	8004ca8 <_printf_common+0x58>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	4638      	mov	r0, r7
 8004d20:	47c0      	blx	r8
 8004d22:	3001      	adds	r0, #1
 8004d24:	d0e6      	beq.n	8004cf4 <_printf_common+0xa4>
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7d9      	b.n	8004cde <_printf_common+0x8e>
	...

08004d2c <_printf_i>:
 8004d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	460c      	mov	r4, r1
 8004d32:	4691      	mov	r9, r2
 8004d34:	7e27      	ldrb	r7, [r4, #24]
 8004d36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d38:	2f78      	cmp	r7, #120	; 0x78
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d42:	d807      	bhi.n	8004d54 <_printf_i+0x28>
 8004d44:	2f62      	cmp	r7, #98	; 0x62
 8004d46:	d80a      	bhi.n	8004d5e <_printf_i+0x32>
 8004d48:	2f00      	cmp	r7, #0
 8004d4a:	f000 80d8 	beq.w	8004efe <_printf_i+0x1d2>
 8004d4e:	2f58      	cmp	r7, #88	; 0x58
 8004d50:	f000 80a3 	beq.w	8004e9a <_printf_i+0x16e>
 8004d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d5c:	e03a      	b.n	8004dd4 <_printf_i+0xa8>
 8004d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d62:	2b15      	cmp	r3, #21
 8004d64:	d8f6      	bhi.n	8004d54 <_printf_i+0x28>
 8004d66:	a001      	add	r0, pc, #4	; (adr r0, 8004d6c <_printf_i+0x40>)
 8004d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d6c:	08004dc5 	.word	0x08004dc5
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004d55 	.word	0x08004d55
 8004d78:	08004d55 	.word	0x08004d55
 8004d7c:	08004d55 	.word	0x08004d55
 8004d80:	08004d55 	.word	0x08004d55
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d55 	.word	0x08004d55
 8004d8c:	08004d55 	.word	0x08004d55
 8004d90:	08004d55 	.word	0x08004d55
 8004d94:	08004d55 	.word	0x08004d55
 8004d98:	08004ee5 	.word	0x08004ee5
 8004d9c:	08004e09 	.word	0x08004e09
 8004da0:	08004ec7 	.word	0x08004ec7
 8004da4:	08004d55 	.word	0x08004d55
 8004da8:	08004d55 	.word	0x08004d55
 8004dac:	08004f07 	.word	0x08004f07
 8004db0:	08004d55 	.word	0x08004d55
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004d55 	.word	0x08004d55
 8004dbc:	08004d55 	.word	0x08004d55
 8004dc0:	08004ecf 	.word	0x08004ecf
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	600a      	str	r2, [r1, #0]
 8004dcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0a3      	b.n	8004f20 <_printf_i+0x1f4>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	6808      	ldr	r0, [r1, #0]
 8004ddc:	062e      	lsls	r6, r5, #24
 8004dde:	f100 0304 	add.w	r3, r0, #4
 8004de2:	d50a      	bpl.n	8004dfa <_printf_i+0xce>
 8004de4:	6805      	ldr	r5, [r0, #0]
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	da03      	bge.n	8004df4 <_printf_i+0xc8>
 8004dec:	232d      	movs	r3, #45	; 0x2d
 8004dee:	426d      	negs	r5, r5
 8004df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df4:	485e      	ldr	r0, [pc, #376]	; (8004f70 <_printf_i+0x244>)
 8004df6:	230a      	movs	r3, #10
 8004df8:	e019      	b.n	8004e2e <_printf_i+0x102>
 8004dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dfe:	6805      	ldr	r5, [r0, #0]
 8004e00:	600b      	str	r3, [r1, #0]
 8004e02:	bf18      	it	ne
 8004e04:	b22d      	sxthne	r5, r5
 8004e06:	e7ef      	b.n	8004de8 <_printf_i+0xbc>
 8004e08:	680b      	ldr	r3, [r1, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	1d18      	adds	r0, r3, #4
 8004e0e:	6008      	str	r0, [r1, #0]
 8004e10:	0628      	lsls	r0, r5, #24
 8004e12:	d501      	bpl.n	8004e18 <_printf_i+0xec>
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <_printf_i+0xf2>
 8004e18:	0669      	lsls	r1, r5, #25
 8004e1a:	d5fb      	bpl.n	8004e14 <_printf_i+0xe8>
 8004e1c:	881d      	ldrh	r5, [r3, #0]
 8004e1e:	4854      	ldr	r0, [pc, #336]	; (8004f70 <_printf_i+0x244>)
 8004e20:	2f6f      	cmp	r7, #111	; 0x6f
 8004e22:	bf0c      	ite	eq
 8004e24:	2308      	moveq	r3, #8
 8004e26:	230a      	movne	r3, #10
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e2e:	6866      	ldr	r6, [r4, #4]
 8004e30:	60a6      	str	r6, [r4, #8]
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	bfa2      	ittt	ge
 8004e36:	6821      	ldrge	r1, [r4, #0]
 8004e38:	f021 0104 	bicge.w	r1, r1, #4
 8004e3c:	6021      	strge	r1, [r4, #0]
 8004e3e:	b90d      	cbnz	r5, 8004e44 <_printf_i+0x118>
 8004e40:	2e00      	cmp	r6, #0
 8004e42:	d04d      	beq.n	8004ee0 <_printf_i+0x1b4>
 8004e44:	4616      	mov	r6, r2
 8004e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e4e:	5dc7      	ldrb	r7, [r0, r7]
 8004e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e54:	462f      	mov	r7, r5
 8004e56:	42bb      	cmp	r3, r7
 8004e58:	460d      	mov	r5, r1
 8004e5a:	d9f4      	bls.n	8004e46 <_printf_i+0x11a>
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d10b      	bne.n	8004e78 <_printf_i+0x14c>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	07df      	lsls	r7, r3, #31
 8004e64:	d508      	bpl.n	8004e78 <_printf_i+0x14c>
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	6861      	ldr	r1, [r4, #4]
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	bfde      	ittt	le
 8004e6e:	2330      	movle	r3, #48	; 0x30
 8004e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e78:	1b92      	subs	r2, r2, r6
 8004e7a:	6122      	str	r2, [r4, #16]
 8004e7c:	f8cd a000 	str.w	sl, [sp]
 8004e80:	464b      	mov	r3, r9
 8004e82:	aa03      	add	r2, sp, #12
 8004e84:	4621      	mov	r1, r4
 8004e86:	4640      	mov	r0, r8
 8004e88:	f7ff fee2 	bl	8004c50 <_printf_common>
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d14c      	bne.n	8004f2a <_printf_i+0x1fe>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	b004      	add	sp, #16
 8004e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9a:	4835      	ldr	r0, [pc, #212]	; (8004f70 <_printf_i+0x244>)
 8004e9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	680e      	ldr	r6, [r1, #0]
 8004ea4:	061f      	lsls	r7, r3, #24
 8004ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004eaa:	600e      	str	r6, [r1, #0]
 8004eac:	d514      	bpl.n	8004ed8 <_printf_i+0x1ac>
 8004eae:	07d9      	lsls	r1, r3, #31
 8004eb0:	bf44      	itt	mi
 8004eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8004eb6:	6023      	strmi	r3, [r4, #0]
 8004eb8:	b91d      	cbnz	r5, 8004ec2 <_printf_i+0x196>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f023 0320 	bic.w	r3, r3, #32
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	e7b0      	b.n	8004e28 <_printf_i+0xfc>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f043 0320 	orr.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	2378      	movs	r3, #120	; 0x78
 8004ed0:	4828      	ldr	r0, [pc, #160]	; (8004f74 <_printf_i+0x248>)
 8004ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ed6:	e7e3      	b.n	8004ea0 <_printf_i+0x174>
 8004ed8:	065e      	lsls	r6, r3, #25
 8004eda:	bf48      	it	mi
 8004edc:	b2ad      	uxthmi	r5, r5
 8004ede:	e7e6      	b.n	8004eae <_printf_i+0x182>
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	e7bb      	b.n	8004e5c <_printf_i+0x130>
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	6826      	ldr	r6, [r4, #0]
 8004ee8:	6960      	ldr	r0, [r4, #20]
 8004eea:	1d1d      	adds	r5, r3, #4
 8004eec:	600d      	str	r5, [r1, #0]
 8004eee:	0635      	lsls	r5, r6, #24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0x1cc>
 8004ef4:	6018      	str	r0, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0x1d2>
 8004ef8:	0671      	lsls	r1, r6, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0x1c8>
 8004efc:	8018      	strh	r0, [r3, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	4616      	mov	r6, r2
 8004f04:	e7ba      	b.n	8004e7c <_printf_i+0x150>
 8004f06:	680b      	ldr	r3, [r1, #0]
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	600a      	str	r2, [r1, #0]
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7fb f964 	bl	80001e0 <memchr>
 8004f18:	b108      	cbz	r0, 8004f1e <_printf_i+0x1f2>
 8004f1a:	1b80      	subs	r0, r0, r6
 8004f1c:	6060      	str	r0, [r4, #4]
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f28:	e7a8      	b.n	8004e7c <_printf_i+0x150>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0ab      	beq.n	8004e90 <_printf_i+0x164>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	079b      	lsls	r3, r3, #30
 8004f3c:	d413      	bmi.n	8004f66 <_printf_i+0x23a>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	4298      	cmp	r0, r3
 8004f44:	bfb8      	it	lt
 8004f46:	4618      	movlt	r0, r3
 8004f48:	e7a4      	b.n	8004e94 <_printf_i+0x168>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	47d0      	blx	sl
 8004f54:	3001      	adds	r0, #1
 8004f56:	d09b      	beq.n	8004e90 <_printf_i+0x164>
 8004f58:	3501      	adds	r5, #1
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9903      	ldr	r1, [sp, #12]
 8004f5e:	1a5b      	subs	r3, r3, r1
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dcf2      	bgt.n	8004f4a <_printf_i+0x21e>
 8004f64:	e7eb      	b.n	8004f3e <_printf_i+0x212>
 8004f66:	2500      	movs	r5, #0
 8004f68:	f104 0619 	add.w	r6, r4, #25
 8004f6c:	e7f5      	b.n	8004f5a <_printf_i+0x22e>
 8004f6e:	bf00      	nop
 8004f70:	08007442 	.word	0x08007442
 8004f74:	08007453 	.word	0x08007453

08004f78 <siprintf>:
 8004f78:	b40e      	push	{r1, r2, r3}
 8004f7a:	b500      	push	{lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f80:	9002      	str	r0, [sp, #8]
 8004f82:	9006      	str	r0, [sp, #24]
 8004f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f88:	4809      	ldr	r0, [pc, #36]	; (8004fb0 <siprintf+0x38>)
 8004f8a:	9107      	str	r1, [sp, #28]
 8004f8c:	9104      	str	r1, [sp, #16]
 8004f8e:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <siprintf+0x3c>)
 8004f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	a902      	add	r1, sp, #8
 8004f9c:	f001 fb3e 	bl	800661c <_svfiprintf_r>
 8004fa0:	9b02      	ldr	r3, [sp, #8]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	b01c      	add	sp, #112	; 0x70
 8004fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fac:	b003      	add	sp, #12
 8004fae:	4770      	bx	lr
 8004fb0:	20000008 	.word	0x20000008
 8004fb4:	ffff0208 	.word	0xffff0208

08004fb8 <strchr>:
 8004fb8:	b2c9      	uxtb	r1, r1
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc0:	b11a      	cbz	r2, 8004fca <strchr+0x12>
 8004fc2:	428a      	cmp	r2, r1
 8004fc4:	d1f9      	bne.n	8004fba <strchr+0x2>
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	4770      	bx	lr
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	bf18      	it	ne
 8004fce:	2300      	movne	r3, #0
 8004fd0:	e7f9      	b.n	8004fc6 <strchr+0xe>

08004fd2 <quorem>:
 8004fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	6903      	ldr	r3, [r0, #16]
 8004fd8:	690c      	ldr	r4, [r1, #16]
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	4607      	mov	r7, r0
 8004fde:	f2c0 8081 	blt.w	80050e4 <quorem+0x112>
 8004fe2:	3c01      	subs	r4, #1
 8004fe4:	f101 0814 	add.w	r8, r1, #20
 8004fe8:	f100 0514 	add.w	r5, r0, #20
 8004fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005006:	fbb2 f6f3 	udiv	r6, r2, r3
 800500a:	d331      	bcc.n	8005070 <quorem+0x9e>
 800500c:	f04f 0e00 	mov.w	lr, #0
 8005010:	4640      	mov	r0, r8
 8005012:	46ac      	mov	ip, r5
 8005014:	46f2      	mov	sl, lr
 8005016:	f850 2b04 	ldr.w	r2, [r0], #4
 800501a:	b293      	uxth	r3, r2
 800501c:	fb06 e303 	mla	r3, r6, r3, lr
 8005020:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005024:	b29b      	uxth	r3, r3
 8005026:	ebaa 0303 	sub.w	r3, sl, r3
 800502a:	0c12      	lsrs	r2, r2, #16
 800502c:	f8dc a000 	ldr.w	sl, [ip]
 8005030:	fb06 e202 	mla	r2, r6, r2, lr
 8005034:	fa13 f38a 	uxtah	r3, r3, sl
 8005038:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800503c:	fa1f fa82 	uxth.w	sl, r2
 8005040:	f8dc 2000 	ldr.w	r2, [ip]
 8005044:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800504c:	b29b      	uxth	r3, r3
 800504e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005052:	4581      	cmp	r9, r0
 8005054:	f84c 3b04 	str.w	r3, [ip], #4
 8005058:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800505c:	d2db      	bcs.n	8005016 <quorem+0x44>
 800505e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005062:	b92b      	cbnz	r3, 8005070 <quorem+0x9e>
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	3b04      	subs	r3, #4
 8005068:	429d      	cmp	r5, r3
 800506a:	461a      	mov	r2, r3
 800506c:	d32e      	bcc.n	80050cc <quorem+0xfa>
 800506e:	613c      	str	r4, [r7, #16]
 8005070:	4638      	mov	r0, r7
 8005072:	f001 f8bd 	bl	80061f0 <__mcmp>
 8005076:	2800      	cmp	r0, #0
 8005078:	db24      	blt.n	80050c4 <quorem+0xf2>
 800507a:	3601      	adds	r6, #1
 800507c:	4628      	mov	r0, r5
 800507e:	f04f 0c00 	mov.w	ip, #0
 8005082:	f858 2b04 	ldr.w	r2, [r8], #4
 8005086:	f8d0 e000 	ldr.w	lr, [r0]
 800508a:	b293      	uxth	r3, r2
 800508c:	ebac 0303 	sub.w	r3, ip, r3
 8005090:	0c12      	lsrs	r2, r2, #16
 8005092:	fa13 f38e 	uxtah	r3, r3, lr
 8005096:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800509a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800509e:	b29b      	uxth	r3, r3
 80050a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050a4:	45c1      	cmp	r9, r8
 80050a6:	f840 3b04 	str.w	r3, [r0], #4
 80050aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050ae:	d2e8      	bcs.n	8005082 <quorem+0xb0>
 80050b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050b8:	b922      	cbnz	r2, 80050c4 <quorem+0xf2>
 80050ba:	3b04      	subs	r3, #4
 80050bc:	429d      	cmp	r5, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	d30a      	bcc.n	80050d8 <quorem+0x106>
 80050c2:	613c      	str	r4, [r7, #16]
 80050c4:	4630      	mov	r0, r6
 80050c6:	b003      	add	sp, #12
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	3b04      	subs	r3, #4
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	d1cc      	bne.n	800506e <quorem+0x9c>
 80050d4:	3c01      	subs	r4, #1
 80050d6:	e7c7      	b.n	8005068 <quorem+0x96>
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	3b04      	subs	r3, #4
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d1f0      	bne.n	80050c2 <quorem+0xf0>
 80050e0:	3c01      	subs	r4, #1
 80050e2:	e7eb      	b.n	80050bc <quorem+0xea>
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7ee      	b.n	80050c6 <quorem+0xf4>

080050e8 <_dtoa_r>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	ed2d 8b02 	vpush	{d8}
 80050f0:	ec57 6b10 	vmov	r6, r7, d0
 80050f4:	b095      	sub	sp, #84	; 0x54
 80050f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050fc:	9105      	str	r1, [sp, #20]
 80050fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005102:	4604      	mov	r4, r0
 8005104:	9209      	str	r2, [sp, #36]	; 0x24
 8005106:	930f      	str	r3, [sp, #60]	; 0x3c
 8005108:	b975      	cbnz	r5, 8005128 <_dtoa_r+0x40>
 800510a:	2010      	movs	r0, #16
 800510c:	f000 fddc 	bl	8005cc8 <malloc>
 8005110:	4602      	mov	r2, r0
 8005112:	6260      	str	r0, [r4, #36]	; 0x24
 8005114:	b920      	cbnz	r0, 8005120 <_dtoa_r+0x38>
 8005116:	4bb2      	ldr	r3, [pc, #712]	; (80053e0 <_dtoa_r+0x2f8>)
 8005118:	21ea      	movs	r1, #234	; 0xea
 800511a:	48b2      	ldr	r0, [pc, #712]	; (80053e4 <_dtoa_r+0x2fc>)
 800511c:	f001 fb8e 	bl	800683c <__assert_func>
 8005120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005124:	6005      	str	r5, [r0, #0]
 8005126:	60c5      	str	r5, [r0, #12]
 8005128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	b151      	cbz	r1, 8005144 <_dtoa_r+0x5c>
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	604a      	str	r2, [r1, #4]
 8005132:	2301      	movs	r3, #1
 8005134:	4093      	lsls	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fe1b 	bl	8005d74 <_Bfree>
 800513e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	1e3b      	subs	r3, r7, #0
 8005146:	bfb9      	ittee	lt
 8005148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800514c:	9303      	strlt	r3, [sp, #12]
 800514e:	2300      	movge	r3, #0
 8005150:	f8c8 3000 	strge.w	r3, [r8]
 8005154:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005158:	4ba3      	ldr	r3, [pc, #652]	; (80053e8 <_dtoa_r+0x300>)
 800515a:	bfbc      	itt	lt
 800515c:	2201      	movlt	r2, #1
 800515e:	f8c8 2000 	strlt.w	r2, [r8]
 8005162:	ea33 0309 	bics.w	r3, r3, r9
 8005166:	d11b      	bne.n	80051a0 <_dtoa_r+0xb8>
 8005168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800516a:	f242 730f 	movw	r3, #9999	; 0x270f
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005174:	4333      	orrs	r3, r6
 8005176:	f000 857a 	beq.w	8005c6e <_dtoa_r+0xb86>
 800517a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800517c:	b963      	cbnz	r3, 8005198 <_dtoa_r+0xb0>
 800517e:	4b9b      	ldr	r3, [pc, #620]	; (80053ec <_dtoa_r+0x304>)
 8005180:	e024      	b.n	80051cc <_dtoa_r+0xe4>
 8005182:	4b9b      	ldr	r3, [pc, #620]	; (80053f0 <_dtoa_r+0x308>)
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	9800      	ldr	r0, [sp, #0]
 800518e:	b015      	add	sp, #84	; 0x54
 8005190:	ecbd 8b02 	vpop	{d8}
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	4b94      	ldr	r3, [pc, #592]	; (80053ec <_dtoa_r+0x304>)
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	3303      	adds	r3, #3
 800519e:	e7f3      	b.n	8005188 <_dtoa_r+0xa0>
 80051a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	ec51 0b17 	vmov	r0, r1, d7
 80051aa:	2300      	movs	r3, #0
 80051ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80051b0:	f7fb fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80051b4:	4680      	mov	r8, r0
 80051b6:	b158      	cbz	r0, 80051d0 <_dtoa_r+0xe8>
 80051b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051ba:	2301      	movs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8551 	beq.w	8005c68 <_dtoa_r+0xb80>
 80051c6:	488b      	ldr	r0, [pc, #556]	; (80053f4 <_dtoa_r+0x30c>)
 80051c8:	6018      	str	r0, [r3, #0]
 80051ca:	1e43      	subs	r3, r0, #1
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	e7dd      	b.n	800518c <_dtoa_r+0xa4>
 80051d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80051d4:	aa12      	add	r2, sp, #72	; 0x48
 80051d6:	a913      	add	r1, sp, #76	; 0x4c
 80051d8:	4620      	mov	r0, r4
 80051da:	f001 f8ad 	bl	8006338 <__d2b>
 80051de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80051e2:	4683      	mov	fp, r0
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	d07c      	beq.n	80052e2 <_dtoa_r+0x1fa>
 80051e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80051ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80051f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80051fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80051fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005202:	4b7d      	ldr	r3, [pc, #500]	; (80053f8 <_dtoa_r+0x310>)
 8005204:	2200      	movs	r2, #0
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb f83d 	bl	8000288 <__aeabi_dsub>
 800520e:	a36e      	add	r3, pc, #440	; (adr r3, 80053c8 <_dtoa_r+0x2e0>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb f9f0 	bl	80005f8 <__aeabi_dmul>
 8005218:	a36d      	add	r3, pc, #436	; (adr r3, 80053d0 <_dtoa_r+0x2e8>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f835 	bl	800028c <__adddf3>
 8005222:	4606      	mov	r6, r0
 8005224:	4628      	mov	r0, r5
 8005226:	460f      	mov	r7, r1
 8005228:	f7fb f97c 	bl	8000524 <__aeabi_i2d>
 800522c:	a36a      	add	r3, pc, #424	; (adr r3, 80053d8 <_dtoa_r+0x2f0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f9e1 	bl	80005f8 <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb f825 	bl	800028c <__adddf3>
 8005242:	4606      	mov	r6, r0
 8005244:	460f      	mov	r7, r1
 8005246:	f7fb fc87 	bl	8000b58 <__aeabi_d2iz>
 800524a:	2200      	movs	r2, #0
 800524c:	4682      	mov	sl, r0
 800524e:	2300      	movs	r3, #0
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fc42 	bl	8000adc <__aeabi_dcmplt>
 8005258:	b148      	cbz	r0, 800526e <_dtoa_r+0x186>
 800525a:	4650      	mov	r0, sl
 800525c:	f7fb f962 	bl	8000524 <__aeabi_i2d>
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	f7fb fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005268:	b908      	cbnz	r0, 800526e <_dtoa_r+0x186>
 800526a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800526e:	f1ba 0f16 	cmp.w	sl, #22
 8005272:	d854      	bhi.n	800531e <_dtoa_r+0x236>
 8005274:	4b61      	ldr	r3, [pc, #388]	; (80053fc <_dtoa_r+0x314>)
 8005276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005282:	f7fb fc2b 	bl	8000adc <__aeabi_dcmplt>
 8005286:	2800      	cmp	r0, #0
 8005288:	d04b      	beq.n	8005322 <_dtoa_r+0x23a>
 800528a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800528e:	2300      	movs	r3, #0
 8005290:	930e      	str	r3, [sp, #56]	; 0x38
 8005292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005294:	1b5d      	subs	r5, r3, r5
 8005296:	1e6b      	subs	r3, r5, #1
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	bf43      	ittte	mi
 800529c:	2300      	movmi	r3, #0
 800529e:	f1c5 0801 	rsbmi	r8, r5, #1
 80052a2:	9304      	strmi	r3, [sp, #16]
 80052a4:	f04f 0800 	movpl.w	r8, #0
 80052a8:	f1ba 0f00 	cmp.w	sl, #0
 80052ac:	db3b      	blt.n	8005326 <_dtoa_r+0x23e>
 80052ae:	9b04      	ldr	r3, [sp, #16]
 80052b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80052b4:	4453      	add	r3, sl
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9306      	str	r3, [sp, #24]
 80052bc:	9b05      	ldr	r3, [sp, #20]
 80052be:	2b09      	cmp	r3, #9
 80052c0:	d869      	bhi.n	8005396 <_dtoa_r+0x2ae>
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	bfc4      	itt	gt
 80052c6:	3b04      	subgt	r3, #4
 80052c8:	9305      	strgt	r3, [sp, #20]
 80052ca:	9b05      	ldr	r3, [sp, #20]
 80052cc:	f1a3 0302 	sub.w	r3, r3, #2
 80052d0:	bfcc      	ite	gt
 80052d2:	2500      	movgt	r5, #0
 80052d4:	2501      	movle	r5, #1
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d869      	bhi.n	80053ae <_dtoa_r+0x2c6>
 80052da:	e8df f003 	tbb	[pc, r3]
 80052de:	4e2c      	.short	0x4e2c
 80052e0:	5a4c      	.short	0x5a4c
 80052e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80052e6:	441d      	add	r5, r3
 80052e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	bfc1      	itttt	gt
 80052f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80052f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80052fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005300:	bfda      	itte	le
 8005302:	f1c3 0320 	rsble	r3, r3, #32
 8005306:	fa06 f003 	lslle.w	r0, r6, r3
 800530a:	4318      	orrgt	r0, r3
 800530c:	f7fb f8fa 	bl	8000504 <__aeabi_ui2d>
 8005310:	2301      	movs	r3, #1
 8005312:	4606      	mov	r6, r0
 8005314:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005318:	3d01      	subs	r5, #1
 800531a:	9310      	str	r3, [sp, #64]	; 0x40
 800531c:	e771      	b.n	8005202 <_dtoa_r+0x11a>
 800531e:	2301      	movs	r3, #1
 8005320:	e7b6      	b.n	8005290 <_dtoa_r+0x1a8>
 8005322:	900e      	str	r0, [sp, #56]	; 0x38
 8005324:	e7b5      	b.n	8005292 <_dtoa_r+0x1aa>
 8005326:	f1ca 0300 	rsb	r3, sl, #0
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	2300      	movs	r3, #0
 800532e:	eba8 080a 	sub.w	r8, r8, sl
 8005332:	930d      	str	r3, [sp, #52]	; 0x34
 8005334:	e7c2      	b.n	80052bc <_dtoa_r+0x1d4>
 8005336:	2300      	movs	r3, #0
 8005338:	9308      	str	r3, [sp, #32]
 800533a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	dc39      	bgt.n	80053b4 <_dtoa_r+0x2cc>
 8005340:	f04f 0901 	mov.w	r9, #1
 8005344:	f8cd 9004 	str.w	r9, [sp, #4]
 8005348:	464b      	mov	r3, r9
 800534a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800534e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005350:	2200      	movs	r2, #0
 8005352:	6042      	str	r2, [r0, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	f102 0614 	add.w	r6, r2, #20
 800535a:	429e      	cmp	r6, r3
 800535c:	6841      	ldr	r1, [r0, #4]
 800535e:	d92f      	bls.n	80053c0 <_dtoa_r+0x2d8>
 8005360:	4620      	mov	r0, r4
 8005362:	f000 fcc7 	bl	8005cf4 <_Balloc>
 8005366:	9000      	str	r0, [sp, #0]
 8005368:	2800      	cmp	r0, #0
 800536a:	d14b      	bne.n	8005404 <_dtoa_r+0x31c>
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <_dtoa_r+0x318>)
 800536e:	4602      	mov	r2, r0
 8005370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005374:	e6d1      	b.n	800511a <_dtoa_r+0x32>
 8005376:	2301      	movs	r3, #1
 8005378:	e7de      	b.n	8005338 <_dtoa_r+0x250>
 800537a:	2300      	movs	r3, #0
 800537c:	9308      	str	r3, [sp, #32]
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	eb0a 0903 	add.w	r9, sl, r3
 8005384:	f109 0301 	add.w	r3, r9, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	bfb8      	it	lt
 800538e:	2301      	movlt	r3, #1
 8005390:	e7dd      	b.n	800534e <_dtoa_r+0x266>
 8005392:	2301      	movs	r3, #1
 8005394:	e7f2      	b.n	800537c <_dtoa_r+0x294>
 8005396:	2501      	movs	r5, #1
 8005398:	2300      	movs	r3, #0
 800539a:	9305      	str	r3, [sp, #20]
 800539c:	9508      	str	r5, [sp, #32]
 800539e:	f04f 39ff 	mov.w	r9, #4294967295
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80053a8:	2312      	movs	r3, #18
 80053aa:	9209      	str	r2, [sp, #36]	; 0x24
 80053ac:	e7cf      	b.n	800534e <_dtoa_r+0x266>
 80053ae:	2301      	movs	r3, #1
 80053b0:	9308      	str	r3, [sp, #32]
 80053b2:	e7f4      	b.n	800539e <_dtoa_r+0x2b6>
 80053b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80053b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80053bc:	464b      	mov	r3, r9
 80053be:	e7c6      	b.n	800534e <_dtoa_r+0x266>
 80053c0:	3101      	adds	r1, #1
 80053c2:	6041      	str	r1, [r0, #4]
 80053c4:	0052      	lsls	r2, r2, #1
 80053c6:	e7c6      	b.n	8005356 <_dtoa_r+0x26e>
 80053c8:	636f4361 	.word	0x636f4361
 80053cc:	3fd287a7 	.word	0x3fd287a7
 80053d0:	8b60c8b3 	.word	0x8b60c8b3
 80053d4:	3fc68a28 	.word	0x3fc68a28
 80053d8:	509f79fb 	.word	0x509f79fb
 80053dc:	3fd34413 	.word	0x3fd34413
 80053e0:	08007471 	.word	0x08007471
 80053e4:	08007488 	.word	0x08007488
 80053e8:	7ff00000 	.word	0x7ff00000
 80053ec:	0800746d 	.word	0x0800746d
 80053f0:	08007464 	.word	0x08007464
 80053f4:	08007441 	.word	0x08007441
 80053f8:	3ff80000 	.word	0x3ff80000
 80053fc:	08007580 	.word	0x08007580
 8005400:	080074e7 	.word	0x080074e7
 8005404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005406:	9a00      	ldr	r2, [sp, #0]
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	9b01      	ldr	r3, [sp, #4]
 800540c:	2b0e      	cmp	r3, #14
 800540e:	f200 80ad 	bhi.w	800556c <_dtoa_r+0x484>
 8005412:	2d00      	cmp	r5, #0
 8005414:	f000 80aa 	beq.w	800556c <_dtoa_r+0x484>
 8005418:	f1ba 0f00 	cmp.w	sl, #0
 800541c:	dd36      	ble.n	800548c <_dtoa_r+0x3a4>
 800541e:	4ac3      	ldr	r2, [pc, #780]	; (800572c <_dtoa_r+0x644>)
 8005420:	f00a 030f 	and.w	r3, sl, #15
 8005424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005428:	ed93 7b00 	vldr	d7, [r3]
 800542c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005430:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005434:	eeb0 8a47 	vmov.f32	s16, s14
 8005438:	eef0 8a67 	vmov.f32	s17, s15
 800543c:	d016      	beq.n	800546c <_dtoa_r+0x384>
 800543e:	4bbc      	ldr	r3, [pc, #752]	; (8005730 <_dtoa_r+0x648>)
 8005440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005448:	f7fb fa00 	bl	800084c <__aeabi_ddiv>
 800544c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005450:	f007 070f 	and.w	r7, r7, #15
 8005454:	2503      	movs	r5, #3
 8005456:	4eb6      	ldr	r6, [pc, #728]	; (8005730 <_dtoa_r+0x648>)
 8005458:	b957      	cbnz	r7, 8005470 <_dtoa_r+0x388>
 800545a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800545e:	ec53 2b18 	vmov	r2, r3, d8
 8005462:	f7fb f9f3 	bl	800084c <__aeabi_ddiv>
 8005466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800546a:	e029      	b.n	80054c0 <_dtoa_r+0x3d8>
 800546c:	2502      	movs	r5, #2
 800546e:	e7f2      	b.n	8005456 <_dtoa_r+0x36e>
 8005470:	07f9      	lsls	r1, r7, #31
 8005472:	d508      	bpl.n	8005486 <_dtoa_r+0x39e>
 8005474:	ec51 0b18 	vmov	r0, r1, d8
 8005478:	e9d6 2300 	ldrd	r2, r3, [r6]
 800547c:	f7fb f8bc 	bl	80005f8 <__aeabi_dmul>
 8005480:	ec41 0b18 	vmov	d8, r0, r1
 8005484:	3501      	adds	r5, #1
 8005486:	107f      	asrs	r7, r7, #1
 8005488:	3608      	adds	r6, #8
 800548a:	e7e5      	b.n	8005458 <_dtoa_r+0x370>
 800548c:	f000 80a6 	beq.w	80055dc <_dtoa_r+0x4f4>
 8005490:	f1ca 0600 	rsb	r6, sl, #0
 8005494:	4ba5      	ldr	r3, [pc, #660]	; (800572c <_dtoa_r+0x644>)
 8005496:	4fa6      	ldr	r7, [pc, #664]	; (8005730 <_dtoa_r+0x648>)
 8005498:	f006 020f 	and.w	r2, r6, #15
 800549c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054a8:	f7fb f8a6 	bl	80005f8 <__aeabi_dmul>
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	1136      	asrs	r6, r6, #4
 80054b2:	2300      	movs	r3, #0
 80054b4:	2502      	movs	r5, #2
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	f040 8085 	bne.w	80055c6 <_dtoa_r+0x4de>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1d2      	bne.n	8005466 <_dtoa_r+0x37e>
 80054c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 808c 	beq.w	80055e0 <_dtoa_r+0x4f8>
 80054c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054cc:	4b99      	ldr	r3, [pc, #612]	; (8005734 <_dtoa_r+0x64c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fb fb02 	bl	8000adc <__aeabi_dcmplt>
 80054d8:	2800      	cmp	r0, #0
 80054da:	f000 8081 	beq.w	80055e0 <_dtoa_r+0x4f8>
 80054de:	9b01      	ldr	r3, [sp, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d07d      	beq.n	80055e0 <_dtoa_r+0x4f8>
 80054e4:	f1b9 0f00 	cmp.w	r9, #0
 80054e8:	dd3c      	ble.n	8005564 <_dtoa_r+0x47c>
 80054ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	2200      	movs	r2, #0
 80054f2:	4b91      	ldr	r3, [pc, #580]	; (8005738 <_dtoa_r+0x650>)
 80054f4:	4630      	mov	r0, r6
 80054f6:	4639      	mov	r1, r7
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005500:	3501      	adds	r5, #1
 8005502:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800550a:	4628      	mov	r0, r5
 800550c:	f7fb f80a 	bl	8000524 <__aeabi_i2d>
 8005510:	4632      	mov	r2, r6
 8005512:	463b      	mov	r3, r7
 8005514:	f7fb f870 	bl	80005f8 <__aeabi_dmul>
 8005518:	4b88      	ldr	r3, [pc, #544]	; (800573c <_dtoa_r+0x654>)
 800551a:	2200      	movs	r2, #0
 800551c:	f7fa feb6 	bl	800028c <__adddf3>
 8005520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005528:	9303      	str	r3, [sp, #12]
 800552a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800552c:	2b00      	cmp	r3, #0
 800552e:	d15c      	bne.n	80055ea <_dtoa_r+0x502>
 8005530:	4b83      	ldr	r3, [pc, #524]	; (8005740 <_dtoa_r+0x658>)
 8005532:	2200      	movs	r2, #0
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fa fea6 	bl	8000288 <__aeabi_dsub>
 800553c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005540:	4606      	mov	r6, r0
 8005542:	460f      	mov	r7, r1
 8005544:	f7fb fae8 	bl	8000b18 <__aeabi_dcmpgt>
 8005548:	2800      	cmp	r0, #0
 800554a:	f040 8296 	bne.w	8005a7a <_dtoa_r+0x992>
 800554e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005552:	4630      	mov	r0, r6
 8005554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005558:	4639      	mov	r1, r7
 800555a:	f7fb fabf 	bl	8000adc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 8288 	bne.w	8005a74 <_dtoa_r+0x98c>
 8005564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800556c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800556e:	2b00      	cmp	r3, #0
 8005570:	f2c0 8158 	blt.w	8005824 <_dtoa_r+0x73c>
 8005574:	f1ba 0f0e 	cmp.w	sl, #14
 8005578:	f300 8154 	bgt.w	8005824 <_dtoa_r+0x73c>
 800557c:	4b6b      	ldr	r3, [pc, #428]	; (800572c <_dtoa_r+0x644>)
 800557e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	f280 80e3 	bge.w	8005754 <_dtoa_r+0x66c>
 800558e:	9b01      	ldr	r3, [sp, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f300 80df 	bgt.w	8005754 <_dtoa_r+0x66c>
 8005596:	f040 826d 	bne.w	8005a74 <_dtoa_r+0x98c>
 800559a:	4b69      	ldr	r3, [pc, #420]	; (8005740 <_dtoa_r+0x658>)
 800559c:	2200      	movs	r2, #0
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fb f829 	bl	80005f8 <__aeabi_dmul>
 80055a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055aa:	f7fb faab 	bl	8000b04 <__aeabi_dcmpge>
 80055ae:	9e01      	ldr	r6, [sp, #4]
 80055b0:	4637      	mov	r7, r6
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 8243 	bne.w	8005a3e <_dtoa_r+0x956>
 80055b8:	9d00      	ldr	r5, [sp, #0]
 80055ba:	2331      	movs	r3, #49	; 0x31
 80055bc:	f805 3b01 	strb.w	r3, [r5], #1
 80055c0:	f10a 0a01 	add.w	sl, sl, #1
 80055c4:	e23f      	b.n	8005a46 <_dtoa_r+0x95e>
 80055c6:	07f2      	lsls	r2, r6, #31
 80055c8:	d505      	bpl.n	80055d6 <_dtoa_r+0x4ee>
 80055ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ce:	f7fb f813 	bl	80005f8 <__aeabi_dmul>
 80055d2:	3501      	adds	r5, #1
 80055d4:	2301      	movs	r3, #1
 80055d6:	1076      	asrs	r6, r6, #1
 80055d8:	3708      	adds	r7, #8
 80055da:	e76c      	b.n	80054b6 <_dtoa_r+0x3ce>
 80055dc:	2502      	movs	r5, #2
 80055de:	e76f      	b.n	80054c0 <_dtoa_r+0x3d8>
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80055e6:	930c      	str	r3, [sp, #48]	; 0x30
 80055e8:	e78d      	b.n	8005506 <_dtoa_r+0x41e>
 80055ea:	9900      	ldr	r1, [sp, #0]
 80055ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055f0:	4b4e      	ldr	r3, [pc, #312]	; (800572c <_dtoa_r+0x644>)
 80055f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055f6:	4401      	add	r1, r0
 80055f8:	9102      	str	r1, [sp, #8]
 80055fa:	9908      	ldr	r1, [sp, #32]
 80055fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005600:	eef0 8a67 	vmov.f32	s17, s15
 8005604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005608:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800560c:	2900      	cmp	r1, #0
 800560e:	d045      	beq.n	800569c <_dtoa_r+0x5b4>
 8005610:	494c      	ldr	r1, [pc, #304]	; (8005744 <_dtoa_r+0x65c>)
 8005612:	2000      	movs	r0, #0
 8005614:	f7fb f91a 	bl	800084c <__aeabi_ddiv>
 8005618:	ec53 2b18 	vmov	r2, r3, d8
 800561c:	f7fa fe34 	bl	8000288 <__aeabi_dsub>
 8005620:	9d00      	ldr	r5, [sp, #0]
 8005622:	ec41 0b18 	vmov	d8, r0, r1
 8005626:	4639      	mov	r1, r7
 8005628:	4630      	mov	r0, r6
 800562a:	f7fb fa95 	bl	8000b58 <__aeabi_d2iz>
 800562e:	900c      	str	r0, [sp, #48]	; 0x30
 8005630:	f7fa ff78 	bl	8000524 <__aeabi_i2d>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa fe24 	bl	8000288 <__aeabi_dsub>
 8005640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005642:	3330      	adds	r3, #48	; 0x30
 8005644:	f805 3b01 	strb.w	r3, [r5], #1
 8005648:	ec53 2b18 	vmov	r2, r3, d8
 800564c:	4606      	mov	r6, r0
 800564e:	460f      	mov	r7, r1
 8005650:	f7fb fa44 	bl	8000adc <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	d165      	bne.n	8005724 <_dtoa_r+0x63c>
 8005658:	4632      	mov	r2, r6
 800565a:	463b      	mov	r3, r7
 800565c:	4935      	ldr	r1, [pc, #212]	; (8005734 <_dtoa_r+0x64c>)
 800565e:	2000      	movs	r0, #0
 8005660:	f7fa fe12 	bl	8000288 <__aeabi_dsub>
 8005664:	ec53 2b18 	vmov	r2, r3, d8
 8005668:	f7fb fa38 	bl	8000adc <__aeabi_dcmplt>
 800566c:	2800      	cmp	r0, #0
 800566e:	f040 80b9 	bne.w	80057e4 <_dtoa_r+0x6fc>
 8005672:	9b02      	ldr	r3, [sp, #8]
 8005674:	429d      	cmp	r5, r3
 8005676:	f43f af75 	beq.w	8005564 <_dtoa_r+0x47c>
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <_dtoa_r+0x650>)
 800567c:	ec51 0b18 	vmov	r0, r1, d8
 8005680:	2200      	movs	r2, #0
 8005682:	f7fa ffb9 	bl	80005f8 <__aeabi_dmul>
 8005686:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <_dtoa_r+0x650>)
 8005688:	ec41 0b18 	vmov	d8, r0, r1
 800568c:	2200      	movs	r2, #0
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	4606      	mov	r6, r0
 8005698:	460f      	mov	r7, r1
 800569a:	e7c4      	b.n	8005626 <_dtoa_r+0x53e>
 800569c:	ec51 0b17 	vmov	r0, r1, d7
 80056a0:	f7fa ffaa 	bl	80005f8 <__aeabi_dmul>
 80056a4:	9b02      	ldr	r3, [sp, #8]
 80056a6:	9d00      	ldr	r5, [sp, #0]
 80056a8:	930c      	str	r3, [sp, #48]	; 0x30
 80056aa:	ec41 0b18 	vmov	d8, r0, r1
 80056ae:	4639      	mov	r1, r7
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7fb fa51 	bl	8000b58 <__aeabi_d2iz>
 80056b6:	9011      	str	r0, [sp, #68]	; 0x44
 80056b8:	f7fa ff34 	bl	8000524 <__aeabi_i2d>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4630      	mov	r0, r6
 80056c2:	4639      	mov	r1, r7
 80056c4:	f7fa fde0 	bl	8000288 <__aeabi_dsub>
 80056c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056ca:	3330      	adds	r3, #48	; 0x30
 80056cc:	f805 3b01 	strb.w	r3, [r5], #1
 80056d0:	9b02      	ldr	r3, [sp, #8]
 80056d2:	429d      	cmp	r5, r3
 80056d4:	4606      	mov	r6, r0
 80056d6:	460f      	mov	r7, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	d134      	bne.n	8005748 <_dtoa_r+0x660>
 80056de:	4b19      	ldr	r3, [pc, #100]	; (8005744 <_dtoa_r+0x65c>)
 80056e0:	ec51 0b18 	vmov	r0, r1, d8
 80056e4:	f7fa fdd2 	bl	800028c <__adddf3>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4630      	mov	r0, r6
 80056ee:	4639      	mov	r1, r7
 80056f0:	f7fb fa12 	bl	8000b18 <__aeabi_dcmpgt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d175      	bne.n	80057e4 <_dtoa_r+0x6fc>
 80056f8:	ec53 2b18 	vmov	r2, r3, d8
 80056fc:	4911      	ldr	r1, [pc, #68]	; (8005744 <_dtoa_r+0x65c>)
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fa fdc2 	bl	8000288 <__aeabi_dsub>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb f9e6 	bl	8000adc <__aeabi_dcmplt>
 8005710:	2800      	cmp	r0, #0
 8005712:	f43f af27 	beq.w	8005564 <_dtoa_r+0x47c>
 8005716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005718:	1e6b      	subs	r3, r5, #1
 800571a:	930c      	str	r3, [sp, #48]	; 0x30
 800571c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d0f8      	beq.n	8005716 <_dtoa_r+0x62e>
 8005724:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005728:	e04a      	b.n	80057c0 <_dtoa_r+0x6d8>
 800572a:	bf00      	nop
 800572c:	08007580 	.word	0x08007580
 8005730:	08007558 	.word	0x08007558
 8005734:	3ff00000 	.word	0x3ff00000
 8005738:	40240000 	.word	0x40240000
 800573c:	401c0000 	.word	0x401c0000
 8005740:	40140000 	.word	0x40140000
 8005744:	3fe00000 	.word	0x3fe00000
 8005748:	4baf      	ldr	r3, [pc, #700]	; (8005a08 <_dtoa_r+0x920>)
 800574a:	f7fa ff55 	bl	80005f8 <__aeabi_dmul>
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	e7ac      	b.n	80056ae <_dtoa_r+0x5c6>
 8005754:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005758:	9d00      	ldr	r5, [sp, #0]
 800575a:	4642      	mov	r2, r8
 800575c:	464b      	mov	r3, r9
 800575e:	4630      	mov	r0, r6
 8005760:	4639      	mov	r1, r7
 8005762:	f7fb f873 	bl	800084c <__aeabi_ddiv>
 8005766:	f7fb f9f7 	bl	8000b58 <__aeabi_d2iz>
 800576a:	9002      	str	r0, [sp, #8]
 800576c:	f7fa feda 	bl	8000524 <__aeabi_i2d>
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4630      	mov	r0, r6
 800577e:	4639      	mov	r1, r7
 8005780:	f7fa fd82 	bl	8000288 <__aeabi_dsub>
 8005784:	9e02      	ldr	r6, [sp, #8]
 8005786:	9f01      	ldr	r7, [sp, #4]
 8005788:	3630      	adds	r6, #48	; 0x30
 800578a:	f805 6b01 	strb.w	r6, [r5], #1
 800578e:	9e00      	ldr	r6, [sp, #0]
 8005790:	1bae      	subs	r6, r5, r6
 8005792:	42b7      	cmp	r7, r6
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	d137      	bne.n	800580a <_dtoa_r+0x722>
 800579a:	f7fa fd77 	bl	800028c <__adddf3>
 800579e:	4642      	mov	r2, r8
 80057a0:	464b      	mov	r3, r9
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	f7fb f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 80057aa:	b9c8      	cbnz	r0, 80057e0 <_dtoa_r+0x6f8>
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fb f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80057b8:	b110      	cbz	r0, 80057c0 <_dtoa_r+0x6d8>
 80057ba:	9b02      	ldr	r3, [sp, #8]
 80057bc:	07d9      	lsls	r1, r3, #31
 80057be:	d40f      	bmi.n	80057e0 <_dtoa_r+0x6f8>
 80057c0:	4620      	mov	r0, r4
 80057c2:	4659      	mov	r1, fp
 80057c4:	f000 fad6 	bl	8005d74 <_Bfree>
 80057c8:	2300      	movs	r3, #0
 80057ca:	702b      	strb	r3, [r5, #0]
 80057cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ce:	f10a 0001 	add.w	r0, sl, #1
 80057d2:	6018      	str	r0, [r3, #0]
 80057d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f43f acd8 	beq.w	800518c <_dtoa_r+0xa4>
 80057dc:	601d      	str	r5, [r3, #0]
 80057de:	e4d5      	b.n	800518c <_dtoa_r+0xa4>
 80057e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80057e4:	462b      	mov	r3, r5
 80057e6:	461d      	mov	r5, r3
 80057e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ec:	2a39      	cmp	r2, #57	; 0x39
 80057ee:	d108      	bne.n	8005802 <_dtoa_r+0x71a>
 80057f0:	9a00      	ldr	r2, [sp, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d1f7      	bne.n	80057e6 <_dtoa_r+0x6fe>
 80057f6:	9a07      	ldr	r2, [sp, #28]
 80057f8:	9900      	ldr	r1, [sp, #0]
 80057fa:	3201      	adds	r2, #1
 80057fc:	9207      	str	r2, [sp, #28]
 80057fe:	2230      	movs	r2, #48	; 0x30
 8005800:	700a      	strb	r2, [r1, #0]
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	3201      	adds	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e78c      	b.n	8005724 <_dtoa_r+0x63c>
 800580a:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <_dtoa_r+0x920>)
 800580c:	2200      	movs	r2, #0
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	2200      	movs	r2, #0
 8005814:	2300      	movs	r3, #0
 8005816:	4606      	mov	r6, r0
 8005818:	460f      	mov	r7, r1
 800581a:	f7fb f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800581e:	2800      	cmp	r0, #0
 8005820:	d09b      	beq.n	800575a <_dtoa_r+0x672>
 8005822:	e7cd      	b.n	80057c0 <_dtoa_r+0x6d8>
 8005824:	9a08      	ldr	r2, [sp, #32]
 8005826:	2a00      	cmp	r2, #0
 8005828:	f000 80c4 	beq.w	80059b4 <_dtoa_r+0x8cc>
 800582c:	9a05      	ldr	r2, [sp, #20]
 800582e:	2a01      	cmp	r2, #1
 8005830:	f300 80a8 	bgt.w	8005984 <_dtoa_r+0x89c>
 8005834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005836:	2a00      	cmp	r2, #0
 8005838:	f000 80a0 	beq.w	800597c <_dtoa_r+0x894>
 800583c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005840:	9e06      	ldr	r6, [sp, #24]
 8005842:	4645      	mov	r5, r8
 8005844:	9a04      	ldr	r2, [sp, #16]
 8005846:	2101      	movs	r1, #1
 8005848:	441a      	add	r2, r3
 800584a:	4620      	mov	r0, r4
 800584c:	4498      	add	r8, r3
 800584e:	9204      	str	r2, [sp, #16]
 8005850:	f000 fb4c 	bl	8005eec <__i2b>
 8005854:	4607      	mov	r7, r0
 8005856:	2d00      	cmp	r5, #0
 8005858:	dd0b      	ble.n	8005872 <_dtoa_r+0x78a>
 800585a:	9b04      	ldr	r3, [sp, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd08      	ble.n	8005872 <_dtoa_r+0x78a>
 8005860:	42ab      	cmp	r3, r5
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	bfa8      	it	ge
 8005866:	462b      	movge	r3, r5
 8005868:	eba8 0803 	sub.w	r8, r8, r3
 800586c:	1aed      	subs	r5, r5, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9b06      	ldr	r3, [sp, #24]
 8005874:	b1fb      	cbz	r3, 80058b6 <_dtoa_r+0x7ce>
 8005876:	9b08      	ldr	r3, [sp, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 809f 	beq.w	80059bc <_dtoa_r+0x8d4>
 800587e:	2e00      	cmp	r6, #0
 8005880:	dd11      	ble.n	80058a6 <_dtoa_r+0x7be>
 8005882:	4639      	mov	r1, r7
 8005884:	4632      	mov	r2, r6
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fbec 	bl	8006064 <__pow5mult>
 800588c:	465a      	mov	r2, fp
 800588e:	4601      	mov	r1, r0
 8005890:	4607      	mov	r7, r0
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fb40 	bl	8005f18 <__multiply>
 8005898:	4659      	mov	r1, fp
 800589a:	9007      	str	r0, [sp, #28]
 800589c:	4620      	mov	r0, r4
 800589e:	f000 fa69 	bl	8005d74 <_Bfree>
 80058a2:	9b07      	ldr	r3, [sp, #28]
 80058a4:	469b      	mov	fp, r3
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	1b9a      	subs	r2, r3, r6
 80058aa:	d004      	beq.n	80058b6 <_dtoa_r+0x7ce>
 80058ac:	4659      	mov	r1, fp
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 fbd8 	bl	8006064 <__pow5mult>
 80058b4:	4683      	mov	fp, r0
 80058b6:	2101      	movs	r1, #1
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fb17 	bl	8005eec <__i2b>
 80058be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	4606      	mov	r6, r0
 80058c4:	dd7c      	ble.n	80059c0 <_dtoa_r+0x8d8>
 80058c6:	461a      	mov	r2, r3
 80058c8:	4601      	mov	r1, r0
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fbca 	bl	8006064 <__pow5mult>
 80058d0:	9b05      	ldr	r3, [sp, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	4606      	mov	r6, r0
 80058d6:	dd76      	ble.n	80059c6 <_dtoa_r+0x8de>
 80058d8:	2300      	movs	r3, #0
 80058da:	9306      	str	r3, [sp, #24]
 80058dc:	6933      	ldr	r3, [r6, #16]
 80058de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058e2:	6918      	ldr	r0, [r3, #16]
 80058e4:	f000 fab2 	bl	8005e4c <__hi0bits>
 80058e8:	f1c0 0020 	rsb	r0, r0, #32
 80058ec:	9b04      	ldr	r3, [sp, #16]
 80058ee:	4418      	add	r0, r3
 80058f0:	f010 001f 	ands.w	r0, r0, #31
 80058f4:	f000 8086 	beq.w	8005a04 <_dtoa_r+0x91c>
 80058f8:	f1c0 0320 	rsb	r3, r0, #32
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	dd7f      	ble.n	8005a00 <_dtoa_r+0x918>
 8005900:	f1c0 001c 	rsb	r0, r0, #28
 8005904:	9b04      	ldr	r3, [sp, #16]
 8005906:	4403      	add	r3, r0
 8005908:	4480      	add	r8, r0
 800590a:	4405      	add	r5, r0
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	f1b8 0f00 	cmp.w	r8, #0
 8005912:	dd05      	ble.n	8005920 <_dtoa_r+0x838>
 8005914:	4659      	mov	r1, fp
 8005916:	4642      	mov	r2, r8
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fbfd 	bl	8006118 <__lshift>
 800591e:	4683      	mov	fp, r0
 8005920:	9b04      	ldr	r3, [sp, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	dd05      	ble.n	8005932 <_dtoa_r+0x84a>
 8005926:	4631      	mov	r1, r6
 8005928:	461a      	mov	r2, r3
 800592a:	4620      	mov	r0, r4
 800592c:	f000 fbf4 	bl	8006118 <__lshift>
 8005930:	4606      	mov	r6, r0
 8005932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d069      	beq.n	8005a0c <_dtoa_r+0x924>
 8005938:	4631      	mov	r1, r6
 800593a:	4658      	mov	r0, fp
 800593c:	f000 fc58 	bl	80061f0 <__mcmp>
 8005940:	2800      	cmp	r0, #0
 8005942:	da63      	bge.n	8005a0c <_dtoa_r+0x924>
 8005944:	2300      	movs	r3, #0
 8005946:	4659      	mov	r1, fp
 8005948:	220a      	movs	r2, #10
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fa34 	bl	8005db8 <__multadd>
 8005950:	9b08      	ldr	r3, [sp, #32]
 8005952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005956:	4683      	mov	fp, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 818f 	beq.w	8005c7c <_dtoa_r+0xb94>
 800595e:	4639      	mov	r1, r7
 8005960:	2300      	movs	r3, #0
 8005962:	220a      	movs	r2, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fa27 	bl	8005db8 <__multadd>
 800596a:	f1b9 0f00 	cmp.w	r9, #0
 800596e:	4607      	mov	r7, r0
 8005970:	f300 808e 	bgt.w	8005a90 <_dtoa_r+0x9a8>
 8005974:	9b05      	ldr	r3, [sp, #20]
 8005976:	2b02      	cmp	r3, #2
 8005978:	dc50      	bgt.n	8005a1c <_dtoa_r+0x934>
 800597a:	e089      	b.n	8005a90 <_dtoa_r+0x9a8>
 800597c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800597e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005982:	e75d      	b.n	8005840 <_dtoa_r+0x758>
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	1e5e      	subs	r6, r3, #1
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	42b3      	cmp	r3, r6
 800598c:	bfbf      	itttt	lt
 800598e:	9b06      	ldrlt	r3, [sp, #24]
 8005990:	9606      	strlt	r6, [sp, #24]
 8005992:	1af2      	sublt	r2, r6, r3
 8005994:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005996:	bfb6      	itet	lt
 8005998:	189b      	addlt	r3, r3, r2
 800599a:	1b9e      	subge	r6, r3, r6
 800599c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	bfb8      	it	lt
 80059a2:	2600      	movlt	r6, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb5      	itete	lt
 80059a8:	eba8 0503 	sublt.w	r5, r8, r3
 80059ac:	9b01      	ldrge	r3, [sp, #4]
 80059ae:	2300      	movlt	r3, #0
 80059b0:	4645      	movge	r5, r8
 80059b2:	e747      	b.n	8005844 <_dtoa_r+0x75c>
 80059b4:	9e06      	ldr	r6, [sp, #24]
 80059b6:	9f08      	ldr	r7, [sp, #32]
 80059b8:	4645      	mov	r5, r8
 80059ba:	e74c      	b.n	8005856 <_dtoa_r+0x76e>
 80059bc:	9a06      	ldr	r2, [sp, #24]
 80059be:	e775      	b.n	80058ac <_dtoa_r+0x7c4>
 80059c0:	9b05      	ldr	r3, [sp, #20]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	dc18      	bgt.n	80059f8 <_dtoa_r+0x910>
 80059c6:	9b02      	ldr	r3, [sp, #8]
 80059c8:	b9b3      	cbnz	r3, 80059f8 <_dtoa_r+0x910>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	b9a3      	cbnz	r3, 80059fc <_dtoa_r+0x914>
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	051b      	lsls	r3, r3, #20
 80059dc:	b12b      	cbz	r3, 80059ea <_dtoa_r+0x902>
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	3301      	adds	r3, #1
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	2301      	movs	r3, #1
 80059ea:	9306      	str	r3, [sp, #24]
 80059ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f47f af74 	bne.w	80058dc <_dtoa_r+0x7f4>
 80059f4:	2001      	movs	r0, #1
 80059f6:	e779      	b.n	80058ec <_dtoa_r+0x804>
 80059f8:	2300      	movs	r3, #0
 80059fa:	e7f6      	b.n	80059ea <_dtoa_r+0x902>
 80059fc:	9b02      	ldr	r3, [sp, #8]
 80059fe:	e7f4      	b.n	80059ea <_dtoa_r+0x902>
 8005a00:	d085      	beq.n	800590e <_dtoa_r+0x826>
 8005a02:	4618      	mov	r0, r3
 8005a04:	301c      	adds	r0, #28
 8005a06:	e77d      	b.n	8005904 <_dtoa_r+0x81c>
 8005a08:	40240000 	.word	0x40240000
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dc38      	bgt.n	8005a84 <_dtoa_r+0x99c>
 8005a12:	9b05      	ldr	r3, [sp, #20]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	dd35      	ble.n	8005a84 <_dtoa_r+0x99c>
 8005a18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a1c:	f1b9 0f00 	cmp.w	r9, #0
 8005a20:	d10d      	bne.n	8005a3e <_dtoa_r+0x956>
 8005a22:	4631      	mov	r1, r6
 8005a24:	464b      	mov	r3, r9
 8005a26:	2205      	movs	r2, #5
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f9c5 	bl	8005db8 <__multadd>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4606      	mov	r6, r0
 8005a32:	4658      	mov	r0, fp
 8005a34:	f000 fbdc 	bl	80061f0 <__mcmp>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f73f adbd 	bgt.w	80055b8 <_dtoa_r+0x4d0>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	9d00      	ldr	r5, [sp, #0]
 8005a42:	ea6f 0a03 	mvn.w	sl, r3
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 f991 	bl	8005d74 <_Bfree>
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	f43f aeb4 	beq.w	80057c0 <_dtoa_r+0x6d8>
 8005a58:	f1b8 0f00 	cmp.w	r8, #0
 8005a5c:	d005      	beq.n	8005a6a <_dtoa_r+0x982>
 8005a5e:	45b8      	cmp	r8, r7
 8005a60:	d003      	beq.n	8005a6a <_dtoa_r+0x982>
 8005a62:	4641      	mov	r1, r8
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 f985 	bl	8005d74 <_Bfree>
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f981 	bl	8005d74 <_Bfree>
 8005a72:	e6a5      	b.n	80057c0 <_dtoa_r+0x6d8>
 8005a74:	2600      	movs	r6, #0
 8005a76:	4637      	mov	r7, r6
 8005a78:	e7e1      	b.n	8005a3e <_dtoa_r+0x956>
 8005a7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005a7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a80:	4637      	mov	r7, r6
 8005a82:	e599      	b.n	80055b8 <_dtoa_r+0x4d0>
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80fd 	beq.w	8005c8a <_dtoa_r+0xba2>
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	dd05      	ble.n	8005aa0 <_dtoa_r+0x9b8>
 8005a94:	4639      	mov	r1, r7
 8005a96:	462a      	mov	r2, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fb3d 	bl	8006118 <__lshift>
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05c      	beq.n	8005b60 <_dtoa_r+0xa78>
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f923 	bl	8005cf4 <_Balloc>
 8005aae:	4605      	mov	r5, r0
 8005ab0:	b928      	cbnz	r0, 8005abe <_dtoa_r+0x9d6>
 8005ab2:	4b80      	ldr	r3, [pc, #512]	; (8005cb4 <_dtoa_r+0xbcc>)
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005aba:	f7ff bb2e 	b.w	800511a <_dtoa_r+0x32>
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	3202      	adds	r2, #2
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	f107 010c 	add.w	r1, r7, #12
 8005ac8:	300c      	adds	r0, #12
 8005aca:	f000 f905 	bl	8005cd8 <memcpy>
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fb20 	bl	8006118 <__lshift>
 8005ad8:	9b00      	ldr	r3, [sp, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	444b      	add	r3, r9
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	9b02      	ldr	r3, [sp, #8]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	46b8      	mov	r8, r7
 8005aec:	9306      	str	r3, [sp, #24]
 8005aee:	4607      	mov	r7, r0
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	4631      	mov	r1, r6
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4658      	mov	r0, fp
 8005af8:	9302      	str	r3, [sp, #8]
 8005afa:	f7ff fa6a 	bl	8004fd2 <quorem>
 8005afe:	4603      	mov	r3, r0
 8005b00:	3330      	adds	r3, #48	; 0x30
 8005b02:	9004      	str	r0, [sp, #16]
 8005b04:	4641      	mov	r1, r8
 8005b06:	4658      	mov	r0, fp
 8005b08:	9308      	str	r3, [sp, #32]
 8005b0a:	f000 fb71 	bl	80061f0 <__mcmp>
 8005b0e:	463a      	mov	r2, r7
 8005b10:	4681      	mov	r9, r0
 8005b12:	4631      	mov	r1, r6
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fb87 	bl	8006228 <__mdiff>
 8005b1a:	68c2      	ldr	r2, [r0, #12]
 8005b1c:	9b08      	ldr	r3, [sp, #32]
 8005b1e:	4605      	mov	r5, r0
 8005b20:	bb02      	cbnz	r2, 8005b64 <_dtoa_r+0xa7c>
 8005b22:	4601      	mov	r1, r0
 8005b24:	4658      	mov	r0, fp
 8005b26:	f000 fb63 	bl	80061f0 <__mcmp>
 8005b2a:	9b08      	ldr	r3, [sp, #32]
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4620      	mov	r0, r4
 8005b32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005b36:	f000 f91d 	bl	8005d74 <_Bfree>
 8005b3a:	9b05      	ldr	r3, [sp, #20]
 8005b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3e:	9d01      	ldr	r5, [sp, #4]
 8005b40:	ea43 0102 	orr.w	r1, r3, r2
 8005b44:	9b06      	ldr	r3, [sp, #24]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	d10d      	bne.n	8005b68 <_dtoa_r+0xa80>
 8005b4c:	2b39      	cmp	r3, #57	; 0x39
 8005b4e:	d029      	beq.n	8005ba4 <_dtoa_r+0xabc>
 8005b50:	f1b9 0f00 	cmp.w	r9, #0
 8005b54:	dd01      	ble.n	8005b5a <_dtoa_r+0xa72>
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	3331      	adds	r3, #49	; 0x31
 8005b5a:	9a02      	ldr	r2, [sp, #8]
 8005b5c:	7013      	strb	r3, [r2, #0]
 8005b5e:	e774      	b.n	8005a4a <_dtoa_r+0x962>
 8005b60:	4638      	mov	r0, r7
 8005b62:	e7b9      	b.n	8005ad8 <_dtoa_r+0x9f0>
 8005b64:	2201      	movs	r2, #1
 8005b66:	e7e2      	b.n	8005b2e <_dtoa_r+0xa46>
 8005b68:	f1b9 0f00 	cmp.w	r9, #0
 8005b6c:	db06      	blt.n	8005b7c <_dtoa_r+0xa94>
 8005b6e:	9905      	ldr	r1, [sp, #20]
 8005b70:	ea41 0909 	orr.w	r9, r1, r9
 8005b74:	9906      	ldr	r1, [sp, #24]
 8005b76:	ea59 0101 	orrs.w	r1, r9, r1
 8005b7a:	d120      	bne.n	8005bbe <_dtoa_r+0xad6>
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	ddec      	ble.n	8005b5a <_dtoa_r+0xa72>
 8005b80:	4659      	mov	r1, fp
 8005b82:	2201      	movs	r2, #1
 8005b84:	4620      	mov	r0, r4
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	f000 fac6 	bl	8006118 <__lshift>
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4683      	mov	fp, r0
 8005b90:	f000 fb2e 	bl	80061f0 <__mcmp>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	dc02      	bgt.n	8005ba0 <_dtoa_r+0xab8>
 8005b9a:	d1de      	bne.n	8005b5a <_dtoa_r+0xa72>
 8005b9c:	07da      	lsls	r2, r3, #31
 8005b9e:	d5dc      	bpl.n	8005b5a <_dtoa_r+0xa72>
 8005ba0:	2b39      	cmp	r3, #57	; 0x39
 8005ba2:	d1d8      	bne.n	8005b56 <_dtoa_r+0xa6e>
 8005ba4:	9a02      	ldr	r2, [sp, #8]
 8005ba6:	2339      	movs	r3, #57	; 0x39
 8005ba8:	7013      	strb	r3, [r2, #0]
 8005baa:	462b      	mov	r3, r5
 8005bac:	461d      	mov	r5, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bb4:	2a39      	cmp	r2, #57	; 0x39
 8005bb6:	d050      	beq.n	8005c5a <_dtoa_r+0xb72>
 8005bb8:	3201      	adds	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e745      	b.n	8005a4a <_dtoa_r+0x962>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	dd03      	ble.n	8005bca <_dtoa_r+0xae2>
 8005bc2:	2b39      	cmp	r3, #57	; 0x39
 8005bc4:	d0ee      	beq.n	8005ba4 <_dtoa_r+0xabc>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	e7c7      	b.n	8005b5a <_dtoa_r+0xa72>
 8005bca:	9a01      	ldr	r2, [sp, #4]
 8005bcc:	9907      	ldr	r1, [sp, #28]
 8005bce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005bd2:	428a      	cmp	r2, r1
 8005bd4:	d02a      	beq.n	8005c2c <_dtoa_r+0xb44>
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	2300      	movs	r3, #0
 8005bda:	220a      	movs	r2, #10
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 f8eb 	bl	8005db8 <__multadd>
 8005be2:	45b8      	cmp	r8, r7
 8005be4:	4683      	mov	fp, r0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	f04f 020a 	mov.w	r2, #10
 8005bee:	4641      	mov	r1, r8
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	d107      	bne.n	8005c04 <_dtoa_r+0xb1c>
 8005bf4:	f000 f8e0 	bl	8005db8 <__multadd>
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	e775      	b.n	8005af0 <_dtoa_r+0xa08>
 8005c04:	f000 f8d8 	bl	8005db8 <__multadd>
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	220a      	movs	r2, #10
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f8d1 	bl	8005db8 <__multadd>
 8005c16:	4607      	mov	r7, r0
 8005c18:	e7f0      	b.n	8005bfc <_dtoa_r+0xb14>
 8005c1a:	f1b9 0f00 	cmp.w	r9, #0
 8005c1e:	9a00      	ldr	r2, [sp, #0]
 8005c20:	bfcc      	ite	gt
 8005c22:	464d      	movgt	r5, r9
 8005c24:	2501      	movle	r5, #1
 8005c26:	4415      	add	r5, r2
 8005c28:	f04f 0800 	mov.w	r8, #0
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4620      	mov	r0, r4
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	f000 fa70 	bl	8006118 <__lshift>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4683      	mov	fp, r0
 8005c3c:	f000 fad8 	bl	80061f0 <__mcmp>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	dcb2      	bgt.n	8005baa <_dtoa_r+0xac2>
 8005c44:	d102      	bne.n	8005c4c <_dtoa_r+0xb64>
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	07db      	lsls	r3, r3, #31
 8005c4a:	d4ae      	bmi.n	8005baa <_dtoa_r+0xac2>
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	461d      	mov	r5, r3
 8005c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c54:	2a30      	cmp	r2, #48	; 0x30
 8005c56:	d0fa      	beq.n	8005c4e <_dtoa_r+0xb66>
 8005c58:	e6f7      	b.n	8005a4a <_dtoa_r+0x962>
 8005c5a:	9a00      	ldr	r2, [sp, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1a5      	bne.n	8005bac <_dtoa_r+0xac4>
 8005c60:	f10a 0a01 	add.w	sl, sl, #1
 8005c64:	2331      	movs	r3, #49	; 0x31
 8005c66:	e779      	b.n	8005b5c <_dtoa_r+0xa74>
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <_dtoa_r+0xbd0>)
 8005c6a:	f7ff baaf 	b.w	80051cc <_dtoa_r+0xe4>
 8005c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f47f aa86 	bne.w	8005182 <_dtoa_r+0x9a>
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <_dtoa_r+0xbd4>)
 8005c78:	f7ff baa8 	b.w	80051cc <_dtoa_r+0xe4>
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	dc03      	bgt.n	8005c8a <_dtoa_r+0xba2>
 8005c82:	9b05      	ldr	r3, [sp, #20]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	f73f aec9 	bgt.w	8005a1c <_dtoa_r+0x934>
 8005c8a:	9d00      	ldr	r5, [sp, #0]
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4658      	mov	r0, fp
 8005c90:	f7ff f99f 	bl	8004fd2 <quorem>
 8005c94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c98:	f805 3b01 	strb.w	r3, [r5], #1
 8005c9c:	9a00      	ldr	r2, [sp, #0]
 8005c9e:	1aaa      	subs	r2, r5, r2
 8005ca0:	4591      	cmp	r9, r2
 8005ca2:	ddba      	ble.n	8005c1a <_dtoa_r+0xb32>
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	220a      	movs	r2, #10
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 f884 	bl	8005db8 <__multadd>
 8005cb0:	4683      	mov	fp, r0
 8005cb2:	e7eb      	b.n	8005c8c <_dtoa_r+0xba4>
 8005cb4:	080074e7 	.word	0x080074e7
 8005cb8:	08007440 	.word	0x08007440
 8005cbc:	08007464 	.word	0x08007464

08005cc0 <_localeconv_r>:
 8005cc0:	4800      	ldr	r0, [pc, #0]	; (8005cc4 <_localeconv_r+0x4>)
 8005cc2:	4770      	bx	lr
 8005cc4:	2000015c 	.word	0x2000015c

08005cc8 <malloc>:
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <malloc+0xc>)
 8005cca:	4601      	mov	r1, r0
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f000 bbef 	b.w	80064b0 <_malloc_r>
 8005cd2:	bf00      	nop
 8005cd4:	20000008 	.word	0x20000008

08005cd8 <memcpy>:
 8005cd8:	440a      	add	r2, r1
 8005cda:	4291      	cmp	r1, r2
 8005cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce0:	d100      	bne.n	8005ce4 <memcpy+0xc>
 8005ce2:	4770      	bx	lr
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	d1f9      	bne.n	8005ce6 <memcpy+0xe>
 8005cf2:	bd10      	pop	{r4, pc}

08005cf4 <_Balloc>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	b976      	cbnz	r6, 8005d1c <_Balloc+0x28>
 8005cfe:	2010      	movs	r0, #16
 8005d00:	f7ff ffe2 	bl	8005cc8 <malloc>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6260      	str	r0, [r4, #36]	; 0x24
 8005d08:	b920      	cbnz	r0, 8005d14 <_Balloc+0x20>
 8005d0a:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <_Balloc+0x78>)
 8005d0c:	4818      	ldr	r0, [pc, #96]	; (8005d70 <_Balloc+0x7c>)
 8005d0e:	2166      	movs	r1, #102	; 0x66
 8005d10:	f000 fd94 	bl	800683c <__assert_func>
 8005d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d18:	6006      	str	r6, [r0, #0]
 8005d1a:	60c6      	str	r6, [r0, #12]
 8005d1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d1e:	68f3      	ldr	r3, [r6, #12]
 8005d20:	b183      	cbz	r3, 8005d44 <_Balloc+0x50>
 8005d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d2a:	b9b8      	cbnz	r0, 8005d5c <_Balloc+0x68>
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d32:	1d72      	adds	r2, r6, #5
 8005d34:	0092      	lsls	r2, r2, #2
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 fb5a 	bl	80063f0 <_calloc_r>
 8005d3c:	b160      	cbz	r0, 8005d58 <_Balloc+0x64>
 8005d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d42:	e00e      	b.n	8005d62 <_Balloc+0x6e>
 8005d44:	2221      	movs	r2, #33	; 0x21
 8005d46:	2104      	movs	r1, #4
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fb51 	bl	80063f0 <_calloc_r>
 8005d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d50:	60f0      	str	r0, [r6, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e4      	bne.n	8005d22 <_Balloc+0x2e>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	6802      	ldr	r2, [r0, #0]
 8005d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d62:	2300      	movs	r3, #0
 8005d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d68:	e7f7      	b.n	8005d5a <_Balloc+0x66>
 8005d6a:	bf00      	nop
 8005d6c:	08007471 	.word	0x08007471
 8005d70:	080074f8 	.word	0x080074f8

08005d74 <_Bfree>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b976      	cbnz	r6, 8005d9c <_Bfree+0x28>
 8005d7e:	2010      	movs	r0, #16
 8005d80:	f7ff ffa2 	bl	8005cc8 <malloc>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6268      	str	r0, [r5, #36]	; 0x24
 8005d88:	b920      	cbnz	r0, 8005d94 <_Bfree+0x20>
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <_Bfree+0x3c>)
 8005d8c:	4809      	ldr	r0, [pc, #36]	; (8005db4 <_Bfree+0x40>)
 8005d8e:	218a      	movs	r1, #138	; 0x8a
 8005d90:	f000 fd54 	bl	800683c <__assert_func>
 8005d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d98:	6006      	str	r6, [r0, #0]
 8005d9a:	60c6      	str	r6, [r0, #12]
 8005d9c:	b13c      	cbz	r4, 8005dae <_Bfree+0x3a>
 8005d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005da0:	6862      	ldr	r2, [r4, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005da8:	6021      	str	r1, [r4, #0]
 8005daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	08007471 	.word	0x08007471
 8005db4:	080074f8 	.word	0x080074f8

08005db8 <__multadd>:
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	690e      	ldr	r6, [r1, #16]
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	4698      	mov	r8, r3
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f101 0014 	add.w	r0, r1, #20
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6805      	ldr	r5, [r0, #0]
 8005dcc:	b2a9      	uxth	r1, r5
 8005dce:	fb02 8101 	mla	r1, r2, r1, r8
 8005dd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005dd6:	0c2d      	lsrs	r5, r5, #16
 8005dd8:	fb02 c505 	mla	r5, r2, r5, ip
 8005ddc:	b289      	uxth	r1, r1
 8005dde:	3301      	adds	r3, #1
 8005de0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005de4:	429e      	cmp	r6, r3
 8005de6:	f840 1b04 	str.w	r1, [r0], #4
 8005dea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005dee:	dcec      	bgt.n	8005dca <__multadd+0x12>
 8005df0:	f1b8 0f00 	cmp.w	r8, #0
 8005df4:	d022      	beq.n	8005e3c <__multadd+0x84>
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	42b3      	cmp	r3, r6
 8005dfa:	dc19      	bgt.n	8005e30 <__multadd+0x78>
 8005dfc:	6861      	ldr	r1, [r4, #4]
 8005dfe:	4638      	mov	r0, r7
 8005e00:	3101      	adds	r1, #1
 8005e02:	f7ff ff77 	bl	8005cf4 <_Balloc>
 8005e06:	4605      	mov	r5, r0
 8005e08:	b928      	cbnz	r0, 8005e16 <__multadd+0x5e>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <__multadd+0x8c>)
 8005e0e:	480e      	ldr	r0, [pc, #56]	; (8005e48 <__multadd+0x90>)
 8005e10:	21b5      	movs	r1, #181	; 0xb5
 8005e12:	f000 fd13 	bl	800683c <__assert_func>
 8005e16:	6922      	ldr	r2, [r4, #16]
 8005e18:	3202      	adds	r2, #2
 8005e1a:	f104 010c 	add.w	r1, r4, #12
 8005e1e:	0092      	lsls	r2, r2, #2
 8005e20:	300c      	adds	r0, #12
 8005e22:	f7ff ff59 	bl	8005cd8 <memcpy>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f7ff ffa3 	bl	8005d74 <_Bfree>
 8005e2e:	462c      	mov	r4, r5
 8005e30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e34:	3601      	adds	r6, #1
 8005e36:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e3a:	6126      	str	r6, [r4, #16]
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e42:	bf00      	nop
 8005e44:	080074e7 	.word	0x080074e7
 8005e48:	080074f8 	.word	0x080074f8

08005e4c <__hi0bits>:
 8005e4c:	0c03      	lsrs	r3, r0, #16
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	b9d3      	cbnz	r3, 8005e88 <__hi0bits+0x3c>
 8005e52:	0400      	lsls	r0, r0, #16
 8005e54:	2310      	movs	r3, #16
 8005e56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e5a:	bf04      	itt	eq
 8005e5c:	0200      	lsleq	r0, r0, #8
 8005e5e:	3308      	addeq	r3, #8
 8005e60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e64:	bf04      	itt	eq
 8005e66:	0100      	lsleq	r0, r0, #4
 8005e68:	3304      	addeq	r3, #4
 8005e6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e6e:	bf04      	itt	eq
 8005e70:	0080      	lsleq	r0, r0, #2
 8005e72:	3302      	addeq	r3, #2
 8005e74:	2800      	cmp	r0, #0
 8005e76:	db05      	blt.n	8005e84 <__hi0bits+0x38>
 8005e78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e7c:	f103 0301 	add.w	r3, r3, #1
 8005e80:	bf08      	it	eq
 8005e82:	2320      	moveq	r3, #32
 8005e84:	4618      	mov	r0, r3
 8005e86:	4770      	bx	lr
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e7e4      	b.n	8005e56 <__hi0bits+0xa>

08005e8c <__lo0bits>:
 8005e8c:	6803      	ldr	r3, [r0, #0]
 8005e8e:	f013 0207 	ands.w	r2, r3, #7
 8005e92:	4601      	mov	r1, r0
 8005e94:	d00b      	beq.n	8005eae <__lo0bits+0x22>
 8005e96:	07da      	lsls	r2, r3, #31
 8005e98:	d424      	bmi.n	8005ee4 <__lo0bits+0x58>
 8005e9a:	0798      	lsls	r0, r3, #30
 8005e9c:	bf49      	itett	mi
 8005e9e:	085b      	lsrmi	r3, r3, #1
 8005ea0:	089b      	lsrpl	r3, r3, #2
 8005ea2:	2001      	movmi	r0, #1
 8005ea4:	600b      	strmi	r3, [r1, #0]
 8005ea6:	bf5c      	itt	pl
 8005ea8:	600b      	strpl	r3, [r1, #0]
 8005eaa:	2002      	movpl	r0, #2
 8005eac:	4770      	bx	lr
 8005eae:	b298      	uxth	r0, r3
 8005eb0:	b9b0      	cbnz	r0, 8005ee0 <__lo0bits+0x54>
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	2010      	movs	r0, #16
 8005eb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005eba:	bf04      	itt	eq
 8005ebc:	0a1b      	lsreq	r3, r3, #8
 8005ebe:	3008      	addeq	r0, #8
 8005ec0:	071a      	lsls	r2, r3, #28
 8005ec2:	bf04      	itt	eq
 8005ec4:	091b      	lsreq	r3, r3, #4
 8005ec6:	3004      	addeq	r0, #4
 8005ec8:	079a      	lsls	r2, r3, #30
 8005eca:	bf04      	itt	eq
 8005ecc:	089b      	lsreq	r3, r3, #2
 8005ece:	3002      	addeq	r0, #2
 8005ed0:	07da      	lsls	r2, r3, #31
 8005ed2:	d403      	bmi.n	8005edc <__lo0bits+0x50>
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	f100 0001 	add.w	r0, r0, #1
 8005eda:	d005      	beq.n	8005ee8 <__lo0bits+0x5c>
 8005edc:	600b      	str	r3, [r1, #0]
 8005ede:	4770      	bx	lr
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	e7e8      	b.n	8005eb6 <__lo0bits+0x2a>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	4770      	bx	lr
 8005ee8:	2020      	movs	r0, #32
 8005eea:	4770      	bx	lr

08005eec <__i2b>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	460c      	mov	r4, r1
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	f7ff feff 	bl	8005cf4 <_Balloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__i2b+0x1a>
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <__i2b+0x24>)
 8005efc:	4805      	ldr	r0, [pc, #20]	; (8005f14 <__i2b+0x28>)
 8005efe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f02:	f000 fc9b 	bl	800683c <__assert_func>
 8005f06:	2301      	movs	r3, #1
 8005f08:	6144      	str	r4, [r0, #20]
 8005f0a:	6103      	str	r3, [r0, #16]
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	080074e7 	.word	0x080074e7
 8005f14:	080074f8 	.word	0x080074f8

08005f18 <__multiply>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	690a      	ldr	r2, [r1, #16]
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bfb8      	it	lt
 8005f26:	460b      	movlt	r3, r1
 8005f28:	460d      	mov	r5, r1
 8005f2a:	bfbc      	itt	lt
 8005f2c:	4625      	movlt	r5, r4
 8005f2e:	461c      	movlt	r4, r3
 8005f30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f38:	68ab      	ldr	r3, [r5, #8]
 8005f3a:	6869      	ldr	r1, [r5, #4]
 8005f3c:	eb0a 0709 	add.w	r7, sl, r9
 8005f40:	42bb      	cmp	r3, r7
 8005f42:	b085      	sub	sp, #20
 8005f44:	bfb8      	it	lt
 8005f46:	3101      	addlt	r1, #1
 8005f48:	f7ff fed4 	bl	8005cf4 <_Balloc>
 8005f4c:	b930      	cbnz	r0, 8005f5c <__multiply+0x44>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <__multiply+0x144>)
 8005f52:	4843      	ldr	r0, [pc, #268]	; (8006060 <__multiply+0x148>)
 8005f54:	f240 115d 	movw	r1, #349	; 0x15d
 8005f58:	f000 fc70 	bl	800683c <__assert_func>
 8005f5c:	f100 0614 	add.w	r6, r0, #20
 8005f60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005f64:	4633      	mov	r3, r6
 8005f66:	2200      	movs	r2, #0
 8005f68:	4543      	cmp	r3, r8
 8005f6a:	d31e      	bcc.n	8005faa <__multiply+0x92>
 8005f6c:	f105 0c14 	add.w	ip, r5, #20
 8005f70:	f104 0314 	add.w	r3, r4, #20
 8005f74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005f78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005f7c:	9202      	str	r2, [sp, #8]
 8005f7e:	ebac 0205 	sub.w	r2, ip, r5
 8005f82:	3a15      	subs	r2, #21
 8005f84:	f022 0203 	bic.w	r2, r2, #3
 8005f88:	3204      	adds	r2, #4
 8005f8a:	f105 0115 	add.w	r1, r5, #21
 8005f8e:	458c      	cmp	ip, r1
 8005f90:	bf38      	it	cc
 8005f92:	2204      	movcc	r2, #4
 8005f94:	9201      	str	r2, [sp, #4]
 8005f96:	9a02      	ldr	r2, [sp, #8]
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d808      	bhi.n	8005fb0 <__multiply+0x98>
 8005f9e:	2f00      	cmp	r7, #0
 8005fa0:	dc55      	bgt.n	800604e <__multiply+0x136>
 8005fa2:	6107      	str	r7, [r0, #16]
 8005fa4:	b005      	add	sp, #20
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	f843 2b04 	str.w	r2, [r3], #4
 8005fae:	e7db      	b.n	8005f68 <__multiply+0x50>
 8005fb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fb4:	f1ba 0f00 	cmp.w	sl, #0
 8005fb8:	d020      	beq.n	8005ffc <__multiply+0xe4>
 8005fba:	f105 0e14 	add.w	lr, r5, #20
 8005fbe:	46b1      	mov	r9, r6
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005fc6:	f8d9 b000 	ldr.w	fp, [r9]
 8005fca:	b2a1      	uxth	r1, r4
 8005fcc:	fa1f fb8b 	uxth.w	fp, fp
 8005fd0:	fb0a b101 	mla	r1, sl, r1, fp
 8005fd4:	4411      	add	r1, r2
 8005fd6:	f8d9 2000 	ldr.w	r2, [r9]
 8005fda:	0c24      	lsrs	r4, r4, #16
 8005fdc:	0c12      	lsrs	r2, r2, #16
 8005fde:	fb0a 2404 	mla	r4, sl, r4, r2
 8005fe2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005fe6:	b289      	uxth	r1, r1
 8005fe8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005fec:	45f4      	cmp	ip, lr
 8005fee:	f849 1b04 	str.w	r1, [r9], #4
 8005ff2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005ff6:	d8e4      	bhi.n	8005fc2 <__multiply+0xaa>
 8005ff8:	9901      	ldr	r1, [sp, #4]
 8005ffa:	5072      	str	r2, [r6, r1]
 8005ffc:	9a03      	ldr	r2, [sp, #12]
 8005ffe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006002:	3304      	adds	r3, #4
 8006004:	f1b9 0f00 	cmp.w	r9, #0
 8006008:	d01f      	beq.n	800604a <__multiply+0x132>
 800600a:	6834      	ldr	r4, [r6, #0]
 800600c:	f105 0114 	add.w	r1, r5, #20
 8006010:	46b6      	mov	lr, r6
 8006012:	f04f 0a00 	mov.w	sl, #0
 8006016:	880a      	ldrh	r2, [r1, #0]
 8006018:	f8be b002 	ldrh.w	fp, [lr, #2]
 800601c:	fb09 b202 	mla	r2, r9, r2, fp
 8006020:	4492      	add	sl, r2
 8006022:	b2a4      	uxth	r4, r4
 8006024:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006028:	f84e 4b04 	str.w	r4, [lr], #4
 800602c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006030:	f8be 2000 	ldrh.w	r2, [lr]
 8006034:	0c24      	lsrs	r4, r4, #16
 8006036:	fb09 2404 	mla	r4, r9, r4, r2
 800603a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800603e:	458c      	cmp	ip, r1
 8006040:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006044:	d8e7      	bhi.n	8006016 <__multiply+0xfe>
 8006046:	9a01      	ldr	r2, [sp, #4]
 8006048:	50b4      	str	r4, [r6, r2]
 800604a:	3604      	adds	r6, #4
 800604c:	e7a3      	b.n	8005f96 <__multiply+0x7e>
 800604e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1a5      	bne.n	8005fa2 <__multiply+0x8a>
 8006056:	3f01      	subs	r7, #1
 8006058:	e7a1      	b.n	8005f9e <__multiply+0x86>
 800605a:	bf00      	nop
 800605c:	080074e7 	.word	0x080074e7
 8006060:	080074f8 	.word	0x080074f8

08006064 <__pow5mult>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4615      	mov	r5, r2
 800606a:	f012 0203 	ands.w	r2, r2, #3
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	d007      	beq.n	8006084 <__pow5mult+0x20>
 8006074:	4c25      	ldr	r4, [pc, #148]	; (800610c <__pow5mult+0xa8>)
 8006076:	3a01      	subs	r2, #1
 8006078:	2300      	movs	r3, #0
 800607a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800607e:	f7ff fe9b 	bl	8005db8 <__multadd>
 8006082:	4607      	mov	r7, r0
 8006084:	10ad      	asrs	r5, r5, #2
 8006086:	d03d      	beq.n	8006104 <__pow5mult+0xa0>
 8006088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800608a:	b97c      	cbnz	r4, 80060ac <__pow5mult+0x48>
 800608c:	2010      	movs	r0, #16
 800608e:	f7ff fe1b 	bl	8005cc8 <malloc>
 8006092:	4602      	mov	r2, r0
 8006094:	6270      	str	r0, [r6, #36]	; 0x24
 8006096:	b928      	cbnz	r0, 80060a4 <__pow5mult+0x40>
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <__pow5mult+0xac>)
 800609a:	481e      	ldr	r0, [pc, #120]	; (8006114 <__pow5mult+0xb0>)
 800609c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060a0:	f000 fbcc 	bl	800683c <__assert_func>
 80060a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060a8:	6004      	str	r4, [r0, #0]
 80060aa:	60c4      	str	r4, [r0, #12]
 80060ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060b4:	b94c      	cbnz	r4, 80060ca <__pow5mult+0x66>
 80060b6:	f240 2171 	movw	r1, #625	; 0x271
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff16 	bl	8005eec <__i2b>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80060c6:	4604      	mov	r4, r0
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	f04f 0900 	mov.w	r9, #0
 80060ce:	07eb      	lsls	r3, r5, #31
 80060d0:	d50a      	bpl.n	80060e8 <__pow5mult+0x84>
 80060d2:	4639      	mov	r1, r7
 80060d4:	4622      	mov	r2, r4
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff1e 	bl	8005f18 <__multiply>
 80060dc:	4639      	mov	r1, r7
 80060de:	4680      	mov	r8, r0
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff fe47 	bl	8005d74 <_Bfree>
 80060e6:	4647      	mov	r7, r8
 80060e8:	106d      	asrs	r5, r5, #1
 80060ea:	d00b      	beq.n	8006104 <__pow5mult+0xa0>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	b938      	cbnz	r0, 8006100 <__pow5mult+0x9c>
 80060f0:	4622      	mov	r2, r4
 80060f2:	4621      	mov	r1, r4
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff ff0f 	bl	8005f18 <__multiply>
 80060fa:	6020      	str	r0, [r4, #0]
 80060fc:	f8c0 9000 	str.w	r9, [r0]
 8006100:	4604      	mov	r4, r0
 8006102:	e7e4      	b.n	80060ce <__pow5mult+0x6a>
 8006104:	4638      	mov	r0, r7
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	bf00      	nop
 800610c:	08007648 	.word	0x08007648
 8006110:	08007471 	.word	0x08007471
 8006114:	080074f8 	.word	0x080074f8

08006118 <__lshift>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	6849      	ldr	r1, [r1, #4]
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	4607      	mov	r7, r0
 800612a:	4691      	mov	r9, r2
 800612c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006130:	f108 0601 	add.w	r6, r8, #1
 8006134:	42b3      	cmp	r3, r6
 8006136:	db0b      	blt.n	8006150 <__lshift+0x38>
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff fddb 	bl	8005cf4 <_Balloc>
 800613e:	4605      	mov	r5, r0
 8006140:	b948      	cbnz	r0, 8006156 <__lshift+0x3e>
 8006142:	4602      	mov	r2, r0
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <__lshift+0xd0>)
 8006146:	4829      	ldr	r0, [pc, #164]	; (80061ec <__lshift+0xd4>)
 8006148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800614c:	f000 fb76 	bl	800683c <__assert_func>
 8006150:	3101      	adds	r1, #1
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	e7ee      	b.n	8006134 <__lshift+0x1c>
 8006156:	2300      	movs	r3, #0
 8006158:	f100 0114 	add.w	r1, r0, #20
 800615c:	f100 0210 	add.w	r2, r0, #16
 8006160:	4618      	mov	r0, r3
 8006162:	4553      	cmp	r3, sl
 8006164:	db33      	blt.n	80061ce <__lshift+0xb6>
 8006166:	6920      	ldr	r0, [r4, #16]
 8006168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800616c:	f104 0314 	add.w	r3, r4, #20
 8006170:	f019 091f 	ands.w	r9, r9, #31
 8006174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800617c:	d02b      	beq.n	80061d6 <__lshift+0xbe>
 800617e:	f1c9 0e20 	rsb	lr, r9, #32
 8006182:	468a      	mov	sl, r1
 8006184:	2200      	movs	r2, #0
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	fa00 f009 	lsl.w	r0, r0, r9
 800618c:	4302      	orrs	r2, r0
 800618e:	f84a 2b04 	str.w	r2, [sl], #4
 8006192:	f853 2b04 	ldr.w	r2, [r3], #4
 8006196:	459c      	cmp	ip, r3
 8006198:	fa22 f20e 	lsr.w	r2, r2, lr
 800619c:	d8f3      	bhi.n	8006186 <__lshift+0x6e>
 800619e:	ebac 0304 	sub.w	r3, ip, r4
 80061a2:	3b15      	subs	r3, #21
 80061a4:	f023 0303 	bic.w	r3, r3, #3
 80061a8:	3304      	adds	r3, #4
 80061aa:	f104 0015 	add.w	r0, r4, #21
 80061ae:	4584      	cmp	ip, r0
 80061b0:	bf38      	it	cc
 80061b2:	2304      	movcc	r3, #4
 80061b4:	50ca      	str	r2, [r1, r3]
 80061b6:	b10a      	cbz	r2, 80061bc <__lshift+0xa4>
 80061b8:	f108 0602 	add.w	r6, r8, #2
 80061bc:	3e01      	subs	r6, #1
 80061be:	4638      	mov	r0, r7
 80061c0:	612e      	str	r6, [r5, #16]
 80061c2:	4621      	mov	r1, r4
 80061c4:	f7ff fdd6 	bl	8005d74 <_Bfree>
 80061c8:	4628      	mov	r0, r5
 80061ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80061d2:	3301      	adds	r3, #1
 80061d4:	e7c5      	b.n	8006162 <__lshift+0x4a>
 80061d6:	3904      	subs	r1, #4
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80061e0:	459c      	cmp	ip, r3
 80061e2:	d8f9      	bhi.n	80061d8 <__lshift+0xc0>
 80061e4:	e7ea      	b.n	80061bc <__lshift+0xa4>
 80061e6:	bf00      	nop
 80061e8:	080074e7 	.word	0x080074e7
 80061ec:	080074f8 	.word	0x080074f8

080061f0 <__mcmp>:
 80061f0:	b530      	push	{r4, r5, lr}
 80061f2:	6902      	ldr	r2, [r0, #16]
 80061f4:	690c      	ldr	r4, [r1, #16]
 80061f6:	1b12      	subs	r2, r2, r4
 80061f8:	d10e      	bne.n	8006218 <__mcmp+0x28>
 80061fa:	f100 0314 	add.w	r3, r0, #20
 80061fe:	3114      	adds	r1, #20
 8006200:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006204:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006208:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800620c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006210:	42a5      	cmp	r5, r4
 8006212:	d003      	beq.n	800621c <__mcmp+0x2c>
 8006214:	d305      	bcc.n	8006222 <__mcmp+0x32>
 8006216:	2201      	movs	r2, #1
 8006218:	4610      	mov	r0, r2
 800621a:	bd30      	pop	{r4, r5, pc}
 800621c:	4283      	cmp	r3, r0
 800621e:	d3f3      	bcc.n	8006208 <__mcmp+0x18>
 8006220:	e7fa      	b.n	8006218 <__mcmp+0x28>
 8006222:	f04f 32ff 	mov.w	r2, #4294967295
 8006226:	e7f7      	b.n	8006218 <__mcmp+0x28>

08006228 <__mdiff>:
 8006228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	460c      	mov	r4, r1
 800622e:	4606      	mov	r6, r0
 8006230:	4611      	mov	r1, r2
 8006232:	4620      	mov	r0, r4
 8006234:	4617      	mov	r7, r2
 8006236:	f7ff ffdb 	bl	80061f0 <__mcmp>
 800623a:	1e05      	subs	r5, r0, #0
 800623c:	d110      	bne.n	8006260 <__mdiff+0x38>
 800623e:	4629      	mov	r1, r5
 8006240:	4630      	mov	r0, r6
 8006242:	f7ff fd57 	bl	8005cf4 <_Balloc>
 8006246:	b930      	cbnz	r0, 8006256 <__mdiff+0x2e>
 8006248:	4b39      	ldr	r3, [pc, #228]	; (8006330 <__mdiff+0x108>)
 800624a:	4602      	mov	r2, r0
 800624c:	f240 2132 	movw	r1, #562	; 0x232
 8006250:	4838      	ldr	r0, [pc, #224]	; (8006334 <__mdiff+0x10c>)
 8006252:	f000 faf3 	bl	800683c <__assert_func>
 8006256:	2301      	movs	r3, #1
 8006258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800625c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006260:	bfa4      	itt	ge
 8006262:	463b      	movge	r3, r7
 8006264:	4627      	movge	r7, r4
 8006266:	4630      	mov	r0, r6
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	bfa6      	itte	ge
 800626c:	461c      	movge	r4, r3
 800626e:	2500      	movge	r5, #0
 8006270:	2501      	movlt	r5, #1
 8006272:	f7ff fd3f 	bl	8005cf4 <_Balloc>
 8006276:	b920      	cbnz	r0, 8006282 <__mdiff+0x5a>
 8006278:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <__mdiff+0x108>)
 800627a:	4602      	mov	r2, r0
 800627c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006280:	e7e6      	b.n	8006250 <__mdiff+0x28>
 8006282:	693e      	ldr	r6, [r7, #16]
 8006284:	60c5      	str	r5, [r0, #12]
 8006286:	6925      	ldr	r5, [r4, #16]
 8006288:	f107 0114 	add.w	r1, r7, #20
 800628c:	f104 0914 	add.w	r9, r4, #20
 8006290:	f100 0e14 	add.w	lr, r0, #20
 8006294:	f107 0210 	add.w	r2, r7, #16
 8006298:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800629c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80062a0:	46f2      	mov	sl, lr
 80062a2:	2700      	movs	r7, #0
 80062a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80062a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062ac:	fa1f f883 	uxth.w	r8, r3
 80062b0:	fa17 f78b 	uxtah	r7, r7, fp
 80062b4:	0c1b      	lsrs	r3, r3, #16
 80062b6:	eba7 0808 	sub.w	r8, r7, r8
 80062ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062c2:	fa1f f888 	uxth.w	r8, r8
 80062c6:	141f      	asrs	r7, r3, #16
 80062c8:	454d      	cmp	r5, r9
 80062ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062ce:	f84a 3b04 	str.w	r3, [sl], #4
 80062d2:	d8e7      	bhi.n	80062a4 <__mdiff+0x7c>
 80062d4:	1b2b      	subs	r3, r5, r4
 80062d6:	3b15      	subs	r3, #21
 80062d8:	f023 0303 	bic.w	r3, r3, #3
 80062dc:	3304      	adds	r3, #4
 80062de:	3415      	adds	r4, #21
 80062e0:	42a5      	cmp	r5, r4
 80062e2:	bf38      	it	cc
 80062e4:	2304      	movcc	r3, #4
 80062e6:	4419      	add	r1, r3
 80062e8:	4473      	add	r3, lr
 80062ea:	469e      	mov	lr, r3
 80062ec:	460d      	mov	r5, r1
 80062ee:	4565      	cmp	r5, ip
 80062f0:	d30e      	bcc.n	8006310 <__mdiff+0xe8>
 80062f2:	f10c 0203 	add.w	r2, ip, #3
 80062f6:	1a52      	subs	r2, r2, r1
 80062f8:	f022 0203 	bic.w	r2, r2, #3
 80062fc:	3903      	subs	r1, #3
 80062fe:	458c      	cmp	ip, r1
 8006300:	bf38      	it	cc
 8006302:	2200      	movcc	r2, #0
 8006304:	441a      	add	r2, r3
 8006306:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800630a:	b17b      	cbz	r3, 800632c <__mdiff+0x104>
 800630c:	6106      	str	r6, [r0, #16]
 800630e:	e7a5      	b.n	800625c <__mdiff+0x34>
 8006310:	f855 8b04 	ldr.w	r8, [r5], #4
 8006314:	fa17 f488 	uxtah	r4, r7, r8
 8006318:	1422      	asrs	r2, r4, #16
 800631a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800631e:	b2a4      	uxth	r4, r4
 8006320:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006324:	f84e 4b04 	str.w	r4, [lr], #4
 8006328:	1417      	asrs	r7, r2, #16
 800632a:	e7e0      	b.n	80062ee <__mdiff+0xc6>
 800632c:	3e01      	subs	r6, #1
 800632e:	e7ea      	b.n	8006306 <__mdiff+0xde>
 8006330:	080074e7 	.word	0x080074e7
 8006334:	080074f8 	.word	0x080074f8

08006338 <__d2b>:
 8006338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800633c:	4689      	mov	r9, r1
 800633e:	2101      	movs	r1, #1
 8006340:	ec57 6b10 	vmov	r6, r7, d0
 8006344:	4690      	mov	r8, r2
 8006346:	f7ff fcd5 	bl	8005cf4 <_Balloc>
 800634a:	4604      	mov	r4, r0
 800634c:	b930      	cbnz	r0, 800635c <__d2b+0x24>
 800634e:	4602      	mov	r2, r0
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <__d2b+0xb0>)
 8006352:	4826      	ldr	r0, [pc, #152]	; (80063ec <__d2b+0xb4>)
 8006354:	f240 310a 	movw	r1, #778	; 0x30a
 8006358:	f000 fa70 	bl	800683c <__assert_func>
 800635c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006364:	bb35      	cbnz	r5, 80063b4 <__d2b+0x7c>
 8006366:	2e00      	cmp	r6, #0
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	d028      	beq.n	80063be <__d2b+0x86>
 800636c:	4668      	mov	r0, sp
 800636e:	9600      	str	r6, [sp, #0]
 8006370:	f7ff fd8c 	bl	8005e8c <__lo0bits>
 8006374:	9900      	ldr	r1, [sp, #0]
 8006376:	b300      	cbz	r0, 80063ba <__d2b+0x82>
 8006378:	9a01      	ldr	r2, [sp, #4]
 800637a:	f1c0 0320 	rsb	r3, r0, #32
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	430b      	orrs	r3, r1
 8006384:	40c2      	lsrs	r2, r0
 8006386:	6163      	str	r3, [r4, #20]
 8006388:	9201      	str	r2, [sp, #4]
 800638a:	9b01      	ldr	r3, [sp, #4]
 800638c:	61a3      	str	r3, [r4, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2202      	movne	r2, #2
 8006394:	2201      	moveq	r2, #1
 8006396:	6122      	str	r2, [r4, #16]
 8006398:	b1d5      	cbz	r5, 80063d0 <__d2b+0x98>
 800639a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800639e:	4405      	add	r5, r0
 80063a0:	f8c9 5000 	str.w	r5, [r9]
 80063a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063a8:	f8c8 0000 	str.w	r0, [r8]
 80063ac:	4620      	mov	r0, r4
 80063ae:	b003      	add	sp, #12
 80063b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b8:	e7d5      	b.n	8006366 <__d2b+0x2e>
 80063ba:	6161      	str	r1, [r4, #20]
 80063bc:	e7e5      	b.n	800638a <__d2b+0x52>
 80063be:	a801      	add	r0, sp, #4
 80063c0:	f7ff fd64 	bl	8005e8c <__lo0bits>
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	6163      	str	r3, [r4, #20]
 80063c8:	2201      	movs	r2, #1
 80063ca:	6122      	str	r2, [r4, #16]
 80063cc:	3020      	adds	r0, #32
 80063ce:	e7e3      	b.n	8006398 <__d2b+0x60>
 80063d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063d8:	f8c9 0000 	str.w	r0, [r9]
 80063dc:	6918      	ldr	r0, [r3, #16]
 80063de:	f7ff fd35 	bl	8005e4c <__hi0bits>
 80063e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063e6:	e7df      	b.n	80063a8 <__d2b+0x70>
 80063e8:	080074e7 	.word	0x080074e7
 80063ec:	080074f8 	.word	0x080074f8

080063f0 <_calloc_r>:
 80063f0:	b513      	push	{r0, r1, r4, lr}
 80063f2:	434a      	muls	r2, r1
 80063f4:	4611      	mov	r1, r2
 80063f6:	9201      	str	r2, [sp, #4]
 80063f8:	f000 f85a 	bl	80064b0 <_malloc_r>
 80063fc:	4604      	mov	r4, r0
 80063fe:	b118      	cbz	r0, 8006408 <_calloc_r+0x18>
 8006400:	9a01      	ldr	r2, [sp, #4]
 8006402:	2100      	movs	r1, #0
 8006404:	f7fe f946 	bl	8004694 <memset>
 8006408:	4620      	mov	r0, r4
 800640a:	b002      	add	sp, #8
 800640c:	bd10      	pop	{r4, pc}
	...

08006410 <_free_r>:
 8006410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006412:	2900      	cmp	r1, #0
 8006414:	d048      	beq.n	80064a8 <_free_r+0x98>
 8006416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641a:	9001      	str	r0, [sp, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f1a1 0404 	sub.w	r4, r1, #4
 8006422:	bfb8      	it	lt
 8006424:	18e4      	addlt	r4, r4, r3
 8006426:	f000 fa65 	bl	80068f4 <__malloc_lock>
 800642a:	4a20      	ldr	r2, [pc, #128]	; (80064ac <_free_r+0x9c>)
 800642c:	9801      	ldr	r0, [sp, #4]
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	4615      	mov	r5, r2
 8006432:	b933      	cbnz	r3, 8006442 <_free_r+0x32>
 8006434:	6063      	str	r3, [r4, #4]
 8006436:	6014      	str	r4, [r2, #0]
 8006438:	b003      	add	sp, #12
 800643a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800643e:	f000 ba5f 	b.w	8006900 <__malloc_unlock>
 8006442:	42a3      	cmp	r3, r4
 8006444:	d90b      	bls.n	800645e <_free_r+0x4e>
 8006446:	6821      	ldr	r1, [r4, #0]
 8006448:	1862      	adds	r2, r4, r1
 800644a:	4293      	cmp	r3, r2
 800644c:	bf04      	itt	eq
 800644e:	681a      	ldreq	r2, [r3, #0]
 8006450:	685b      	ldreq	r3, [r3, #4]
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	bf04      	itt	eq
 8006456:	1852      	addeq	r2, r2, r1
 8006458:	6022      	streq	r2, [r4, #0]
 800645a:	602c      	str	r4, [r5, #0]
 800645c:	e7ec      	b.n	8006438 <_free_r+0x28>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x58>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x4e>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1855      	adds	r5, r2, r1
 800646c:	42a5      	cmp	r5, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x78>
 8006470:	6824      	ldr	r4, [r4, #0]
 8006472:	4421      	add	r1, r4
 8006474:	1854      	adds	r4, r2, r1
 8006476:	42a3      	cmp	r3, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1dd      	bne.n	8006438 <_free_r+0x28>
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4421      	add	r1, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	e7d7      	b.n	8006438 <_free_r+0x28>
 8006488:	d902      	bls.n	8006490 <_free_r+0x80>
 800648a:	230c      	movs	r3, #12
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	e7d3      	b.n	8006438 <_free_r+0x28>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	1961      	adds	r1, r4, r5
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7c7      	b.n	8006438 <_free_r+0x28>
 80064a8:	b003      	add	sp, #12
 80064aa:	bd30      	pop	{r4, r5, pc}
 80064ac:	20000214 	.word	0x20000214

080064b0 <_malloc_r>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	1ccd      	adds	r5, r1, #3
 80064b4:	f025 0503 	bic.w	r5, r5, #3
 80064b8:	3508      	adds	r5, #8
 80064ba:	2d0c      	cmp	r5, #12
 80064bc:	bf38      	it	cc
 80064be:	250c      	movcc	r5, #12
 80064c0:	2d00      	cmp	r5, #0
 80064c2:	4606      	mov	r6, r0
 80064c4:	db01      	blt.n	80064ca <_malloc_r+0x1a>
 80064c6:	42a9      	cmp	r1, r5
 80064c8:	d903      	bls.n	80064d2 <_malloc_r+0x22>
 80064ca:	230c      	movs	r3, #12
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	2000      	movs	r0, #0
 80064d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d2:	f000 fa0f 	bl	80068f4 <__malloc_lock>
 80064d6:	4921      	ldr	r1, [pc, #132]	; (800655c <_malloc_r+0xac>)
 80064d8:	680a      	ldr	r2, [r1, #0]
 80064da:	4614      	mov	r4, r2
 80064dc:	b99c      	cbnz	r4, 8006506 <_malloc_r+0x56>
 80064de:	4f20      	ldr	r7, [pc, #128]	; (8006560 <_malloc_r+0xb0>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	b923      	cbnz	r3, 80064ee <_malloc_r+0x3e>
 80064e4:	4621      	mov	r1, r4
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 f998 	bl	800681c <_sbrk_r>
 80064ec:	6038      	str	r0, [r7, #0]
 80064ee:	4629      	mov	r1, r5
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f993 	bl	800681c <_sbrk_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d123      	bne.n	8006542 <_malloc_r+0x92>
 80064fa:	230c      	movs	r3, #12
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f9fe 	bl	8006900 <__malloc_unlock>
 8006504:	e7e3      	b.n	80064ce <_malloc_r+0x1e>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	1b5b      	subs	r3, r3, r5
 800650a:	d417      	bmi.n	800653c <_malloc_r+0x8c>
 800650c:	2b0b      	cmp	r3, #11
 800650e:	d903      	bls.n	8006518 <_malloc_r+0x68>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	441c      	add	r4, r3
 8006514:	6025      	str	r5, [r4, #0]
 8006516:	e004      	b.n	8006522 <_malloc_r+0x72>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	42a2      	cmp	r2, r4
 800651c:	bf0c      	ite	eq
 800651e:	600b      	streq	r3, [r1, #0]
 8006520:	6053      	strne	r3, [r2, #4]
 8006522:	4630      	mov	r0, r6
 8006524:	f000 f9ec 	bl	8006900 <__malloc_unlock>
 8006528:	f104 000b 	add.w	r0, r4, #11
 800652c:	1d23      	adds	r3, r4, #4
 800652e:	f020 0007 	bic.w	r0, r0, #7
 8006532:	1ac2      	subs	r2, r0, r3
 8006534:	d0cc      	beq.n	80064d0 <_malloc_r+0x20>
 8006536:	1a1b      	subs	r3, r3, r0
 8006538:	50a3      	str	r3, [r4, r2]
 800653a:	e7c9      	b.n	80064d0 <_malloc_r+0x20>
 800653c:	4622      	mov	r2, r4
 800653e:	6864      	ldr	r4, [r4, #4]
 8006540:	e7cc      	b.n	80064dc <_malloc_r+0x2c>
 8006542:	1cc4      	adds	r4, r0, #3
 8006544:	f024 0403 	bic.w	r4, r4, #3
 8006548:	42a0      	cmp	r0, r4
 800654a:	d0e3      	beq.n	8006514 <_malloc_r+0x64>
 800654c:	1a21      	subs	r1, r4, r0
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f964 	bl	800681c <_sbrk_r>
 8006554:	3001      	adds	r0, #1
 8006556:	d1dd      	bne.n	8006514 <_malloc_r+0x64>
 8006558:	e7cf      	b.n	80064fa <_malloc_r+0x4a>
 800655a:	bf00      	nop
 800655c:	20000214 	.word	0x20000214
 8006560:	20000218 	.word	0x20000218

08006564 <__ssputs_r>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	688e      	ldr	r6, [r1, #8]
 800656a:	429e      	cmp	r6, r3
 800656c:	4682      	mov	sl, r0
 800656e:	460c      	mov	r4, r1
 8006570:	4690      	mov	r8, r2
 8006572:	461f      	mov	r7, r3
 8006574:	d838      	bhi.n	80065e8 <__ssputs_r+0x84>
 8006576:	898a      	ldrh	r2, [r1, #12]
 8006578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800657c:	d032      	beq.n	80065e4 <__ssputs_r+0x80>
 800657e:	6825      	ldr	r5, [r4, #0]
 8006580:	6909      	ldr	r1, [r1, #16]
 8006582:	eba5 0901 	sub.w	r9, r5, r1
 8006586:	6965      	ldr	r5, [r4, #20]
 8006588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800658c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006590:	3301      	adds	r3, #1
 8006592:	444b      	add	r3, r9
 8006594:	106d      	asrs	r5, r5, #1
 8006596:	429d      	cmp	r5, r3
 8006598:	bf38      	it	cc
 800659a:	461d      	movcc	r5, r3
 800659c:	0553      	lsls	r3, r2, #21
 800659e:	d531      	bpl.n	8006604 <__ssputs_r+0xa0>
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7ff ff85 	bl	80064b0 <_malloc_r>
 80065a6:	4606      	mov	r6, r0
 80065a8:	b950      	cbnz	r0, 80065c0 <__ssputs_r+0x5c>
 80065aa:	230c      	movs	r3, #12
 80065ac:	f8ca 3000 	str.w	r3, [sl]
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	464a      	mov	r2, r9
 80065c4:	f7ff fb88 	bl	8005cd8 <memcpy>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	6126      	str	r6, [r4, #16]
 80065d6:	6165      	str	r5, [r4, #20]
 80065d8:	444e      	add	r6, r9
 80065da:	eba5 0509 	sub.w	r5, r5, r9
 80065de:	6026      	str	r6, [r4, #0]
 80065e0:	60a5      	str	r5, [r4, #8]
 80065e2:	463e      	mov	r6, r7
 80065e4:	42be      	cmp	r6, r7
 80065e6:	d900      	bls.n	80065ea <__ssputs_r+0x86>
 80065e8:	463e      	mov	r6, r7
 80065ea:	4632      	mov	r2, r6
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	4641      	mov	r1, r8
 80065f0:	f000 f966 	bl	80068c0 <memmove>
 80065f4:	68a3      	ldr	r3, [r4, #8]
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	1b9b      	subs	r3, r3, r6
 80065fa:	4432      	add	r2, r6
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	6022      	str	r2, [r4, #0]
 8006600:	2000      	movs	r0, #0
 8006602:	e7db      	b.n	80065bc <__ssputs_r+0x58>
 8006604:	462a      	mov	r2, r5
 8006606:	f000 f981 	bl	800690c <_realloc_r>
 800660a:	4606      	mov	r6, r0
 800660c:	2800      	cmp	r0, #0
 800660e:	d1e1      	bne.n	80065d4 <__ssputs_r+0x70>
 8006610:	6921      	ldr	r1, [r4, #16]
 8006612:	4650      	mov	r0, sl
 8006614:	f7ff fefc 	bl	8006410 <_free_r>
 8006618:	e7c7      	b.n	80065aa <__ssputs_r+0x46>
	...

0800661c <_svfiprintf_r>:
 800661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	4698      	mov	r8, r3
 8006622:	898b      	ldrh	r3, [r1, #12]
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	b09d      	sub	sp, #116	; 0x74
 8006628:	4607      	mov	r7, r0
 800662a:	460d      	mov	r5, r1
 800662c:	4614      	mov	r4, r2
 800662e:	d50e      	bpl.n	800664e <_svfiprintf_r+0x32>
 8006630:	690b      	ldr	r3, [r1, #16]
 8006632:	b963      	cbnz	r3, 800664e <_svfiprintf_r+0x32>
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	f7ff ff3b 	bl	80064b0 <_malloc_r>
 800663a:	6028      	str	r0, [r5, #0]
 800663c:	6128      	str	r0, [r5, #16]
 800663e:	b920      	cbnz	r0, 800664a <_svfiprintf_r+0x2e>
 8006640:	230c      	movs	r3, #12
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e0d1      	b.n	80067ee <_svfiprintf_r+0x1d2>
 800664a:	2340      	movs	r3, #64	; 0x40
 800664c:	616b      	str	r3, [r5, #20]
 800664e:	2300      	movs	r3, #0
 8006650:	9309      	str	r3, [sp, #36]	; 0x24
 8006652:	2320      	movs	r3, #32
 8006654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006658:	f8cd 800c 	str.w	r8, [sp, #12]
 800665c:	2330      	movs	r3, #48	; 0x30
 800665e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006808 <_svfiprintf_r+0x1ec>
 8006662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006666:	f04f 0901 	mov.w	r9, #1
 800666a:	4623      	mov	r3, r4
 800666c:	469a      	mov	sl, r3
 800666e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006672:	b10a      	cbz	r2, 8006678 <_svfiprintf_r+0x5c>
 8006674:	2a25      	cmp	r2, #37	; 0x25
 8006676:	d1f9      	bne.n	800666c <_svfiprintf_r+0x50>
 8006678:	ebba 0b04 	subs.w	fp, sl, r4
 800667c:	d00b      	beq.n	8006696 <_svfiprintf_r+0x7a>
 800667e:	465b      	mov	r3, fp
 8006680:	4622      	mov	r2, r4
 8006682:	4629      	mov	r1, r5
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ff6d 	bl	8006564 <__ssputs_r>
 800668a:	3001      	adds	r0, #1
 800668c:	f000 80aa 	beq.w	80067e4 <_svfiprintf_r+0x1c8>
 8006690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006692:	445a      	add	r2, fp
 8006694:	9209      	str	r2, [sp, #36]	; 0x24
 8006696:	f89a 3000 	ldrb.w	r3, [sl]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a2 	beq.w	80067e4 <_svfiprintf_r+0x1c8>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066aa:	f10a 0a01 	add.w	sl, sl, #1
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	9307      	str	r3, [sp, #28]
 80066b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b6:	931a      	str	r3, [sp, #104]	; 0x68
 80066b8:	4654      	mov	r4, sl
 80066ba:	2205      	movs	r2, #5
 80066bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c0:	4851      	ldr	r0, [pc, #324]	; (8006808 <_svfiprintf_r+0x1ec>)
 80066c2:	f7f9 fd8d 	bl	80001e0 <memchr>
 80066c6:	9a04      	ldr	r2, [sp, #16]
 80066c8:	b9d8      	cbnz	r0, 8006702 <_svfiprintf_r+0xe6>
 80066ca:	06d0      	lsls	r0, r2, #27
 80066cc:	bf44      	itt	mi
 80066ce:	2320      	movmi	r3, #32
 80066d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d4:	0711      	lsls	r1, r2, #28
 80066d6:	bf44      	itt	mi
 80066d8:	232b      	movmi	r3, #43	; 0x2b
 80066da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066de:	f89a 3000 	ldrb.w	r3, [sl]
 80066e2:	2b2a      	cmp	r3, #42	; 0x2a
 80066e4:	d015      	beq.n	8006712 <_svfiprintf_r+0xf6>
 80066e6:	9a07      	ldr	r2, [sp, #28]
 80066e8:	4654      	mov	r4, sl
 80066ea:	2000      	movs	r0, #0
 80066ec:	f04f 0c0a 	mov.w	ip, #10
 80066f0:	4621      	mov	r1, r4
 80066f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f6:	3b30      	subs	r3, #48	; 0x30
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	d94e      	bls.n	800679a <_svfiprintf_r+0x17e>
 80066fc:	b1b0      	cbz	r0, 800672c <_svfiprintf_r+0x110>
 80066fe:	9207      	str	r2, [sp, #28]
 8006700:	e014      	b.n	800672c <_svfiprintf_r+0x110>
 8006702:	eba0 0308 	sub.w	r3, r0, r8
 8006706:	fa09 f303 	lsl.w	r3, r9, r3
 800670a:	4313      	orrs	r3, r2
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	46a2      	mov	sl, r4
 8006710:	e7d2      	b.n	80066b8 <_svfiprintf_r+0x9c>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	1d19      	adds	r1, r3, #4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	9103      	str	r1, [sp, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfbb      	ittet	lt
 800671e:	425b      	neglt	r3, r3
 8006720:	f042 0202 	orrlt.w	r2, r2, #2
 8006724:	9307      	strge	r3, [sp, #28]
 8006726:	9307      	strlt	r3, [sp, #28]
 8006728:	bfb8      	it	lt
 800672a:	9204      	strlt	r2, [sp, #16]
 800672c:	7823      	ldrb	r3, [r4, #0]
 800672e:	2b2e      	cmp	r3, #46	; 0x2e
 8006730:	d10c      	bne.n	800674c <_svfiprintf_r+0x130>
 8006732:	7863      	ldrb	r3, [r4, #1]
 8006734:	2b2a      	cmp	r3, #42	; 0x2a
 8006736:	d135      	bne.n	80067a4 <_svfiprintf_r+0x188>
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	9203      	str	r2, [sp, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfb8      	it	lt
 8006744:	f04f 33ff 	movlt.w	r3, #4294967295
 8006748:	3402      	adds	r4, #2
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006818 <_svfiprintf_r+0x1fc>
 8006750:	7821      	ldrb	r1, [r4, #0]
 8006752:	2203      	movs	r2, #3
 8006754:	4650      	mov	r0, sl
 8006756:	f7f9 fd43 	bl	80001e0 <memchr>
 800675a:	b140      	cbz	r0, 800676e <_svfiprintf_r+0x152>
 800675c:	2340      	movs	r3, #64	; 0x40
 800675e:	eba0 000a 	sub.w	r0, r0, sl
 8006762:	fa03 f000 	lsl.w	r0, r3, r0
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	4303      	orrs	r3, r0
 800676a:	3401      	adds	r4, #1
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006772:	4826      	ldr	r0, [pc, #152]	; (800680c <_svfiprintf_r+0x1f0>)
 8006774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006778:	2206      	movs	r2, #6
 800677a:	f7f9 fd31 	bl	80001e0 <memchr>
 800677e:	2800      	cmp	r0, #0
 8006780:	d038      	beq.n	80067f4 <_svfiprintf_r+0x1d8>
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <_svfiprintf_r+0x1f4>)
 8006784:	bb1b      	cbnz	r3, 80067ce <_svfiprintf_r+0x1b2>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3307      	adds	r3, #7
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	3308      	adds	r3, #8
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	4433      	add	r3, r6
 8006796:	9309      	str	r3, [sp, #36]	; 0x24
 8006798:	e767      	b.n	800666a <_svfiprintf_r+0x4e>
 800679a:	fb0c 3202 	mla	r2, ip, r2, r3
 800679e:	460c      	mov	r4, r1
 80067a0:	2001      	movs	r0, #1
 80067a2:	e7a5      	b.n	80066f0 <_svfiprintf_r+0xd4>
 80067a4:	2300      	movs	r3, #0
 80067a6:	3401      	adds	r4, #1
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	4619      	mov	r1, r3
 80067ac:	f04f 0c0a 	mov.w	ip, #10
 80067b0:	4620      	mov	r0, r4
 80067b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b6:	3a30      	subs	r2, #48	; 0x30
 80067b8:	2a09      	cmp	r2, #9
 80067ba:	d903      	bls.n	80067c4 <_svfiprintf_r+0x1a8>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0c5      	beq.n	800674c <_svfiprintf_r+0x130>
 80067c0:	9105      	str	r1, [sp, #20]
 80067c2:	e7c3      	b.n	800674c <_svfiprintf_r+0x130>
 80067c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c8:	4604      	mov	r4, r0
 80067ca:	2301      	movs	r3, #1
 80067cc:	e7f0      	b.n	80067b0 <_svfiprintf_r+0x194>
 80067ce:	ab03      	add	r3, sp, #12
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	462a      	mov	r2, r5
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <_svfiprintf_r+0x1f8>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	4638      	mov	r0, r7
 80067da:	f7fe f803 	bl	80047e4 <_printf_float>
 80067de:	1c42      	adds	r2, r0, #1
 80067e0:	4606      	mov	r6, r0
 80067e2:	d1d6      	bne.n	8006792 <_svfiprintf_r+0x176>
 80067e4:	89ab      	ldrh	r3, [r5, #12]
 80067e6:	065b      	lsls	r3, r3, #25
 80067e8:	f53f af2c 	bmi.w	8006644 <_svfiprintf_r+0x28>
 80067ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ee:	b01d      	add	sp, #116	; 0x74
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	ab03      	add	r3, sp, #12
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	462a      	mov	r2, r5
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <_svfiprintf_r+0x1f8>)
 80067fc:	a904      	add	r1, sp, #16
 80067fe:	4638      	mov	r0, r7
 8006800:	f7fe fa94 	bl	8004d2c <_printf_i>
 8006804:	e7eb      	b.n	80067de <_svfiprintf_r+0x1c2>
 8006806:	bf00      	nop
 8006808:	08007654 	.word	0x08007654
 800680c:	0800765e 	.word	0x0800765e
 8006810:	080047e5 	.word	0x080047e5
 8006814:	08006565 	.word	0x08006565
 8006818:	0800765a 	.word	0x0800765a

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_sbrk_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fd fcb4 	bl	8004194 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20000220 	.word	0x20000220

0800683c <__assert_func>:
 800683c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800683e:	4614      	mov	r4, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <__assert_func+0x2c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4605      	mov	r5, r0
 8006848:	68d8      	ldr	r0, [r3, #12]
 800684a:	b14c      	cbz	r4, 8006860 <__assert_func+0x24>
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <__assert_func+0x30>)
 800684e:	9100      	str	r1, [sp, #0]
 8006850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006854:	4906      	ldr	r1, [pc, #24]	; (8006870 <__assert_func+0x34>)
 8006856:	462b      	mov	r3, r5
 8006858:	f000 f80e 	bl	8006878 <fiprintf>
 800685c:	f000 faa4 	bl	8006da8 <abort>
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <__assert_func+0x38>)
 8006862:	461c      	mov	r4, r3
 8006864:	e7f3      	b.n	800684e <__assert_func+0x12>
 8006866:	bf00      	nop
 8006868:	20000008 	.word	0x20000008
 800686c:	08007665 	.word	0x08007665
 8006870:	08007672 	.word	0x08007672
 8006874:	080076a0 	.word	0x080076a0

08006878 <fiprintf>:
 8006878:	b40e      	push	{r1, r2, r3}
 800687a:	b503      	push	{r0, r1, lr}
 800687c:	4601      	mov	r1, r0
 800687e:	ab03      	add	r3, sp, #12
 8006880:	4805      	ldr	r0, [pc, #20]	; (8006898 <fiprintf+0x20>)
 8006882:	f853 2b04 	ldr.w	r2, [r3], #4
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	f000 f88f 	bl	80069ac <_vfiprintf_r>
 800688e:	b002      	add	sp, #8
 8006890:	f85d eb04 	ldr.w	lr, [sp], #4
 8006894:	b003      	add	sp, #12
 8006896:	4770      	bx	lr
 8006898:	20000008 	.word	0x20000008

0800689c <__ascii_mbtowc>:
 800689c:	b082      	sub	sp, #8
 800689e:	b901      	cbnz	r1, 80068a2 <__ascii_mbtowc+0x6>
 80068a0:	a901      	add	r1, sp, #4
 80068a2:	b142      	cbz	r2, 80068b6 <__ascii_mbtowc+0x1a>
 80068a4:	b14b      	cbz	r3, 80068ba <__ascii_mbtowc+0x1e>
 80068a6:	7813      	ldrb	r3, [r2, #0]
 80068a8:	600b      	str	r3, [r1, #0]
 80068aa:	7812      	ldrb	r2, [r2, #0]
 80068ac:	1e10      	subs	r0, r2, #0
 80068ae:	bf18      	it	ne
 80068b0:	2001      	movne	r0, #1
 80068b2:	b002      	add	sp, #8
 80068b4:	4770      	bx	lr
 80068b6:	4610      	mov	r0, r2
 80068b8:	e7fb      	b.n	80068b2 <__ascii_mbtowc+0x16>
 80068ba:	f06f 0001 	mvn.w	r0, #1
 80068be:	e7f8      	b.n	80068b2 <__ascii_mbtowc+0x16>

080068c0 <memmove>:
 80068c0:	4288      	cmp	r0, r1
 80068c2:	b510      	push	{r4, lr}
 80068c4:	eb01 0402 	add.w	r4, r1, r2
 80068c8:	d902      	bls.n	80068d0 <memmove+0x10>
 80068ca:	4284      	cmp	r4, r0
 80068cc:	4623      	mov	r3, r4
 80068ce:	d807      	bhi.n	80068e0 <memmove+0x20>
 80068d0:	1e43      	subs	r3, r0, #1
 80068d2:	42a1      	cmp	r1, r4
 80068d4:	d008      	beq.n	80068e8 <memmove+0x28>
 80068d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068de:	e7f8      	b.n	80068d2 <memmove+0x12>
 80068e0:	4402      	add	r2, r0
 80068e2:	4601      	mov	r1, r0
 80068e4:	428a      	cmp	r2, r1
 80068e6:	d100      	bne.n	80068ea <memmove+0x2a>
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068f2:	e7f7      	b.n	80068e4 <memmove+0x24>

080068f4 <__malloc_lock>:
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <__malloc_lock+0x8>)
 80068f6:	f000 bc17 	b.w	8007128 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	20000228 	.word	0x20000228

08006900 <__malloc_unlock>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__malloc_unlock+0x8>)
 8006902:	f000 bc12 	b.w	800712a <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	20000228 	.word	0x20000228

0800690c <_realloc_r>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	4607      	mov	r7, r0
 8006910:	4614      	mov	r4, r2
 8006912:	460e      	mov	r6, r1
 8006914:	b921      	cbnz	r1, 8006920 <_realloc_r+0x14>
 8006916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800691a:	4611      	mov	r1, r2
 800691c:	f7ff bdc8 	b.w	80064b0 <_malloc_r>
 8006920:	b922      	cbnz	r2, 800692c <_realloc_r+0x20>
 8006922:	f7ff fd75 	bl	8006410 <_free_r>
 8006926:	4625      	mov	r5, r4
 8006928:	4628      	mov	r0, r5
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800692c:	f000 fc62 	bl	80071f4 <_malloc_usable_size_r>
 8006930:	42a0      	cmp	r0, r4
 8006932:	d20f      	bcs.n	8006954 <_realloc_r+0x48>
 8006934:	4621      	mov	r1, r4
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff fdba 	bl	80064b0 <_malloc_r>
 800693c:	4605      	mov	r5, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	d0f2      	beq.n	8006928 <_realloc_r+0x1c>
 8006942:	4631      	mov	r1, r6
 8006944:	4622      	mov	r2, r4
 8006946:	f7ff f9c7 	bl	8005cd8 <memcpy>
 800694a:	4631      	mov	r1, r6
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff fd5f 	bl	8006410 <_free_r>
 8006952:	e7e9      	b.n	8006928 <_realloc_r+0x1c>
 8006954:	4635      	mov	r5, r6
 8006956:	e7e7      	b.n	8006928 <_realloc_r+0x1c>

08006958 <__sfputc_r>:
 8006958:	6893      	ldr	r3, [r2, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	b410      	push	{r4}
 8006960:	6093      	str	r3, [r2, #8]
 8006962:	da08      	bge.n	8006976 <__sfputc_r+0x1e>
 8006964:	6994      	ldr	r4, [r2, #24]
 8006966:	42a3      	cmp	r3, r4
 8006968:	db01      	blt.n	800696e <__sfputc_r+0x16>
 800696a:	290a      	cmp	r1, #10
 800696c:	d103      	bne.n	8006976 <__sfputc_r+0x1e>
 800696e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006972:	f000 b94b 	b.w	8006c0c <__swbuf_r>
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	1c58      	adds	r0, r3, #1
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	7019      	strb	r1, [r3, #0]
 800697e:	4608      	mov	r0, r1
 8006980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006984:	4770      	bx	lr

08006986 <__sfputs_r>:
 8006986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4614      	mov	r4, r2
 800698e:	18d5      	adds	r5, r2, r3
 8006990:	42ac      	cmp	r4, r5
 8006992:	d101      	bne.n	8006998 <__sfputs_r+0x12>
 8006994:	2000      	movs	r0, #0
 8006996:	e007      	b.n	80069a8 <__sfputs_r+0x22>
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	463a      	mov	r2, r7
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ffda 	bl	8006958 <__sfputc_r>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d1f3      	bne.n	8006990 <__sfputs_r+0xa>
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ac <_vfiprintf_r>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460d      	mov	r5, r1
 80069b2:	b09d      	sub	sp, #116	; 0x74
 80069b4:	4614      	mov	r4, r2
 80069b6:	4698      	mov	r8, r3
 80069b8:	4606      	mov	r6, r0
 80069ba:	b118      	cbz	r0, 80069c4 <_vfiprintf_r+0x18>
 80069bc:	6983      	ldr	r3, [r0, #24]
 80069be:	b90b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x18>
 80069c0:	f000 fb14 	bl	8006fec <__sinit>
 80069c4:	4b89      	ldr	r3, [pc, #548]	; (8006bec <_vfiprintf_r+0x240>)
 80069c6:	429d      	cmp	r5, r3
 80069c8:	d11b      	bne.n	8006a02 <_vfiprintf_r+0x56>
 80069ca:	6875      	ldr	r5, [r6, #4]
 80069cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d405      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	059a      	lsls	r2, r3, #22
 80069d6:	d402      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069da:	f000 fba5 	bl	8007128 <__retarget_lock_acquire_recursive>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	071b      	lsls	r3, r3, #28
 80069e2:	d501      	bpl.n	80069e8 <_vfiprintf_r+0x3c>
 80069e4:	692b      	ldr	r3, [r5, #16]
 80069e6:	b9eb      	cbnz	r3, 8006a24 <_vfiprintf_r+0x78>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4630      	mov	r0, r6
 80069ec:	f000 f96e 	bl	8006ccc <__swsetup_r>
 80069f0:	b1c0      	cbz	r0, 8006a24 <_vfiprintf_r+0x78>
 80069f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f4:	07dc      	lsls	r4, r3, #31
 80069f6:	d50e      	bpl.n	8006a16 <_vfiprintf_r+0x6a>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b01d      	add	sp, #116	; 0x74
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	4b7b      	ldr	r3, [pc, #492]	; (8006bf0 <_vfiprintf_r+0x244>)
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d101      	bne.n	8006a0c <_vfiprintf_r+0x60>
 8006a08:	68b5      	ldr	r5, [r6, #8]
 8006a0a:	e7df      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a0c:	4b79      	ldr	r3, [pc, #484]	; (8006bf4 <_vfiprintf_r+0x248>)
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	bf08      	it	eq
 8006a12:	68f5      	ldreq	r5, [r6, #12]
 8006a14:	e7da      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	0598      	lsls	r0, r3, #22
 8006a1a:	d4ed      	bmi.n	80069f8 <_vfiprintf_r+0x4c>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1e:	f000 fb84 	bl	800712a <__retarget_lock_release_recursive>
 8006a22:	e7e9      	b.n	80069f8 <_vfiprintf_r+0x4c>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	2320      	movs	r3, #32
 8006a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a32:	2330      	movs	r3, #48	; 0x30
 8006a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bf8 <_vfiprintf_r+0x24c>
 8006a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a3c:	f04f 0901 	mov.w	r9, #1
 8006a40:	4623      	mov	r3, r4
 8006a42:	469a      	mov	sl, r3
 8006a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a48:	b10a      	cbz	r2, 8006a4e <_vfiprintf_r+0xa2>
 8006a4a:	2a25      	cmp	r2, #37	; 0x25
 8006a4c:	d1f9      	bne.n	8006a42 <_vfiprintf_r+0x96>
 8006a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a52:	d00b      	beq.n	8006a6c <_vfiprintf_r+0xc0>
 8006a54:	465b      	mov	r3, fp
 8006a56:	4622      	mov	r2, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff93 	bl	8006986 <__sfputs_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	f000 80aa 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a68:	445a      	add	r2, fp
 8006a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a2 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a80:	f10a 0a01 	add.w	sl, sl, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8e:	4654      	mov	r4, sl
 8006a90:	2205      	movs	r2, #5
 8006a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a96:	4858      	ldr	r0, [pc, #352]	; (8006bf8 <_vfiprintf_r+0x24c>)
 8006a98:	f7f9 fba2 	bl	80001e0 <memchr>
 8006a9c:	9a04      	ldr	r2, [sp, #16]
 8006a9e:	b9d8      	cbnz	r0, 8006ad8 <_vfiprintf_r+0x12c>
 8006aa0:	06d1      	lsls	r1, r2, #27
 8006aa2:	bf44      	itt	mi
 8006aa4:	2320      	movmi	r3, #32
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aaa:	0713      	lsls	r3, r2, #28
 8006aac:	bf44      	itt	mi
 8006aae:	232b      	movmi	r3, #43	; 0x2b
 8006ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aba:	d015      	beq.n	8006ae8 <_vfiprintf_r+0x13c>
 8006abc:	9a07      	ldr	r2, [sp, #28]
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f04f 0c0a 	mov.w	ip, #10
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006acc:	3b30      	subs	r3, #48	; 0x30
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	d94e      	bls.n	8006b70 <_vfiprintf_r+0x1c4>
 8006ad2:	b1b0      	cbz	r0, 8006b02 <_vfiprintf_r+0x156>
 8006ad4:	9207      	str	r2, [sp, #28]
 8006ad6:	e014      	b.n	8006b02 <_vfiprintf_r+0x156>
 8006ad8:	eba0 0308 	sub.w	r3, r0, r8
 8006adc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	46a2      	mov	sl, r4
 8006ae6:	e7d2      	b.n	8006a8e <_vfiprintf_r+0xe2>
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	1d19      	adds	r1, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9103      	str	r1, [sp, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfbb      	ittet	lt
 8006af4:	425b      	neglt	r3, r3
 8006af6:	f042 0202 	orrlt.w	r2, r2, #2
 8006afa:	9307      	strge	r3, [sp, #28]
 8006afc:	9307      	strlt	r3, [sp, #28]
 8006afe:	bfb8      	it	lt
 8006b00:	9204      	strlt	r2, [sp, #16]
 8006b02:	7823      	ldrb	r3, [r4, #0]
 8006b04:	2b2e      	cmp	r3, #46	; 0x2e
 8006b06:	d10c      	bne.n	8006b22 <_vfiprintf_r+0x176>
 8006b08:	7863      	ldrb	r3, [r4, #1]
 8006b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0c:	d135      	bne.n	8006b7a <_vfiprintf_r+0x1ce>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b1e:	3402      	adds	r4, #2
 8006b20:	9305      	str	r3, [sp, #20]
 8006b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c08 <_vfiprintf_r+0x25c>
 8006b26:	7821      	ldrb	r1, [r4, #0]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f7f9 fb58 	bl	80001e0 <memchr>
 8006b30:	b140      	cbz	r0, 8006b44 <_vfiprintf_r+0x198>
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	eba0 000a 	sub.w	r0, r0, sl
 8006b38:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	3401      	adds	r4, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	482c      	ldr	r0, [pc, #176]	; (8006bfc <_vfiprintf_r+0x250>)
 8006b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f7f9 fb46 	bl	80001e0 <memchr>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d03f      	beq.n	8006bd8 <_vfiprintf_r+0x22c>
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <_vfiprintf_r+0x254>)
 8006b5a:	bb1b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x1f8>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	3307      	adds	r3, #7
 8006b60:	f023 0307 	bic.w	r3, r3, #7
 8006b64:	3308      	adds	r3, #8
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	443b      	add	r3, r7
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	e767      	b.n	8006a40 <_vfiprintf_r+0x94>
 8006b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b74:	460c      	mov	r4, r1
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7a5      	b.n	8006ac6 <_vfiprintf_r+0x11a>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4620      	mov	r0, r4
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	; 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_vfiprintf_r+0x1ee>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c5      	beq.n	8006b22 <_vfiprintf_r+0x176>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c3      	b.n	8006b22 <_vfiprintf_r+0x176>
 8006b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7f0      	b.n	8006b86 <_vfiprintf_r+0x1da>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <_vfiprintf_r+0x258>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7fd fe18 	bl	80047e4 <_printf_float>
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	1c78      	adds	r0, r7, #1
 8006bb8:	d1d6      	bne.n	8006b68 <_vfiprintf_r+0x1bc>
 8006bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bbc:	07d9      	lsls	r1, r3, #31
 8006bbe:	d405      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	059a      	lsls	r2, r3, #22
 8006bc4:	d402      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc8:	f000 faaf 	bl	800712a <__retarget_lock_release_recursive>
 8006bcc:	89ab      	ldrh	r3, [r5, #12]
 8006bce:	065b      	lsls	r3, r3, #25
 8006bd0:	f53f af12 	bmi.w	80069f8 <_vfiprintf_r+0x4c>
 8006bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd6:	e711      	b.n	80069fc <_vfiprintf_r+0x50>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <_vfiprintf_r+0x258>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7fe f8a2 	bl	8004d2c <_printf_i>
 8006be8:	e7e4      	b.n	8006bb4 <_vfiprintf_r+0x208>
 8006bea:	bf00      	nop
 8006bec:	080077cc 	.word	0x080077cc
 8006bf0:	080077ec 	.word	0x080077ec
 8006bf4:	080077ac 	.word	0x080077ac
 8006bf8:	08007654 	.word	0x08007654
 8006bfc:	0800765e 	.word	0x0800765e
 8006c00:	080047e5 	.word	0x080047e5
 8006c04:	08006987 	.word	0x08006987
 8006c08:	0800765a 	.word	0x0800765a

08006c0c <__swbuf_r>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	460e      	mov	r6, r1
 8006c10:	4614      	mov	r4, r2
 8006c12:	4605      	mov	r5, r0
 8006c14:	b118      	cbz	r0, 8006c1e <__swbuf_r+0x12>
 8006c16:	6983      	ldr	r3, [r0, #24]
 8006c18:	b90b      	cbnz	r3, 8006c1e <__swbuf_r+0x12>
 8006c1a:	f000 f9e7 	bl	8006fec <__sinit>
 8006c1e:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <__swbuf_r+0x98>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d12b      	bne.n	8006c7c <__swbuf_r+0x70>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	69a3      	ldr	r3, [r4, #24]
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	071a      	lsls	r2, r3, #28
 8006c2e:	d52f      	bpl.n	8006c90 <__swbuf_r+0x84>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	b36b      	cbz	r3, 8006c90 <__swbuf_r+0x84>
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	6820      	ldr	r0, [r4, #0]
 8006c38:	1ac0      	subs	r0, r0, r3
 8006c3a:	6963      	ldr	r3, [r4, #20]
 8006c3c:	b2f6      	uxtb	r6, r6
 8006c3e:	4283      	cmp	r3, r0
 8006c40:	4637      	mov	r7, r6
 8006c42:	dc04      	bgt.n	8006c4e <__swbuf_r+0x42>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 f93c 	bl	8006ec4 <_fflush_r>
 8006c4c:	bb30      	cbnz	r0, 8006c9c <__swbuf_r+0x90>
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	60a3      	str	r3, [r4, #8]
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	701e      	strb	r6, [r3, #0]
 8006c5c:	6963      	ldr	r3, [r4, #20]
 8006c5e:	3001      	adds	r0, #1
 8006c60:	4283      	cmp	r3, r0
 8006c62:	d004      	beq.n	8006c6e <__swbuf_r+0x62>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	07db      	lsls	r3, r3, #31
 8006c68:	d506      	bpl.n	8006c78 <__swbuf_r+0x6c>
 8006c6a:	2e0a      	cmp	r6, #10
 8006c6c:	d104      	bne.n	8006c78 <__swbuf_r+0x6c>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 f927 	bl	8006ec4 <_fflush_r>
 8006c76:	b988      	cbnz	r0, 8006c9c <__swbuf_r+0x90>
 8006c78:	4638      	mov	r0, r7
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <__swbuf_r+0x9c>)
 8006c7e:	429c      	cmp	r4, r3
 8006c80:	d101      	bne.n	8006c86 <__swbuf_r+0x7a>
 8006c82:	68ac      	ldr	r4, [r5, #8]
 8006c84:	e7cf      	b.n	8006c26 <__swbuf_r+0x1a>
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <__swbuf_r+0xa0>)
 8006c88:	429c      	cmp	r4, r3
 8006c8a:	bf08      	it	eq
 8006c8c:	68ec      	ldreq	r4, [r5, #12]
 8006c8e:	e7ca      	b.n	8006c26 <__swbuf_r+0x1a>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f81a 	bl	8006ccc <__swsetup_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d0cb      	beq.n	8006c34 <__swbuf_r+0x28>
 8006c9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006ca0:	e7ea      	b.n	8006c78 <__swbuf_r+0x6c>
 8006ca2:	bf00      	nop
 8006ca4:	080077cc 	.word	0x080077cc
 8006ca8:	080077ec 	.word	0x080077ec
 8006cac:	080077ac 	.word	0x080077ac

08006cb0 <__ascii_wctomb>:
 8006cb0:	b149      	cbz	r1, 8006cc6 <__ascii_wctomb+0x16>
 8006cb2:	2aff      	cmp	r2, #255	; 0xff
 8006cb4:	bf85      	ittet	hi
 8006cb6:	238a      	movhi	r3, #138	; 0x8a
 8006cb8:	6003      	strhi	r3, [r0, #0]
 8006cba:	700a      	strbls	r2, [r1, #0]
 8006cbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cc0:	bf98      	it	ls
 8006cc2:	2001      	movls	r0, #1
 8006cc4:	4770      	bx	lr
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4770      	bx	lr
	...

08006ccc <__swsetup_r>:
 8006ccc:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <__swsetup_r+0xcc>)
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	681d      	ldr	r5, [r3, #0]
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	b125      	cbz	r5, 8006ce2 <__swsetup_r+0x16>
 8006cd8:	69ab      	ldr	r3, [r5, #24]
 8006cda:	b913      	cbnz	r3, 8006ce2 <__swsetup_r+0x16>
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f985 	bl	8006fec <__sinit>
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <__swsetup_r+0xd0>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	d10f      	bne.n	8006d08 <__swsetup_r+0x3c>
 8006ce8:	686c      	ldr	r4, [r5, #4]
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf0:	0719      	lsls	r1, r3, #28
 8006cf2:	d42c      	bmi.n	8006d4e <__swsetup_r+0x82>
 8006cf4:	06dd      	lsls	r5, r3, #27
 8006cf6:	d411      	bmi.n	8006d1c <__swsetup_r+0x50>
 8006cf8:	2309      	movs	r3, #9
 8006cfa:	6033      	str	r3, [r6, #0]
 8006cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	e03e      	b.n	8006d86 <__swsetup_r+0xba>
 8006d08:	4b25      	ldr	r3, [pc, #148]	; (8006da0 <__swsetup_r+0xd4>)
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	d101      	bne.n	8006d12 <__swsetup_r+0x46>
 8006d0e:	68ac      	ldr	r4, [r5, #8]
 8006d10:	e7eb      	b.n	8006cea <__swsetup_r+0x1e>
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <__swsetup_r+0xd8>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	bf08      	it	eq
 8006d18:	68ec      	ldreq	r4, [r5, #12]
 8006d1a:	e7e6      	b.n	8006cea <__swsetup_r+0x1e>
 8006d1c:	0758      	lsls	r0, r3, #29
 8006d1e:	d512      	bpl.n	8006d46 <__swsetup_r+0x7a>
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	b141      	cbz	r1, 8006d36 <__swsetup_r+0x6a>
 8006d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <__swsetup_r+0x66>
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff fb6f 	bl	8006410 <_free_r>
 8006d32:	2300      	movs	r3, #0
 8006d34:	6363      	str	r3, [r4, #52]	; 0x34
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f043 0308 	orr.w	r3, r3, #8
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	b94b      	cbnz	r3, 8006d66 <__swsetup_r+0x9a>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d5c:	d003      	beq.n	8006d66 <__swsetup_r+0x9a>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 fa07 	bl	8007174 <__smakebuf_r>
 8006d66:	89a0      	ldrh	r0, [r4, #12]
 8006d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d6c:	f010 0301 	ands.w	r3, r0, #1
 8006d70:	d00a      	beq.n	8006d88 <__swsetup_r+0xbc>
 8006d72:	2300      	movs	r3, #0
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6963      	ldr	r3, [r4, #20]
 8006d78:	425b      	negs	r3, r3
 8006d7a:	61a3      	str	r3, [r4, #24]
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	b943      	cbnz	r3, 8006d92 <__swsetup_r+0xc6>
 8006d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d84:	d1ba      	bne.n	8006cfc <__swsetup_r+0x30>
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	0781      	lsls	r1, r0, #30
 8006d8a:	bf58      	it	pl
 8006d8c:	6963      	ldrpl	r3, [r4, #20]
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	e7f4      	b.n	8006d7c <__swsetup_r+0xb0>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e7f7      	b.n	8006d86 <__swsetup_r+0xba>
 8006d96:	bf00      	nop
 8006d98:	20000008 	.word	0x20000008
 8006d9c:	080077cc 	.word	0x080077cc
 8006da0:	080077ec 	.word	0x080077ec
 8006da4:	080077ac 	.word	0x080077ac

08006da8 <abort>:
 8006da8:	b508      	push	{r3, lr}
 8006daa:	2006      	movs	r0, #6
 8006dac:	f000 fa52 	bl	8007254 <raise>
 8006db0:	2001      	movs	r0, #1
 8006db2:	f7fd f977 	bl	80040a4 <_exit>
	...

08006db8 <__sflush_r>:
 8006db8:	898a      	ldrh	r2, [r1, #12]
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	0710      	lsls	r0, r2, #28
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	d458      	bmi.n	8006e78 <__sflush_r+0xc0>
 8006dc6:	684b      	ldr	r3, [r1, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc05      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc02      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	d0f9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006dde:	2300      	movs	r3, #0
 8006de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de4:	682f      	ldr	r7, [r5, #0]
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	d032      	beq.n	8006e50 <__sflush_r+0x98>
 8006dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	075a      	lsls	r2, r3, #29
 8006df0:	d505      	bpl.n	8006dfe <__sflush_r+0x46>
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	1ac0      	subs	r0, r0, r3
 8006df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006df8:	b10b      	cbz	r3, 8006dfe <__sflush_r+0x46>
 8006dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4602      	mov	r2, r0
 8006e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e04:	6a21      	ldr	r1, [r4, #32]
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	d106      	bne.n	8006e1e <__sflush_r+0x66>
 8006e10:	6829      	ldr	r1, [r5, #0]
 8006e12:	291d      	cmp	r1, #29
 8006e14:	d82c      	bhi.n	8006e70 <__sflush_r+0xb8>
 8006e16:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <__sflush_r+0x108>)
 8006e18:	40ca      	lsrs	r2, r1
 8006e1a:	07d6      	lsls	r6, r2, #31
 8006e1c:	d528      	bpl.n	8006e70 <__sflush_r+0xb8>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	6062      	str	r2, [r4, #4]
 8006e22:	04d9      	lsls	r1, r3, #19
 8006e24:	6922      	ldr	r2, [r4, #16]
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	d504      	bpl.n	8006e34 <__sflush_r+0x7c>
 8006e2a:	1c42      	adds	r2, r0, #1
 8006e2c:	d101      	bne.n	8006e32 <__sflush_r+0x7a>
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	b903      	cbnz	r3, 8006e34 <__sflush_r+0x7c>
 8006e32:	6560      	str	r0, [r4, #84]	; 0x54
 8006e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e36:	602f      	str	r7, [r5, #0]
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	d0ca      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__sflush_r+0x92>
 8006e44:	4628      	mov	r0, r5
 8006e46:	f7ff fae3 	bl	8006410 <_free_r>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e4e:	e7c1      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e50:	6a21      	ldr	r1, [r4, #32]
 8006e52:	2301      	movs	r3, #1
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b0      	blx	r6
 8006e58:	1c41      	adds	r1, r0, #1
 8006e5a:	d1c7      	bne.n	8006dec <__sflush_r+0x34>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c4      	beq.n	8006dec <__sflush_r+0x34>
 8006e62:	2b1d      	cmp	r3, #29
 8006e64:	d001      	beq.n	8006e6a <__sflush_r+0xb2>
 8006e66:	2b16      	cmp	r3, #22
 8006e68:	d101      	bne.n	8006e6e <__sflush_r+0xb6>
 8006e6a:	602f      	str	r7, [r5, #0]
 8006e6c:	e7b1      	b.n	8006dd2 <__sflush_r+0x1a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e7ad      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e78:	690f      	ldr	r7, [r1, #16]
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	d0a9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e7e:	0793      	lsls	r3, r2, #30
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	bf08      	it	eq
 8006e84:	694b      	ldreq	r3, [r1, #20]
 8006e86:	600f      	str	r7, [r1, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	eba6 0807 	sub.w	r8, r6, r7
 8006e90:	608b      	str	r3, [r1, #8]
 8006e92:	f1b8 0f00 	cmp.w	r8, #0
 8006e96:	dd9c      	ble.n	8006dd2 <__sflush_r+0x1a>
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	dc06      	bgt.n	8006eb6 <__sflush_r+0xfe>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	e78e      	b.n	8006dd4 <__sflush_r+0x1c>
 8006eb6:	4407      	add	r7, r0
 8006eb8:	eba8 0800 	sub.w	r8, r8, r0
 8006ebc:	e7e9      	b.n	8006e92 <__sflush_r+0xda>
 8006ebe:	bf00      	nop
 8006ec0:	20400001 	.word	0x20400001

08006ec4 <_fflush_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b913      	cbnz	r3, 8006ed4 <_fflush_r+0x10>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	b118      	cbz	r0, 8006ede <_fflush_r+0x1a>
 8006ed6:	6983      	ldr	r3, [r0, #24]
 8006ed8:	b90b      	cbnz	r3, 8006ede <_fflush_r+0x1a>
 8006eda:	f000 f887 	bl	8006fec <__sinit>
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <_fflush_r+0x6c>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d11b      	bne.n	8006f1c <_fflush_r+0x58>
 8006ee4:	686c      	ldr	r4, [r5, #4]
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ef      	beq.n	8006ece <_fflush_r+0xa>
 8006eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d404      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef4:	0599      	lsls	r1, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f000 f915 	bl	8007128 <__retarget_lock_acquire_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7ff ff59 	bl	8006db8 <__sflush_r>
 8006f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f08:	07da      	lsls	r2, r3, #31
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	d4e0      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	059b      	lsls	r3, r3, #22
 8006f12:	d4dd      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f16:	f000 f908 	bl	800712a <__retarget_lock_release_recursive>
 8006f1a:	e7d9      	b.n	8006ed0 <_fflush_r+0xc>
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <_fflush_r+0x70>)
 8006f1e:	429c      	cmp	r4, r3
 8006f20:	d101      	bne.n	8006f26 <_fflush_r+0x62>
 8006f22:	68ac      	ldr	r4, [r5, #8]
 8006f24:	e7df      	b.n	8006ee6 <_fflush_r+0x22>
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <_fflush_r+0x74>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	bf08      	it	eq
 8006f2c:	68ec      	ldreq	r4, [r5, #12]
 8006f2e:	e7da      	b.n	8006ee6 <_fflush_r+0x22>
 8006f30:	080077cc 	.word	0x080077cc
 8006f34:	080077ec 	.word	0x080077ec
 8006f38:	080077ac 	.word	0x080077ac

08006f3c <std>:
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	e9c0 3300 	strd	r3, r3, [r0]
 8006f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f4a:	6083      	str	r3, [r0, #8]
 8006f4c:	8181      	strh	r1, [r0, #12]
 8006f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f50:	81c2      	strh	r2, [r0, #14]
 8006f52:	6183      	str	r3, [r0, #24]
 8006f54:	4619      	mov	r1, r3
 8006f56:	2208      	movs	r2, #8
 8006f58:	305c      	adds	r0, #92	; 0x5c
 8006f5a:	f7fd fb9b 	bl	8004694 <memset>
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x38>)
 8006f60:	6263      	str	r3, [r4, #36]	; 0x24
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std+0x3c>)
 8006f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x40>)
 8006f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <std+0x44>)
 8006f6c:	6224      	str	r4, [r4, #32]
 8006f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	0800728d 	.word	0x0800728d
 8006f78:	080072af 	.word	0x080072af
 8006f7c:	080072e7 	.word	0x080072e7
 8006f80:	0800730b 	.word	0x0800730b

08006f84 <_cleanup_r>:
 8006f84:	4901      	ldr	r1, [pc, #4]	; (8006f8c <_cleanup_r+0x8>)
 8006f86:	f000 b8af 	b.w	80070e8 <_fwalk_reent>
 8006f8a:	bf00      	nop
 8006f8c:	08006ec5 	.word	0x08006ec5

08006f90 <__sfmoreglue>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	1e4a      	subs	r2, r1, #1
 8006f94:	2568      	movs	r5, #104	; 0x68
 8006f96:	4355      	muls	r5, r2
 8006f98:	460e      	mov	r6, r1
 8006f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f9e:	f7ff fa87 	bl	80064b0 <_malloc_r>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	b140      	cbz	r0, 8006fb8 <__sfmoreglue+0x28>
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fac:	300c      	adds	r0, #12
 8006fae:	60a0      	str	r0, [r4, #8]
 8006fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb4:	f7fd fb6e 	bl	8004694 <memset>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bd70      	pop	{r4, r5, r6, pc}

08006fbc <__sfp_lock_acquire>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sfp_lock_acquire+0x8>)
 8006fbe:	f000 b8b3 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	2000022c 	.word	0x2000022c

08006fc8 <__sfp_lock_release>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__sfp_lock_release+0x8>)
 8006fca:	f000 b8ae 	b.w	800712a <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	2000022c 	.word	0x2000022c

08006fd4 <__sinit_lock_acquire>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__sinit_lock_acquire+0x8>)
 8006fd6:	f000 b8a7 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	20000227 	.word	0x20000227

08006fe0 <__sinit_lock_release>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__sinit_lock_release+0x8>)
 8006fe2:	f000 b8a2 	b.w	800712a <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	20000227 	.word	0x20000227

08006fec <__sinit>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4604      	mov	r4, r0
 8006ff0:	f7ff fff0 	bl	8006fd4 <__sinit_lock_acquire>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	b11b      	cbz	r3, 8007000 <__sinit+0x14>
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f7ff bff0 	b.w	8006fe0 <__sinit_lock_release>
 8007000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007004:	6523      	str	r3, [r4, #80]	; 0x50
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <__sinit+0x68>)
 8007008:	4a13      	ldr	r2, [pc, #76]	; (8007058 <__sinit+0x6c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	62a2      	str	r2, [r4, #40]	; 0x28
 800700e:	42a3      	cmp	r3, r4
 8007010:	bf04      	itt	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	61a3      	streq	r3, [r4, #24]
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f820 	bl	800705c <__sfp>
 800701c:	6060      	str	r0, [r4, #4]
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f81c 	bl	800705c <__sfp>
 8007024:	60a0      	str	r0, [r4, #8]
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f818 	bl	800705c <__sfp>
 800702c:	2200      	movs	r2, #0
 800702e:	60e0      	str	r0, [r4, #12]
 8007030:	2104      	movs	r1, #4
 8007032:	6860      	ldr	r0, [r4, #4]
 8007034:	f7ff ff82 	bl	8006f3c <std>
 8007038:	68a0      	ldr	r0, [r4, #8]
 800703a:	2201      	movs	r2, #1
 800703c:	2109      	movs	r1, #9
 800703e:	f7ff ff7d 	bl	8006f3c <std>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	2202      	movs	r2, #2
 8007046:	2112      	movs	r1, #18
 8007048:	f7ff ff78 	bl	8006f3c <std>
 800704c:	2301      	movs	r3, #1
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	e7d2      	b.n	8006ff8 <__sinit+0xc>
 8007052:	bf00      	nop
 8007054:	0800742c 	.word	0x0800742c
 8007058:	08006f85 	.word	0x08006f85

0800705c <__sfp>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4607      	mov	r7, r0
 8007060:	f7ff ffac 	bl	8006fbc <__sfp_lock_acquire>
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <__sfp+0x84>)
 8007066:	681e      	ldr	r6, [r3, #0]
 8007068:	69b3      	ldr	r3, [r6, #24]
 800706a:	b913      	cbnz	r3, 8007072 <__sfp+0x16>
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ffbd 	bl	8006fec <__sinit>
 8007072:	3648      	adds	r6, #72	; 0x48
 8007074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007078:	3b01      	subs	r3, #1
 800707a:	d503      	bpl.n	8007084 <__sfp+0x28>
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	b30b      	cbz	r3, 80070c4 <__sfp+0x68>
 8007080:	6836      	ldr	r6, [r6, #0]
 8007082:	e7f7      	b.n	8007074 <__sfp+0x18>
 8007084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007088:	b9d5      	cbnz	r5, 80070c0 <__sfp+0x64>
 800708a:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <__sfp+0x88>)
 800708c:	60e3      	str	r3, [r4, #12]
 800708e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007092:	6665      	str	r5, [r4, #100]	; 0x64
 8007094:	f000 f847 	bl	8007126 <__retarget_lock_init_recursive>
 8007098:	f7ff ff96 	bl	8006fc8 <__sfp_lock_release>
 800709c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	61a5      	str	r5, [r4, #24]
 80070a8:	2208      	movs	r2, #8
 80070aa:	4629      	mov	r1, r5
 80070ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b0:	f7fd faf0 	bl	8004694 <memset>
 80070b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070bc:	4620      	mov	r0, r4
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c0:	3468      	adds	r4, #104	; 0x68
 80070c2:	e7d9      	b.n	8007078 <__sfp+0x1c>
 80070c4:	2104      	movs	r1, #4
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ff62 	bl	8006f90 <__sfmoreglue>
 80070cc:	4604      	mov	r4, r0
 80070ce:	6030      	str	r0, [r6, #0]
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1d5      	bne.n	8007080 <__sfp+0x24>
 80070d4:	f7ff ff78 	bl	8006fc8 <__sfp_lock_release>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	e7ee      	b.n	80070bc <__sfp+0x60>
 80070de:	bf00      	nop
 80070e0:	0800742c 	.word	0x0800742c
 80070e4:	ffff0001 	.word	0xffff0001

080070e8 <_fwalk_reent>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4606      	mov	r6, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070f4:	2700      	movs	r7, #0
 80070f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070fa:	f1b9 0901 	subs.w	r9, r9, #1
 80070fe:	d505      	bpl.n	800710c <_fwalk_reent+0x24>
 8007100:	6824      	ldr	r4, [r4, #0]
 8007102:	2c00      	cmp	r4, #0
 8007104:	d1f7      	bne.n	80070f6 <_fwalk_reent+0xe>
 8007106:	4638      	mov	r0, r7
 8007108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710c:	89ab      	ldrh	r3, [r5, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d907      	bls.n	8007122 <_fwalk_reent+0x3a>
 8007112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007116:	3301      	adds	r3, #1
 8007118:	d003      	beq.n	8007122 <_fwalk_reent+0x3a>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	47c0      	blx	r8
 8007120:	4307      	orrs	r7, r0
 8007122:	3568      	adds	r5, #104	; 0x68
 8007124:	e7e9      	b.n	80070fa <_fwalk_reent+0x12>

08007126 <__retarget_lock_init_recursive>:
 8007126:	4770      	bx	lr

08007128 <__retarget_lock_acquire_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_release_recursive>:
 800712a:	4770      	bx	lr

0800712c <__swhatbuf_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	460e      	mov	r6, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2900      	cmp	r1, #0
 8007136:	b096      	sub	sp, #88	; 0x58
 8007138:	4614      	mov	r4, r2
 800713a:	461d      	mov	r5, r3
 800713c:	da07      	bge.n	800714e <__swhatbuf_r+0x22>
 800713e:	2300      	movs	r3, #0
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	89b3      	ldrh	r3, [r6, #12]
 8007144:	061a      	lsls	r2, r3, #24
 8007146:	d410      	bmi.n	800716a <__swhatbuf_r+0x3e>
 8007148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800714c:	e00e      	b.n	800716c <__swhatbuf_r+0x40>
 800714e:	466a      	mov	r2, sp
 8007150:	f000 f902 	bl	8007358 <_fstat_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	dbf2      	blt.n	800713e <__swhatbuf_r+0x12>
 8007158:	9a01      	ldr	r2, [sp, #4]
 800715a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800715e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007162:	425a      	negs	r2, r3
 8007164:	415a      	adcs	r2, r3
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	e7ee      	b.n	8007148 <__swhatbuf_r+0x1c>
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	2000      	movs	r0, #0
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	b016      	add	sp, #88	; 0x58
 8007172:	bd70      	pop	{r4, r5, r6, pc}

08007174 <__smakebuf_r>:
 8007174:	898b      	ldrh	r3, [r1, #12]
 8007176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007178:	079d      	lsls	r5, r3, #30
 800717a:	4606      	mov	r6, r0
 800717c:	460c      	mov	r4, r1
 800717e:	d507      	bpl.n	8007190 <__smakebuf_r+0x1c>
 8007180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	2301      	movs	r3, #1
 800718a:	6163      	str	r3, [r4, #20]
 800718c:	b002      	add	sp, #8
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	ab01      	add	r3, sp, #4
 8007192:	466a      	mov	r2, sp
 8007194:	f7ff ffca 	bl	800712c <__swhatbuf_r>
 8007198:	9900      	ldr	r1, [sp, #0]
 800719a:	4605      	mov	r5, r0
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff f987 	bl	80064b0 <_malloc_r>
 80071a2:	b948      	cbnz	r0, 80071b8 <__smakebuf_r+0x44>
 80071a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d4ef      	bmi.n	800718c <__smakebuf_r+0x18>
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	e7e3      	b.n	8007180 <__smakebuf_r+0xc>
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <__smakebuf_r+0x7c>)
 80071ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	6163      	str	r3, [r4, #20]
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	6120      	str	r0, [r4, #16]
 80071ce:	b15b      	cbz	r3, 80071e8 <__smakebuf_r+0x74>
 80071d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f8d1 	bl	800737c <_isatty_r>
 80071da:	b128      	cbz	r0, 80071e8 <__smakebuf_r+0x74>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	89a0      	ldrh	r0, [r4, #12]
 80071ea:	4305      	orrs	r5, r0
 80071ec:	81a5      	strh	r5, [r4, #12]
 80071ee:	e7cd      	b.n	800718c <__smakebuf_r+0x18>
 80071f0:	08006f85 	.word	0x08006f85

080071f4 <_malloc_usable_size_r>:
 80071f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f8:	1f18      	subs	r0, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfbc      	itt	lt
 80071fe:	580b      	ldrlt	r3, [r1, r0]
 8007200:	18c0      	addlt	r0, r0, r3
 8007202:	4770      	bx	lr

08007204 <_raise_r>:
 8007204:	291f      	cmp	r1, #31
 8007206:	b538      	push	{r3, r4, r5, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	d904      	bls.n	8007218 <_raise_r+0x14>
 800720e:	2316      	movs	r3, #22
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800721a:	b112      	cbz	r2, 8007222 <_raise_r+0x1e>
 800721c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007220:	b94b      	cbnz	r3, 8007236 <_raise_r+0x32>
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f830 	bl	8007288 <_getpid_r>
 8007228:	462a      	mov	r2, r5
 800722a:	4601      	mov	r1, r0
 800722c:	4620      	mov	r0, r4
 800722e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007232:	f000 b817 	b.w	8007264 <_kill_r>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d00a      	beq.n	8007250 <_raise_r+0x4c>
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	d103      	bne.n	8007246 <_raise_r+0x42>
 800723e:	2316      	movs	r3, #22
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	2001      	movs	r0, #1
 8007244:	e7e7      	b.n	8007216 <_raise_r+0x12>
 8007246:	2400      	movs	r4, #0
 8007248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800724c:	4628      	mov	r0, r5
 800724e:	4798      	blx	r3
 8007250:	2000      	movs	r0, #0
 8007252:	e7e0      	b.n	8007216 <_raise_r+0x12>

08007254 <raise>:
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <raise+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f7ff bfd3 	b.w	8007204 <_raise_r>
 800725e:	bf00      	nop
 8007260:	20000008 	.word	0x20000008

08007264 <_kill_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_kill_r+0x20>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	f7fc ff07 	bl	8004084 <_kill>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d102      	bne.n	8007280 <_kill_r+0x1c>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	b103      	cbz	r3, 8007280 <_kill_r+0x1c>
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	bf00      	nop
 8007284:	20000220 	.word	0x20000220

08007288 <_getpid_r>:
 8007288:	f7fc bef4 	b.w	8004074 <_getpid>

0800728c <__sread>:
 800728c:	b510      	push	{r4, lr}
 800728e:	460c      	mov	r4, r1
 8007290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007294:	f000 f894 	bl	80073c0 <_read_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	bfab      	itete	ge
 800729c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800729e:	89a3      	ldrhlt	r3, [r4, #12]
 80072a0:	181b      	addge	r3, r3, r0
 80072a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072a6:	bfac      	ite	ge
 80072a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072aa:	81a3      	strhlt	r3, [r4, #12]
 80072ac:	bd10      	pop	{r4, pc}

080072ae <__swrite>:
 80072ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	461f      	mov	r7, r3
 80072b4:	898b      	ldrh	r3, [r1, #12]
 80072b6:	05db      	lsls	r3, r3, #23
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4616      	mov	r6, r2
 80072be:	d505      	bpl.n	80072cc <__swrite+0x1e>
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	2302      	movs	r3, #2
 80072c6:	2200      	movs	r2, #0
 80072c8:	f000 f868 	bl	800739c <_lseek_r>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	4632      	mov	r2, r6
 80072da:	463b      	mov	r3, r7
 80072dc:	4628      	mov	r0, r5
 80072de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	f000 b817 	b.w	8007314 <_write_r>

080072e6 <__sseek>:
 80072e6:	b510      	push	{r4, lr}
 80072e8:	460c      	mov	r4, r1
 80072ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ee:	f000 f855 	bl	800739c <_lseek_r>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	bf15      	itete	ne
 80072f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007302:	81a3      	strheq	r3, [r4, #12]
 8007304:	bf18      	it	ne
 8007306:	81a3      	strhne	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__sclose>:
 800730a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730e:	f000 b813 	b.w	8007338 <_close_r>
	...

08007314 <_write_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d07      	ldr	r5, [pc, #28]	; (8007334 <_write_r+0x20>)
 8007318:	4604      	mov	r4, r0
 800731a:	4608      	mov	r0, r1
 800731c:	4611      	mov	r1, r2
 800731e:	2200      	movs	r2, #0
 8007320:	602a      	str	r2, [r5, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f7fc fee5 	bl	80040f2 <_write>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_write_r+0x1e>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_write_r+0x1e>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000220 	.word	0x20000220

08007338 <_close_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	; (8007354 <_close_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fc fef1 	bl	800412a <_close>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_close_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_close_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20000220 	.word	0x20000220

08007358 <_fstat_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	; (8007378 <_fstat_r+0x20>)
 800735c:	2300      	movs	r3, #0
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	f7fc feec 	bl	8004142 <_fstat>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d102      	bne.n	8007374 <_fstat_r+0x1c>
 800736e:	682b      	ldr	r3, [r5, #0]
 8007370:	b103      	cbz	r3, 8007374 <_fstat_r+0x1c>
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	bd38      	pop	{r3, r4, r5, pc}
 8007376:	bf00      	nop
 8007378:	20000220 	.word	0x20000220

0800737c <_isatty_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d06      	ldr	r5, [pc, #24]	; (8007398 <_isatty_r+0x1c>)
 8007380:	2300      	movs	r3, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	f7fc feeb 	bl	8004162 <_isatty>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_isatty_r+0x1a>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_isatty_r+0x1a>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000220 	.word	0x20000220

0800739c <_lseek_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	; (80073bc <_lseek_r+0x20>)
 80073a0:	4604      	mov	r4, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	4611      	mov	r1, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	602a      	str	r2, [r5, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7fc fee4 	bl	8004178 <_lseek>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_lseek_r+0x1e>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_lseek_r+0x1e>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000220 	.word	0x20000220

080073c0 <_read_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	; (80073e0 <_read_r+0x20>)
 80073c4:	4604      	mov	r4, r0
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7fc fe72 	bl	80040b8 <_read>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_read_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_read_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20000220 	.word	0x20000220

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr
